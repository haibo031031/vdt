{"name":"Vdt","tagline":"Vector data types","body":"### Introduction\r\n\r\nIf we code in the traditional CUDA-style (without any vectorization), only a small proportion of the computational potential, in theory, is tapped for these machines with SIMD units. Thus, vectorization (either manual vectorization or auto-vectorization module) is required. Manual vectorization (with vector data types) generates a large number of code variants and poses a challenge for performance portability. Auto-vectorizer is preferred in such a context when considering both performance and portability. As a start, we have provided a suite of benchmarks on investigating the use of vector data types in OpenCL.\r\n\r\n### Mapping VDTs to hardware\r\n![scalar model](http://www.pds.ewi.tudelft.nl/fileadmin/pds/homepages/fang/docs/execution_model_scalar.jpg)\r\n\r\n![vector model](http://www.pds.ewi.tudelft.nl/fileadmin/pds/homepages/fang/docs/execution_model_vector.jpg)\r\n\r\n### Reference\r\nJ. Fang, et al., \"Evaluating vector data type usage in OpenCL kernels,\" (In submission).\r\n\r\n### Support or Contact\r\nHaving trouble with the code? Let me us via j.fang@tudelft.nl.","google":"Vector-data-types","note":"Don't delete this file! It's used internally to help with page regeneration."}