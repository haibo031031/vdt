; ModuleID = 'Program'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux"

declare void @__read_1_original(float addrspace(1)* nocapture, float addrspace(1)* nocapture, i32) nounwind

declare i64 @_Z13get_global_idj(i32) nounwind readnone

declare void @__read_2_original(float addrspace(1)*, float addrspace(1)*, i32) nounwind

declare <2 x float> @_Z6vload2mPKU3AS1f(i64, float addrspace(1)*) nounwind readonly

declare void @_Z7vstore2Dv2_fmPU3AS1f(<2 x float>, i64, float addrspace(1)*) nounwind

declare void @__read_4_original(float addrspace(1)*, float addrspace(1)*, i32) nounwind

declare <4 x float> @_Z6vload4mPKU3AS1f(i64, float addrspace(1)*) nounwind readonly

declare void @_Z7vstore4Dv4_fmPU3AS1f(<4 x float>, i64, float addrspace(1)*) nounwind

declare void @__read_8_original(float addrspace(1)*, float addrspace(1)*, i32) nounwind

declare <8 x float> @_Z6vload8mPKU3AS1f(i64, float addrspace(1)*) nounwind readonly

declare void @_Z7vstore8Dv8_fmPU3AS1f(<8 x float>, i64, float addrspace(1)*) nounwind

declare void @__read_16_original(float addrspace(1)*, float addrspace(1)*, i32) nounwind

declare <16 x float> @_Z7vload16mPKU3AS1f(i64, float addrspace(1)*) nounwind readonly

declare void @_Z8vstore16Dv16_fmPU3AS1f(<16 x float>, i64, float addrspace(1)*) nounwind

declare [7 x i64] @__WG.boundaries.read_1_original(float addrspace(1)*, float addrspace(1)*, i32)

declare i64 @_Z14get_local_sizej(i32)

declare i64 @get_base_global_id.(i32)

declare [7 x i64] @__WG.boundaries.read_2_original(float addrspace(1)*, float addrspace(1)*, i32)

declare [7 x i64] @__WG.boundaries.read_4_original(float addrspace(1)*, float addrspace(1)*, i32)

declare [7 x i64] @__WG.boundaries.read_8_original(float addrspace(1)*, float addrspace(1)*, i32)

declare [7 x i64] @__WG.boundaries.read_16_original(float addrspace(1)*, float addrspace(1)*, i32)

declare i1 @__ocl_allOne(i1)

declare i1 @__ocl_allZero(i1)

declare void @__read_1_separated_args(float addrspace(1)* nocapture, float addrspace(1)* nocapture, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*) nounwind alwaysinline

declare void @__read_2_separated_args(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*) nounwind alwaysinline

declare void @__read_4_separated_args(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*) nounwind alwaysinline

declare void @__read_8_separated_args(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*) nounwind alwaysinline

declare void @__read_16_separated_args(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*) nounwind alwaysinline

declare [7 x i64] @WG.boundaries.read_1(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)

declare [7 x i64] @WG.boundaries.read_2(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)

declare [7 x i64] @WG.boundaries.read_4(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)

declare [7 x i64] @WG.boundaries.read_8(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)

declare [7 x i64] @WG.boundaries.read_16(float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)

declare void @llvm.x86.mic.packstorel.ps(i8*, <16 x float>, i32, i32) nounwind

declare void @llvm.x86.mic.packstoreh.ps(i8*, <16 x float>, i32, i32) nounwind

declare <16 x float> @llvm.x86.mic.undef.ps() nounwind readnone

declare <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float>, i8*, i32, i32) nounwind readonly

declare <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float>, i8*, i32, i32) nounwind readonly

declare void @llvm.x86.mic.mask.packstorel.ps(i8*, i16, <16 x float>, i32, i32) nounwind

declare void @llvm.x86.mic.mask.packstoreh.ps(i8*, i16, <16 x float>, i32, i32) nounwind

declare <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float>, i16, i8*, i32, i32) nounwind readonly

declare <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float>, i16, i8*, i32, i32) nounwind readonly

define void @read_1(i8* %pUniformArgs, i64* %pWGId, {}* %RuntimeContext) {
wrapper_entry:
  %0 = bitcast i8* %pUniformArgs to float addrspace(1)**
  %explicit_0 = load float addrspace(1)** %0, align 8
  %1 = getelementptr i8* %pUniformArgs, i64 8
  %2 = bitcast i8* %1 to float addrspace(1)**
  %explicit_1 = load float addrspace(1)** %2, align 8
  %3 = getelementptr i8* %pUniformArgs, i64 16
  %4 = bitcast i8* %3 to i32*
  %explicit_2 = load i32* %4, align 4
  %5 = zext i32 %explicit_2 to i64
  %6 = getelementptr i8* %pUniformArgs, i64 80
  %7 = bitcast i8* %6 to i64*
  %LocalSize_0 = load i64* %7, align 8
  %8 = getelementptr i8* %pUniformArgs, i64 88
  %9 = bitcast i8* %8 to i64*
  %LocalSize_1 = load i64* %9, align 8
  %10 = getelementptr i8* %pUniformArgs, i64 32
  %11 = bitcast i8* %10 to i64*
  %GlobalOffset_0 = load i64* %11, align 8
  %12 = getelementptr i8* %pUniformArgs, i64 40
  %13 = bitcast i8* %12 to i64*
  %GlobalOffset_1 = load i64* %13, align 8
  %GroupID_0 = load i64* %pWGId, align 8
  %14 = getelementptr i64* %pWGId, i64 1
  %GroupID_1 = load i64* %14, align 8
  %vector.size.i = ashr i64 %LocalSize_0, 4
  %num.vector.wi.i = and i64 %LocalSize_0, -16
  %15 = icmp eq i64 %vector.size.i, 0
  br i1 %15, label %scalarIf.i, label %dim_0_vector_pre_head.i.preheader

dim_0_vector_pre_head.i.preheader:                ; preds = %wrapper_entry
  %16 = trunc i64 %5 to i32
  %17 = mul i64 %5, 4
  %18 = mul i64 %LocalSize_0, %GroupID_0
  %19 = add i64 %GlobalOffset_0, %18
  %20 = mul i64 %LocalSize_1, %GroupID_1
  %21 = add i64 %GlobalOffset_1, %20
  %22 = mul i64 %21, %5
  %23 = add i64 %19, %22
  %24 = mul i64 %23, 4
  %25 = trunc i64 %21 to i32
  %26 = mul i32 %16, %25
  %27 = add i64 %GlobalOffset_0, %18
  %28 = trunc i64 %27 to i32
  %29 = add i32 %26, %28
  br label %dim_0_vector_pre_head.i

dim_0_vector_pre_head.i:                          ; preds = %dim_0_vector_pre_head.i.preheader, %dim_0_vector_exit.i
  %lsr.iv32 = phi i32 [ %29, %dim_0_vector_pre_head.i.preheader ], [ %lsr.iv.next33, %dim_0_vector_exit.i ]
  %lsr.iv19 = phi float addrspace(1)* [ %explicit_0, %dim_0_vector_pre_head.i.preheader ], [ %41, %dim_0_vector_exit.i ]
  %lsr.iv11 = phi float addrspace(1)* [ %explicit_1, %dim_0_vector_pre_head.i.preheader ], [ %40, %dim_0_vector_exit.i ]
  %dim_1_vector_ind_var.i = phi i64 [ %dim_1_vector_inc_ind_var.i, %dim_0_vector_exit.i ], [ 0, %dim_0_vector_pre_head.i.preheader ]
  br label %30

; <label>:30                                      ; preds = %30, %dim_0_vector_pre_head.i
  %lsr.iv34 = phi i32 [ %lsr.iv.next35, %30 ], [ %lsr.iv32, %dim_0_vector_pre_head.i ]
  %lsr.iv30 = phi i64 [ %lsr.iv.next31, %30 ], [ %vector.size.i, %dim_0_vector_pre_head.i ]
  %lsr.iv22 = phi float addrspace(1)* [ %scevgep23, %30 ], [ %lsr.iv19, %dim_0_vector_pre_head.i ]
  %lsr.iv14 = phi float addrspace(1)* [ %scevgep15, %30 ], [ %lsr.iv11, %dim_0_vector_pre_head.i ]
  %lsr.iv2224 = bitcast float addrspace(1)* %lsr.iv22 to i8 addrspace(1)*
  %lsr.iv1416 = bitcast float addrspace(1)* %lsr.iv14 to i8 addrspace(1)*
  %31 = bitcast float addrspace(1)* undef to i8 addrspace(1)*
  %32 = bitcast float addrspace(1)* undef to i8 addrspace(1)*
  %extractvector_func.i = sext i32 %lsr.iv34 to i64
  %33 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extractvector_func.i
  %ptrTypeCastvector_func.i = bitcast float addrspace(1)* %33 to <16 x float> addrspace(1)*
  %uglygep25 = getelementptr i8 addrspace(1)* %lsr.iv2224, i64 %24
  %uglygep2526 = bitcast i8 addrspace(1)* %uglygep25 to i8*
  %scevgep27 = getelementptr i8* %uglygep2526, i64 64
  call void @llvm.x86.mic.prefetch(i8* %scevgep27, i32 1)
  %scevgep29 = getelementptr i8* %uglygep2526, i64 256
  call void @llvm.x86.mic.prefetch(i8* %scevgep29, i32 2)
  %34 = load <16 x float> addrspace(1)* %ptrTypeCastvector_func.i, align 4
  %35 = fadd <16 x float> %34, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %36 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extractvector_func.i
  %ptrTypeCast18vector_func.i = bitcast float addrspace(1)* %36 to <16 x float> addrspace(1)*
  %uglygep = getelementptr i8 addrspace(1)* %lsr.iv1416, i64 %24
  %uglygep17 = bitcast i8 addrspace(1)* %uglygep to i8*
  %scevgep18 = getelementptr i8* %uglygep17, i64 64
  call void @llvm.x86.mic.prefetch(i8* %scevgep18, i32 5)
  %scevgep28 = getelementptr i8* %uglygep17, i64 256
  call void @llvm.x86.mic.prefetch(i8* %scevgep28, i32 6)
  store <16 x float> %35, <16 x float> addrspace(1)* %ptrTypeCast18vector_func.i, align 4
  %scevgep15 = getelementptr float addrspace(1)* %lsr.iv14, i64 16
  %scevgep23 = getelementptr float addrspace(1)* %lsr.iv22, i64 16
  %lsr.iv.next31 = add i64 %lsr.iv30, -1
  %lsr.iv.next35 = add i32 %lsr.iv34, 16
  %dim_0_vector_cmp.to.max.i = icmp eq i64 %lsr.iv.next31, 0
  br i1 %dim_0_vector_cmp.to.max.i, label %dim_0_vector_exit.i, label %30

dim_0_vector_exit.i:                              ; preds = %30
  %37 = bitcast float addrspace(1)* %lsr.iv11 to i1 addrspace(1)*
  %38 = bitcast float addrspace(1)* %lsr.iv19 to i1 addrspace(1)*
  %39 = trunc i64 %5 to i32
  %dim_1_vector_inc_ind_var.i = add nuw nsw i64 %dim_1_vector_ind_var.i, 1
  %scevgep13 = getelementptr i1 addrspace(1)* %37, i64 %17
  %40 = bitcast i1 addrspace(1)* %scevgep13 to float addrspace(1)*
  %scevgep21 = getelementptr i1 addrspace(1)* %38, i64 %17
  %41 = bitcast i1 addrspace(1)* %scevgep21 to float addrspace(1)*
  %lsr.iv.next33 = add i32 %lsr.iv32, %39
  %dim_1_vector_cmp.to.max.i = icmp eq i64 %dim_1_vector_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_vector_cmp.to.max.i, label %scalarIf.i, label %dim_0_vector_pre_head.i

scalarIf.i:                                       ; preds = %dim_0_vector_exit.i, %wrapper_entry
  %42 = icmp eq i64 %LocalSize_0, %num.vector.wi.i
  br i1 %42, label %__read_1_separated_args.exit, label %dim_0_pre_head.i.preheader

dim_0_pre_head.i.preheader:                       ; preds = %scalarIf.i
  %43 = trunc i64 %5 to i32
  %44 = sub i64 %LocalSize_0, %num.vector.wi.i
  %45 = mul i64 %LocalSize_1, %GroupID_1
  %46 = add i64 %GlobalOffset_1, %45
  %47 = trunc i64 %46 to i32
  %48 = mul i32 %43, %47
  %49 = add i64 %GlobalOffset_0, %num.vector.wi.i
  %50 = mul i64 %LocalSize_0, %GroupID_0
  %51 = add i64 %49, %50
  %52 = trunc i64 %51 to i32
  %53 = add i32 %48, %52
  br label %dim_0_pre_head.i

dim_0_pre_head.i:                                 ; preds = %dim_0_pre_head.i.preheader, %dim_0_exit.i
  %lsr.iv7 = phi i32 [ %53, %dim_0_pre_head.i.preheader ], [ %lsr.iv.next8, %dim_0_exit.i ]
  %dim_1_ind_var.i = phi i64 [ %dim_1_inc_ind_var.i, %dim_0_exit.i ], [ 0, %dim_0_pre_head.i.preheader ]
  br label %scalar_kernel_entry.i

scalar_kernel_entry.i:                            ; preds = %scalar_kernel_entry.i, %dim_0_pre_head.i
  %lsr.iv9 = phi i32 [ %lsr.iv.next10, %scalar_kernel_entry.i ], [ %lsr.iv7, %dim_0_pre_head.i ]
  %lsr.iv = phi i64 [ %lsr.iv.next, %scalar_kernel_entry.i ], [ %44, %dim_0_pre_head.i ]
  %54 = sext i32 %lsr.iv9 to i64
  %55 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %54
  %56 = load float addrspace(1)* %55, align 4
  %57 = fadd float %56, 3.000000e+00
  %58 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %54
  store float %57, float addrspace(1)* %58, align 4
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next10 = add i32 %lsr.iv9, 1
  %dim_0_cmp.to.max.i = icmp eq i64 %lsr.iv.next, 0
  br i1 %dim_0_cmp.to.max.i, label %dim_0_exit.i, label %scalar_kernel_entry.i

dim_0_exit.i:                                     ; preds = %scalar_kernel_entry.i
  %59 = trunc i64 %5 to i32
  %dim_1_inc_ind_var.i = add nuw nsw i64 %dim_1_ind_var.i, 1
  %lsr.iv.next8 = add i32 %lsr.iv7, %59
  %dim_1_cmp.to.max.i = icmp eq i64 %dim_1_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_cmp.to.max.i, label %__read_1_separated_args.exit, label %dim_0_pre_head.i

__read_1_separated_args.exit:                     ; preds = %dim_0_exit.i, %scalarIf.i
  ret void
}

define void @read_2(i8* %pUniformArgs, i64* %pWGId, {}* %RuntimeContext) {
wrapper_entry:
  %0 = bitcast i8* %pUniformArgs to float addrspace(1)**
  %explicit_0 = load float addrspace(1)** %0, align 8
  %1 = getelementptr i8* %pUniformArgs, i64 8
  %2 = bitcast i8* %1 to float addrspace(1)**
  %explicit_1 = load float addrspace(1)** %2, align 8
  %3 = getelementptr i8* %pUniformArgs, i64 16
  %4 = bitcast i8* %3 to i32*
  %explicit_2 = load i32* %4, align 4
  %5 = getelementptr i8* %pUniformArgs, i64 80
  %6 = bitcast i8* %5 to i64*
  %LocalSize_0 = load i64* %6, align 8
  %7 = getelementptr i8* %pUniformArgs, i64 88
  %8 = bitcast i8* %7 to i64*
  %LocalSize_1 = load i64* %8, align 8
  %9 = getelementptr i8* %pUniformArgs, i64 32
  %10 = bitcast i8* %9 to i64*
  %GlobalOffset_0 = load i64* %10, align 8
  %11 = getelementptr i8* %pUniformArgs, i64 40
  %12 = bitcast i8* %11 to i64*
  %GlobalOffset_1 = load i64* %12, align 8
  %GroupID_0 = load i64* %pWGId, align 8
  %13 = getelementptr i64* %pWGId, i64 1
  %GroupID_1 = load i64* %13, align 8
  %14 = mul i64 %LocalSize_0, %GroupID_0
  %15 = add i64 %14, %GlobalOffset_0
  %16 = mul i64 %LocalSize_1, %GroupID_1
  %17 = add i64 %16, %GlobalOffset_1
  %vector.size.i = ashr i64 %LocalSize_0, 4
  %num.vector.wi.i = and i64 %LocalSize_0, -16
  %18 = icmp eq i64 %vector.size.i, 0
  br i1 %18, label %scalarIf.i, label %dim_1_vector_pre_head.i

dim_1_vector_pre_head.i:                          ; preds = %wrapper_entry
  %tempvector_func.i = insertelement <16 x i64> undef, i64 %15, i32 0
  %vectorvector_func.i = shufflevector <16 x i64> %tempvector_func.i, <16 x i64> undef, <16 x i32> zeroinitializer
  %19 = add <16 x i64> %vectorvector_func.i, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %20 = shl <16 x i64> %19, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %21 = trunc <16 x i64> %20 to <16 x i32>
  br label %dim_0_vector_pre_head.i

dim_0_vector_pre_head.i:                          ; preds = %dim_0_vector_exit.i, %dim_1_vector_pre_head.i
  %dim_1_vector_ind_var.i = phi i64 [ 0, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_ind_var.i, %dim_0_vector_exit.i ]
  %dim_1_vector_tid.i = phi i64 [ %17, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_tid.i, %dim_0_vector_exit.i ]
  %22 = trunc i64 %dim_1_vector_tid.i to i32
  %23 = mul nsw i32 %22, %explicit_2
  %temp4vector_func.i = insertelement <16 x i32> undef, i32 %23, i32 0
  %vector3vector_func.i = shufflevector <16 x i32> %temp4vector_func.i, <16 x i32> undef, <16 x i32> zeroinitializer
  %24 = add nsw <16 x i32> %vector3vector_func.i, %21
  %25 = sext <16 x i32> %24 to <16 x i64>
  %extract.0.i = extractelement <16 x i64> %25, i32 0
  %extract.01.i = extractelement <16 x i64> %25, i32 1
  %sub.delta.i = sub i64 %extract.01.i, %extract.0.i
  %mul.delta.i = shl i64 %sub.delta.i, 4
  %temp.i = insertelement <16 x i64> undef, i64 %mul.delta.i, i32 0
  %vector.i = shufflevector <16 x i64> %temp.i, <16 x i64> undef, <16 x i32> zeroinitializer
  br label %26

; <label>:26                                      ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit1.i, %dim_0_vector_pre_head.i
  %lsr.iv5 = phi i64 [ %lsr.iv.next6, %_Z7vstore2Dv2_fmPU3AS1f.exit1.i ], [ %vector.size.i, %dim_0_vector_pre_head.i ]
  %27 = phi <16 x i64> [ %25, %dim_0_vector_pre_head.i ], [ %Strided.add.i, %_Z7vstore2Dv2_fmPU3AS1f.exit1.i ]
  %extractvector_func.i = extractelement <16 x i64> %27, i32 0
  %extract5vector_func.i = extractelement <16 x i64> %27, i32 1
  %extract6vector_func.i = extractelement <16 x i64> %27, i32 2
  %extract7vector_func.i = extractelement <16 x i64> %27, i32 3
  %extract8vector_func.i = extractelement <16 x i64> %27, i32 4
  %extract9vector_func.i = extractelement <16 x i64> %27, i32 5
  %extract10vector_func.i = extractelement <16 x i64> %27, i32 6
  %extract11vector_func.i = extractelement <16 x i64> %27, i32 7
  %extract12vector_func.i = extractelement <16 x i64> %27, i32 8
  %extract13vector_func.i = extractelement <16 x i64> %27, i32 9
  %extract14vector_func.i = extractelement <16 x i64> %27, i32 10
  %extract15vector_func.i = extractelement <16 x i64> %27, i32 11
  %extract16vector_func.i = extractelement <16 x i64> %27, i32 12
  %extract17vector_func.i = extractelement <16 x i64> %27, i32 13
  %extract18vector_func.i = extractelement <16 x i64> %27, i32 14
  %extract19vector_func.i = extractelement <16 x i64> %27, i32 15
  %28 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extractvector_func.i
  %29 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract5vector_func.i
  %30 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract6vector_func.i
  %31 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract7vector_func.i
  %32 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract8vector_func.i
  %33 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract9vector_func.i
  %34 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract10vector_func.i
  %35 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract11vector_func.i
  %36 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract12vector_func.i
  %37 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract13vector_func.i
  %38 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract14vector_func.i
  %39 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract15vector_func.i
  %40 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract16vector_func.i
  %41 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract17vector_func.i
  %42 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract18vector_func.i
  %43 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract19vector_func.i
  %44 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %45 = bitcast float addrspace(1)* %28 to i8*
  %46 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %45, i32 0, i32 0) nounwind
  %47 = ptrtoint float addrspace(1)* %28 to i64
  %48 = and i64 %47, 63
  %49 = icmp ugt i64 %48, 56
  br i1 %49, label %50, label %_Z6vload2mPKU3AS1f.exit48.i

; <label>:50                                      ; preds = %26
  %51 = bitcast float addrspace(1)* %28 to i8*
  %52 = getelementptr i8* %51, i64 64
  %53 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %46, i16 3, i8* %52, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit48.i

_Z6vload2mPKU3AS1f.exit48.i:                      ; preds = %50, %26
  %ret.0.i.i47.i = phi <16 x float> [ %53, %50 ], [ %46, %26 ]
  %54 = bitcast float addrspace(1)* %29 to i8*
  %55 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %54, i32 0, i32 0) nounwind
  %56 = ptrtoint float addrspace(1)* %29 to i64
  %57 = and i64 %56, 63
  %58 = icmp ugt i64 %57, 56
  br i1 %58, label %59, label %_Z6vload2mPKU3AS1f.exit46.i

; <label>:59                                      ; preds = %_Z6vload2mPKU3AS1f.exit48.i
  %60 = bitcast float addrspace(1)* %29 to i8*
  %61 = getelementptr i8* %60, i64 64
  %62 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %55, i16 3, i8* %61, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit46.i

_Z6vload2mPKU3AS1f.exit46.i:                      ; preds = %59, %_Z6vload2mPKU3AS1f.exit48.i
  %ret.0.i.i45.i = phi <16 x float> [ %62, %59 ], [ %55, %_Z6vload2mPKU3AS1f.exit48.i ]
  %63 = bitcast float addrspace(1)* %30 to i8*
  %64 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %63, i32 0, i32 0) nounwind
  %65 = ptrtoint float addrspace(1)* %30 to i64
  %66 = and i64 %65, 63
  %67 = icmp ugt i64 %66, 56
  br i1 %67, label %68, label %_Z6vload2mPKU3AS1f.exit44.i

; <label>:68                                      ; preds = %_Z6vload2mPKU3AS1f.exit46.i
  %69 = bitcast float addrspace(1)* %30 to i8*
  %70 = getelementptr i8* %69, i64 64
  %71 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %64, i16 3, i8* %70, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit44.i

_Z6vload2mPKU3AS1f.exit44.i:                      ; preds = %68, %_Z6vload2mPKU3AS1f.exit46.i
  %ret.0.i.i43.i = phi <16 x float> [ %71, %68 ], [ %64, %_Z6vload2mPKU3AS1f.exit46.i ]
  %72 = bitcast float addrspace(1)* %31 to i8*
  %73 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %72, i32 0, i32 0) nounwind
  %74 = ptrtoint float addrspace(1)* %31 to i64
  %75 = and i64 %74, 63
  %76 = icmp ugt i64 %75, 56
  br i1 %76, label %77, label %_Z6vload2mPKU3AS1f.exit42.i

; <label>:77                                      ; preds = %_Z6vload2mPKU3AS1f.exit44.i
  %78 = bitcast float addrspace(1)* %31 to i8*
  %79 = getelementptr i8* %78, i64 64
  %80 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %73, i16 3, i8* %79, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit42.i

_Z6vload2mPKU3AS1f.exit42.i:                      ; preds = %77, %_Z6vload2mPKU3AS1f.exit44.i
  %ret.0.i.i41.i = phi <16 x float> [ %80, %77 ], [ %73, %_Z6vload2mPKU3AS1f.exit44.i ]
  %81 = bitcast float addrspace(1)* %32 to i8*
  %82 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %81, i32 0, i32 0) nounwind
  %83 = ptrtoint float addrspace(1)* %32 to i64
  %84 = and i64 %83, 63
  %85 = icmp ugt i64 %84, 56
  br i1 %85, label %86, label %_Z6vload2mPKU3AS1f.exit40.i

; <label>:86                                      ; preds = %_Z6vload2mPKU3AS1f.exit42.i
  %87 = bitcast float addrspace(1)* %32 to i8*
  %88 = getelementptr i8* %87, i64 64
  %89 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %82, i16 3, i8* %88, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit40.i

_Z6vload2mPKU3AS1f.exit40.i:                      ; preds = %86, %_Z6vload2mPKU3AS1f.exit42.i
  %ret.0.i.i39.i = phi <16 x float> [ %89, %86 ], [ %82, %_Z6vload2mPKU3AS1f.exit42.i ]
  %90 = bitcast float addrspace(1)* %33 to i8*
  %91 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %90, i32 0, i32 0) nounwind
  %92 = ptrtoint float addrspace(1)* %33 to i64
  %93 = and i64 %92, 63
  %94 = icmp ugt i64 %93, 56
  br i1 %94, label %95, label %_Z6vload2mPKU3AS1f.exit38.i

; <label>:95                                      ; preds = %_Z6vload2mPKU3AS1f.exit40.i
  %96 = bitcast float addrspace(1)* %33 to i8*
  %97 = getelementptr i8* %96, i64 64
  %98 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %91, i16 3, i8* %97, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit38.i

_Z6vload2mPKU3AS1f.exit38.i:                      ; preds = %95, %_Z6vload2mPKU3AS1f.exit40.i
  %ret.0.i.i37.i = phi <16 x float> [ %98, %95 ], [ %91, %_Z6vload2mPKU3AS1f.exit40.i ]
  %99 = bitcast float addrspace(1)* %34 to i8*
  %100 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %99, i32 0, i32 0) nounwind
  %101 = ptrtoint float addrspace(1)* %34 to i64
  %102 = and i64 %101, 63
  %103 = icmp ugt i64 %102, 56
  br i1 %103, label %104, label %_Z6vload2mPKU3AS1f.exit36.i

; <label>:104                                     ; preds = %_Z6vload2mPKU3AS1f.exit38.i
  %105 = bitcast float addrspace(1)* %34 to i8*
  %106 = getelementptr i8* %105, i64 64
  %107 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %100, i16 3, i8* %106, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit36.i

_Z6vload2mPKU3AS1f.exit36.i:                      ; preds = %104, %_Z6vload2mPKU3AS1f.exit38.i
  %ret.0.i.i35.i = phi <16 x float> [ %107, %104 ], [ %100, %_Z6vload2mPKU3AS1f.exit38.i ]
  %108 = bitcast float addrspace(1)* %35 to i8*
  %109 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %108, i32 0, i32 0) nounwind
  %110 = ptrtoint float addrspace(1)* %35 to i64
  %111 = and i64 %110, 63
  %112 = icmp ugt i64 %111, 56
  br i1 %112, label %113, label %_Z6vload2mPKU3AS1f.exit34.i

; <label>:113                                     ; preds = %_Z6vload2mPKU3AS1f.exit36.i
  %114 = bitcast float addrspace(1)* %35 to i8*
  %115 = getelementptr i8* %114, i64 64
  %116 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %109, i16 3, i8* %115, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit34.i

_Z6vload2mPKU3AS1f.exit34.i:                      ; preds = %113, %_Z6vload2mPKU3AS1f.exit36.i
  %ret.0.i.i33.i = phi <16 x float> [ %116, %113 ], [ %109, %_Z6vload2mPKU3AS1f.exit36.i ]
  %117 = bitcast float addrspace(1)* %36 to i8*
  %118 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %117, i32 0, i32 0) nounwind
  %119 = ptrtoint float addrspace(1)* %36 to i64
  %120 = and i64 %119, 63
  %121 = icmp ugt i64 %120, 56
  br i1 %121, label %122, label %_Z6vload2mPKU3AS1f.exit32.i

; <label>:122                                     ; preds = %_Z6vload2mPKU3AS1f.exit34.i
  %123 = bitcast float addrspace(1)* %36 to i8*
  %124 = getelementptr i8* %123, i64 64
  %125 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %118, i16 3, i8* %124, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit32.i

_Z6vload2mPKU3AS1f.exit32.i:                      ; preds = %122, %_Z6vload2mPKU3AS1f.exit34.i
  %ret.0.i.i31.i = phi <16 x float> [ %125, %122 ], [ %118, %_Z6vload2mPKU3AS1f.exit34.i ]
  %126 = bitcast float addrspace(1)* %37 to i8*
  %127 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %126, i32 0, i32 0) nounwind
  %128 = ptrtoint float addrspace(1)* %37 to i64
  %129 = and i64 %128, 63
  %130 = icmp ugt i64 %129, 56
  br i1 %130, label %131, label %_Z6vload2mPKU3AS1f.exit30.i

; <label>:131                                     ; preds = %_Z6vload2mPKU3AS1f.exit32.i
  %132 = bitcast float addrspace(1)* %37 to i8*
  %133 = getelementptr i8* %132, i64 64
  %134 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %127, i16 3, i8* %133, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit30.i

_Z6vload2mPKU3AS1f.exit30.i:                      ; preds = %131, %_Z6vload2mPKU3AS1f.exit32.i
  %ret.0.i.i29.i = phi <16 x float> [ %134, %131 ], [ %127, %_Z6vload2mPKU3AS1f.exit32.i ]
  %135 = bitcast float addrspace(1)* %38 to i8*
  %136 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %135, i32 0, i32 0) nounwind
  %137 = ptrtoint float addrspace(1)* %38 to i64
  %138 = and i64 %137, 63
  %139 = icmp ugt i64 %138, 56
  br i1 %139, label %140, label %_Z6vload2mPKU3AS1f.exit28.i

; <label>:140                                     ; preds = %_Z6vload2mPKU3AS1f.exit30.i
  %141 = bitcast float addrspace(1)* %38 to i8*
  %142 = getelementptr i8* %141, i64 64
  %143 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %136, i16 3, i8* %142, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit28.i

_Z6vload2mPKU3AS1f.exit28.i:                      ; preds = %140, %_Z6vload2mPKU3AS1f.exit30.i
  %ret.0.i.i27.i = phi <16 x float> [ %143, %140 ], [ %136, %_Z6vload2mPKU3AS1f.exit30.i ]
  %144 = bitcast float addrspace(1)* %39 to i8*
  %145 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %144, i32 0, i32 0) nounwind
  %146 = ptrtoint float addrspace(1)* %39 to i64
  %147 = and i64 %146, 63
  %148 = icmp ugt i64 %147, 56
  br i1 %148, label %149, label %_Z6vload2mPKU3AS1f.exit26.i

; <label>:149                                     ; preds = %_Z6vload2mPKU3AS1f.exit28.i
  %150 = bitcast float addrspace(1)* %39 to i8*
  %151 = getelementptr i8* %150, i64 64
  %152 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %145, i16 3, i8* %151, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit26.i

_Z6vload2mPKU3AS1f.exit26.i:                      ; preds = %149, %_Z6vload2mPKU3AS1f.exit28.i
  %ret.0.i.i25.i = phi <16 x float> [ %152, %149 ], [ %145, %_Z6vload2mPKU3AS1f.exit28.i ]
  %153 = bitcast float addrspace(1)* %40 to i8*
  %154 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %153, i32 0, i32 0) nounwind
  %155 = ptrtoint float addrspace(1)* %40 to i64
  %156 = and i64 %155, 63
  %157 = icmp ugt i64 %156, 56
  br i1 %157, label %158, label %_Z6vload2mPKU3AS1f.exit24.i

; <label>:158                                     ; preds = %_Z6vload2mPKU3AS1f.exit26.i
  %159 = bitcast float addrspace(1)* %40 to i8*
  %160 = getelementptr i8* %159, i64 64
  %161 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %154, i16 3, i8* %160, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit24.i

_Z6vload2mPKU3AS1f.exit24.i:                      ; preds = %158, %_Z6vload2mPKU3AS1f.exit26.i
  %ret.0.i.i23.i = phi <16 x float> [ %161, %158 ], [ %154, %_Z6vload2mPKU3AS1f.exit26.i ]
  %162 = bitcast float addrspace(1)* %41 to i8*
  %163 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %162, i32 0, i32 0) nounwind
  %164 = ptrtoint float addrspace(1)* %41 to i64
  %165 = and i64 %164, 63
  %166 = icmp ugt i64 %165, 56
  br i1 %166, label %167, label %_Z6vload2mPKU3AS1f.exit22.i

; <label>:167                                     ; preds = %_Z6vload2mPKU3AS1f.exit24.i
  %168 = bitcast float addrspace(1)* %41 to i8*
  %169 = getelementptr i8* %168, i64 64
  %170 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %163, i16 3, i8* %169, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit22.i

_Z6vload2mPKU3AS1f.exit22.i:                      ; preds = %167, %_Z6vload2mPKU3AS1f.exit24.i
  %ret.0.i.i21.i = phi <16 x float> [ %170, %167 ], [ %163, %_Z6vload2mPKU3AS1f.exit24.i ]
  %171 = bitcast float addrspace(1)* %42 to i8*
  %172 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %171, i32 0, i32 0) nounwind
  %173 = ptrtoint float addrspace(1)* %42 to i64
  %174 = and i64 %173, 63
  %175 = icmp ugt i64 %174, 56
  br i1 %175, label %176, label %_Z6vload2mPKU3AS1f.exit20.i

; <label>:176                                     ; preds = %_Z6vload2mPKU3AS1f.exit22.i
  %177 = bitcast float addrspace(1)* %42 to i8*
  %178 = getelementptr i8* %177, i64 64
  %179 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %172, i16 3, i8* %178, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit20.i

_Z6vload2mPKU3AS1f.exit20.i:                      ; preds = %176, %_Z6vload2mPKU3AS1f.exit22.i
  %ret.0.i.i19.i = phi <16 x float> [ %179, %176 ], [ %172, %_Z6vload2mPKU3AS1f.exit22.i ]
  %180 = bitcast float addrspace(1)* %43 to i8*
  %181 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 3, i8* %180, i32 0, i32 0) nounwind
  %182 = ptrtoint float addrspace(1)* %43 to i64
  %183 = and i64 %182, 63
  %184 = icmp ugt i64 %183, 56
  br i1 %184, label %185, label %_Z6vload2mPKU3AS1f.exit18.i

; <label>:185                                     ; preds = %_Z6vload2mPKU3AS1f.exit20.i
  %186 = bitcast float addrspace(1)* %43 to i8*
  %187 = getelementptr i8* %186, i64 64
  %188 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %181, i16 3, i8* %187, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit18.i

_Z6vload2mPKU3AS1f.exit18.i:                      ; preds = %185, %_Z6vload2mPKU3AS1f.exit20.i
  %ret.0.i.i17.i = phi <16 x float> [ %188, %185 ], [ %181, %_Z6vload2mPKU3AS1f.exit20.i ]
  %temp.vect20vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect21vector_func.i = shufflevector <16 x float> %temp.vect20vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect22vector_func.i = shufflevector <16 x float> %temp.vect21vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect23vector_func.i = shufflevector <16 x float> %temp.vect22vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect24vector_func.i = shufflevector <16 x float> %temp.vect23vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect25vector_func.i = shufflevector <16 x float> %temp.vect24vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect26vector_func.i = shufflevector <16 x float> %temp.vect25vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect27vector_func.i = shufflevector <16 x float> %temp.vect26vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect28vector_func.i = shufflevector <16 x float> %temp.vect27vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect29vector_func.i = shufflevector <16 x float> %temp.vect28vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect30vector_func.i = shufflevector <16 x float> %temp.vect29vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect31vector_func.i = shufflevector <16 x float> %temp.vect30vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 undef, i32 undef, i32 undef>
  %temp.vect32vector_func.i = shufflevector <16 x float> %temp.vect31vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 undef, i32 undef>
  %temp.vect33vector_func.i = shufflevector <16 x float> %temp.vect32vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 undef>
  %temp.vect34vector_func.i = shufflevector <16 x float> %temp.vect33vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>
  %temp.vect36vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect37vector_func.i = shufflevector <16 x float> %temp.vect36vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect38vector_func.i = shufflevector <16 x float> %temp.vect37vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect39vector_func.i = shufflevector <16 x float> %temp.vect38vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect40vector_func.i = shufflevector <16 x float> %temp.vect39vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect41vector_func.i = shufflevector <16 x float> %temp.vect40vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect42vector_func.i = shufflevector <16 x float> %temp.vect41vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect43vector_func.i = shufflevector <16 x float> %temp.vect42vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect44vector_func.i = shufflevector <16 x float> %temp.vect43vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect45vector_func.i = shufflevector <16 x float> %temp.vect44vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect46vector_func.i = shufflevector <16 x float> %temp.vect45vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect47vector_func.i = shufflevector <16 x float> %temp.vect46vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 17, i32 undef, i32 undef, i32 undef>
  %temp.vect48vector_func.i = shufflevector <16 x float> %temp.vect47vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 undef, i32 undef>
  %temp.vect49vector_func.i = shufflevector <16 x float> %temp.vect48vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 17, i32 undef>
  %temp.vect50vector_func.i = shufflevector <16 x float> %temp.vect49vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>
  %189 = fadd <16 x float> %temp.vect34vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract51vector_func.i = extractelement <16 x float> %189, i32 0
  %extract52vector_func.i = extractelement <16 x float> %189, i32 1
  %extract53vector_func.i = extractelement <16 x float> %189, i32 2
  %extract54vector_func.i = extractelement <16 x float> %189, i32 3
  %extract55vector_func.i = extractelement <16 x float> %189, i32 4
  %extract56vector_func.i = extractelement <16 x float> %189, i32 5
  %extract57vector_func.i = extractelement <16 x float> %189, i32 6
  %extract58vector_func.i = extractelement <16 x float> %189, i32 7
  %extract59vector_func.i = extractelement <16 x float> %189, i32 8
  %extract60vector_func.i = extractelement <16 x float> %189, i32 9
  %extract61vector_func.i = extractelement <16 x float> %189, i32 10
  %extract62vector_func.i = extractelement <16 x float> %189, i32 11
  %extract63vector_func.i = extractelement <16 x float> %189, i32 12
  %extract64vector_func.i = extractelement <16 x float> %189, i32 13
  %extract65vector_func.i = extractelement <16 x float> %189, i32 14
  %extract66vector_func.i = extractelement <16 x float> %189, i32 15
  %190 = fadd <16 x float> %temp.vect50vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract67vector_func.i = extractelement <16 x float> %190, i32 0
  %extract68vector_func.i = extractelement <16 x float> %190, i32 1
  %extract69vector_func.i = extractelement <16 x float> %190, i32 2
  %extract70vector_func.i = extractelement <16 x float> %190, i32 3
  %extract71vector_func.i = extractelement <16 x float> %190, i32 4
  %extract72vector_func.i = extractelement <16 x float> %190, i32 5
  %extract73vector_func.i = extractelement <16 x float> %190, i32 6
  %extract74vector_func.i = extractelement <16 x float> %190, i32 7
  %extract75vector_func.i = extractelement <16 x float> %190, i32 8
  %extract76vector_func.i = extractelement <16 x float> %190, i32 9
  %extract77vector_func.i = extractelement <16 x float> %190, i32 10
  %extract78vector_func.i = extractelement <16 x float> %190, i32 11
  %extract79vector_func.i = extractelement <16 x float> %190, i32 12
  %extract80vector_func.i = extractelement <16 x float> %190, i32 13
  %extract81vector_func.i = extractelement <16 x float> %190, i32 14
  %extract82vector_func.i = extractelement <16 x float> %190, i32 15
  %191 = insertelement <2 x float> undef, float %extract51vector_func.i, i32 0
  %192 = insertelement <2 x float> undef, float %extract52vector_func.i, i32 0
  %193 = insertelement <2 x float> undef, float %extract53vector_func.i, i32 0
  %194 = insertelement <2 x float> undef, float %extract54vector_func.i, i32 0
  %195 = insertelement <2 x float> undef, float %extract55vector_func.i, i32 0
  %196 = insertelement <2 x float> undef, float %extract56vector_func.i, i32 0
  %197 = insertelement <2 x float> undef, float %extract57vector_func.i, i32 0
  %198 = insertelement <2 x float> undef, float %extract58vector_func.i, i32 0
  %199 = insertelement <2 x float> undef, float %extract59vector_func.i, i32 0
  %200 = insertelement <2 x float> undef, float %extract60vector_func.i, i32 0
  %201 = insertelement <2 x float> undef, float %extract61vector_func.i, i32 0
  %202 = insertelement <2 x float> undef, float %extract62vector_func.i, i32 0
  %203 = insertelement <2 x float> undef, float %extract63vector_func.i, i32 0
  %204 = insertelement <2 x float> undef, float %extract64vector_func.i, i32 0
  %205 = insertelement <2 x float> undef, float %extract65vector_func.i, i32 0
  %206 = insertelement <2 x float> undef, float %extract66vector_func.i, i32 0
  %207 = insertelement <2 x float> %191, float %extract67vector_func.i, i32 1
  %208 = insertelement <2 x float> %192, float %extract68vector_func.i, i32 1
  %209 = insertelement <2 x float> %193, float %extract69vector_func.i, i32 1
  %210 = insertelement <2 x float> %194, float %extract70vector_func.i, i32 1
  %211 = insertelement <2 x float> %195, float %extract71vector_func.i, i32 1
  %212 = insertelement <2 x float> %196, float %extract72vector_func.i, i32 1
  %213 = insertelement <2 x float> %197, float %extract73vector_func.i, i32 1
  %214 = insertelement <2 x float> %198, float %extract74vector_func.i, i32 1
  %215 = insertelement <2 x float> %199, float %extract75vector_func.i, i32 1
  %216 = insertelement <2 x float> %200, float %extract76vector_func.i, i32 1
  %217 = insertelement <2 x float> %201, float %extract77vector_func.i, i32 1
  %218 = insertelement <2 x float> %202, float %extract78vector_func.i, i32 1
  %219 = insertelement <2 x float> %203, float %extract79vector_func.i, i32 1
  %220 = insertelement <2 x float> %204, float %extract80vector_func.i, i32 1
  %221 = insertelement <2 x float> %205, float %extract81vector_func.i, i32 1
  %222 = insertelement <2 x float> %206, float %extract82vector_func.i, i32 1
  %223 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extractvector_func.i
  %224 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract5vector_func.i
  %225 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract6vector_func.i
  %226 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract7vector_func.i
  %227 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract8vector_func.i
  %228 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract9vector_func.i
  %229 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract10vector_func.i
  %230 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract11vector_func.i
  %231 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract12vector_func.i
  %232 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract13vector_func.i
  %233 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract14vector_func.i
  %234 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract15vector_func.i
  %235 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract16vector_func.i
  %236 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract17vector_func.i
  %237 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract18vector_func.i
  %238 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract19vector_func.i
  %239 = shufflevector <2 x float> %207, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %240 = bitcast float addrspace(1)* %223 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %240, i16 3, <16 x float> %239, i32 0, i32 0) nounwind
  %241 = ptrtoint float addrspace(1)* %223 to i64
  %242 = and i64 %241, 63
  %243 = icmp ugt i64 %242, 56
  br i1 %243, label %244, label %_Z7vstore2Dv2_fmPU3AS1f.exit16.i

; <label>:244                                     ; preds = %_Z6vload2mPKU3AS1f.exit18.i
  %245 = bitcast float addrspace(1)* %223 to i8*
  %246 = getelementptr i8* %245, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %246, i16 3, <16 x float> %239, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit16.i

_Z7vstore2Dv2_fmPU3AS1f.exit16.i:                 ; preds = %244, %_Z6vload2mPKU3AS1f.exit18.i
  %247 = shufflevector <2 x float> %208, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = bitcast float addrspace(1)* %224 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %248, i16 3, <16 x float> %247, i32 0, i32 0) nounwind
  %249 = ptrtoint float addrspace(1)* %224 to i64
  %250 = and i64 %249, 63
  %251 = icmp ugt i64 %250, 56
  br i1 %251, label %252, label %_Z7vstore2Dv2_fmPU3AS1f.exit15.i

; <label>:252                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit16.i
  %253 = bitcast float addrspace(1)* %224 to i8*
  %254 = getelementptr i8* %253, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %254, i16 3, <16 x float> %247, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit15.i

_Z7vstore2Dv2_fmPU3AS1f.exit15.i:                 ; preds = %252, %_Z7vstore2Dv2_fmPU3AS1f.exit16.i
  %255 = shufflevector <2 x float> %209, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %256 = bitcast float addrspace(1)* %225 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %256, i16 3, <16 x float> %255, i32 0, i32 0) nounwind
  %257 = ptrtoint float addrspace(1)* %225 to i64
  %258 = and i64 %257, 63
  %259 = icmp ugt i64 %258, 56
  br i1 %259, label %260, label %_Z7vstore2Dv2_fmPU3AS1f.exit14.i

; <label>:260                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit15.i
  %261 = bitcast float addrspace(1)* %225 to i8*
  %262 = getelementptr i8* %261, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %262, i16 3, <16 x float> %255, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit14.i

_Z7vstore2Dv2_fmPU3AS1f.exit14.i:                 ; preds = %260, %_Z7vstore2Dv2_fmPU3AS1f.exit15.i
  %263 = shufflevector <2 x float> %210, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %264 = bitcast float addrspace(1)* %226 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %264, i16 3, <16 x float> %263, i32 0, i32 0) nounwind
  %265 = ptrtoint float addrspace(1)* %226 to i64
  %266 = and i64 %265, 63
  %267 = icmp ugt i64 %266, 56
  br i1 %267, label %268, label %_Z7vstore2Dv2_fmPU3AS1f.exit13.i

; <label>:268                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit14.i
  %269 = bitcast float addrspace(1)* %226 to i8*
  %270 = getelementptr i8* %269, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %270, i16 3, <16 x float> %263, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit13.i

_Z7vstore2Dv2_fmPU3AS1f.exit13.i:                 ; preds = %268, %_Z7vstore2Dv2_fmPU3AS1f.exit14.i
  %271 = shufflevector <2 x float> %211, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %272 = bitcast float addrspace(1)* %227 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %272, i16 3, <16 x float> %271, i32 0, i32 0) nounwind
  %273 = ptrtoint float addrspace(1)* %227 to i64
  %274 = and i64 %273, 63
  %275 = icmp ugt i64 %274, 56
  br i1 %275, label %276, label %_Z7vstore2Dv2_fmPU3AS1f.exit12.i

; <label>:276                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit13.i
  %277 = bitcast float addrspace(1)* %227 to i8*
  %278 = getelementptr i8* %277, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %278, i16 3, <16 x float> %271, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit12.i

_Z7vstore2Dv2_fmPU3AS1f.exit12.i:                 ; preds = %276, %_Z7vstore2Dv2_fmPU3AS1f.exit13.i
  %279 = shufflevector <2 x float> %212, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %280 = bitcast float addrspace(1)* %228 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %280, i16 3, <16 x float> %279, i32 0, i32 0) nounwind
  %281 = ptrtoint float addrspace(1)* %228 to i64
  %282 = and i64 %281, 63
  %283 = icmp ugt i64 %282, 56
  br i1 %283, label %284, label %_Z7vstore2Dv2_fmPU3AS1f.exit11.i

; <label>:284                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit12.i
  %285 = bitcast float addrspace(1)* %228 to i8*
  %286 = getelementptr i8* %285, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %286, i16 3, <16 x float> %279, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit11.i

_Z7vstore2Dv2_fmPU3AS1f.exit11.i:                 ; preds = %284, %_Z7vstore2Dv2_fmPU3AS1f.exit12.i
  %287 = shufflevector <2 x float> %213, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %288 = bitcast float addrspace(1)* %229 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %288, i16 3, <16 x float> %287, i32 0, i32 0) nounwind
  %289 = ptrtoint float addrspace(1)* %229 to i64
  %290 = and i64 %289, 63
  %291 = icmp ugt i64 %290, 56
  br i1 %291, label %292, label %_Z7vstore2Dv2_fmPU3AS1f.exit10.i

; <label>:292                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit11.i
  %293 = bitcast float addrspace(1)* %229 to i8*
  %294 = getelementptr i8* %293, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %294, i16 3, <16 x float> %287, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit10.i

_Z7vstore2Dv2_fmPU3AS1f.exit10.i:                 ; preds = %292, %_Z7vstore2Dv2_fmPU3AS1f.exit11.i
  %295 = shufflevector <2 x float> %214, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %296 = bitcast float addrspace(1)* %230 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %296, i16 3, <16 x float> %295, i32 0, i32 0) nounwind
  %297 = ptrtoint float addrspace(1)* %230 to i64
  %298 = and i64 %297, 63
  %299 = icmp ugt i64 %298, 56
  br i1 %299, label %300, label %_Z7vstore2Dv2_fmPU3AS1f.exit9.i

; <label>:300                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit10.i
  %301 = bitcast float addrspace(1)* %230 to i8*
  %302 = getelementptr i8* %301, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %302, i16 3, <16 x float> %295, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit9.i

_Z7vstore2Dv2_fmPU3AS1f.exit9.i:                  ; preds = %300, %_Z7vstore2Dv2_fmPU3AS1f.exit10.i
  %303 = shufflevector <2 x float> %215, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %304 = bitcast float addrspace(1)* %231 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %304, i16 3, <16 x float> %303, i32 0, i32 0) nounwind
  %305 = ptrtoint float addrspace(1)* %231 to i64
  %306 = and i64 %305, 63
  %307 = icmp ugt i64 %306, 56
  br i1 %307, label %308, label %_Z7vstore2Dv2_fmPU3AS1f.exit8.i

; <label>:308                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit9.i
  %309 = bitcast float addrspace(1)* %231 to i8*
  %310 = getelementptr i8* %309, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %310, i16 3, <16 x float> %303, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit8.i

_Z7vstore2Dv2_fmPU3AS1f.exit8.i:                  ; preds = %308, %_Z7vstore2Dv2_fmPU3AS1f.exit9.i
  %311 = shufflevector <2 x float> %216, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %312 = bitcast float addrspace(1)* %232 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %312, i16 3, <16 x float> %311, i32 0, i32 0) nounwind
  %313 = ptrtoint float addrspace(1)* %232 to i64
  %314 = and i64 %313, 63
  %315 = icmp ugt i64 %314, 56
  br i1 %315, label %316, label %_Z7vstore2Dv2_fmPU3AS1f.exit7.i

; <label>:316                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit8.i
  %317 = bitcast float addrspace(1)* %232 to i8*
  %318 = getelementptr i8* %317, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %318, i16 3, <16 x float> %311, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit7.i

_Z7vstore2Dv2_fmPU3AS1f.exit7.i:                  ; preds = %316, %_Z7vstore2Dv2_fmPU3AS1f.exit8.i
  %319 = shufflevector <2 x float> %217, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %320 = bitcast float addrspace(1)* %233 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %320, i16 3, <16 x float> %319, i32 0, i32 0) nounwind
  %321 = ptrtoint float addrspace(1)* %233 to i64
  %322 = and i64 %321, 63
  %323 = icmp ugt i64 %322, 56
  br i1 %323, label %324, label %_Z7vstore2Dv2_fmPU3AS1f.exit6.i

; <label>:324                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit7.i
  %325 = bitcast float addrspace(1)* %233 to i8*
  %326 = getelementptr i8* %325, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %326, i16 3, <16 x float> %319, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit6.i

_Z7vstore2Dv2_fmPU3AS1f.exit6.i:                  ; preds = %324, %_Z7vstore2Dv2_fmPU3AS1f.exit7.i
  %327 = shufflevector <2 x float> %218, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %328 = bitcast float addrspace(1)* %234 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %328, i16 3, <16 x float> %327, i32 0, i32 0) nounwind
  %329 = ptrtoint float addrspace(1)* %234 to i64
  %330 = and i64 %329, 63
  %331 = icmp ugt i64 %330, 56
  br i1 %331, label %332, label %_Z7vstore2Dv2_fmPU3AS1f.exit5.i

; <label>:332                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit6.i
  %333 = bitcast float addrspace(1)* %234 to i8*
  %334 = getelementptr i8* %333, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %334, i16 3, <16 x float> %327, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit5.i

_Z7vstore2Dv2_fmPU3AS1f.exit5.i:                  ; preds = %332, %_Z7vstore2Dv2_fmPU3AS1f.exit6.i
  %335 = shufflevector <2 x float> %219, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %336 = bitcast float addrspace(1)* %235 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %336, i16 3, <16 x float> %335, i32 0, i32 0) nounwind
  %337 = ptrtoint float addrspace(1)* %235 to i64
  %338 = and i64 %337, 63
  %339 = icmp ugt i64 %338, 56
  br i1 %339, label %340, label %_Z7vstore2Dv2_fmPU3AS1f.exit4.i

; <label>:340                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit5.i
  %341 = bitcast float addrspace(1)* %235 to i8*
  %342 = getelementptr i8* %341, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %342, i16 3, <16 x float> %335, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit4.i

_Z7vstore2Dv2_fmPU3AS1f.exit4.i:                  ; preds = %340, %_Z7vstore2Dv2_fmPU3AS1f.exit5.i
  %343 = shufflevector <2 x float> %220, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %344 = bitcast float addrspace(1)* %236 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %344, i16 3, <16 x float> %343, i32 0, i32 0) nounwind
  %345 = ptrtoint float addrspace(1)* %236 to i64
  %346 = and i64 %345, 63
  %347 = icmp ugt i64 %346, 56
  br i1 %347, label %348, label %_Z7vstore2Dv2_fmPU3AS1f.exit3.i

; <label>:348                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit4.i
  %349 = bitcast float addrspace(1)* %236 to i8*
  %350 = getelementptr i8* %349, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %350, i16 3, <16 x float> %343, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit3.i

_Z7vstore2Dv2_fmPU3AS1f.exit3.i:                  ; preds = %348, %_Z7vstore2Dv2_fmPU3AS1f.exit4.i
  %351 = shufflevector <2 x float> %221, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %352 = bitcast float addrspace(1)* %237 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %352, i16 3, <16 x float> %351, i32 0, i32 0) nounwind
  %353 = ptrtoint float addrspace(1)* %237 to i64
  %354 = and i64 %353, 63
  %355 = icmp ugt i64 %354, 56
  br i1 %355, label %356, label %_Z7vstore2Dv2_fmPU3AS1f.exit2.i

; <label>:356                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit3.i
  %357 = bitcast float addrspace(1)* %237 to i8*
  %358 = getelementptr i8* %357, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %358, i16 3, <16 x float> %351, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit2.i

_Z7vstore2Dv2_fmPU3AS1f.exit2.i:                  ; preds = %356, %_Z7vstore2Dv2_fmPU3AS1f.exit3.i
  %359 = shufflevector <2 x float> %222, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %360 = bitcast float addrspace(1)* %238 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %360, i16 3, <16 x float> %359, i32 0, i32 0) nounwind
  %361 = ptrtoint float addrspace(1)* %238 to i64
  %362 = and i64 %361, 63
  %363 = icmp ugt i64 %362, 56
  br i1 %363, label %364, label %_Z7vstore2Dv2_fmPU3AS1f.exit1.i

; <label>:364                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit2.i
  %365 = bitcast float addrspace(1)* %238 to i8*
  %366 = getelementptr i8* %365, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %366, i16 3, <16 x float> %359, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit1.i

_Z7vstore2Dv2_fmPU3AS1f.exit1.i:                  ; preds = %364, %_Z7vstore2Dv2_fmPU3AS1f.exit2.i
  %Strided.add.i = add <16 x i64> %27, %vector.i
  %lsr.iv.next6 = add i64 %lsr.iv5, -1
  %dim_0_vector_cmp.to.max.i = icmp eq i64 %lsr.iv.next6, 0
  br i1 %dim_0_vector_cmp.to.max.i, label %dim_0_vector_exit.i, label %26

dim_0_vector_exit.i:                              ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit1.i
  %dim_1_vector_inc_ind_var.i = add nuw nsw i64 %dim_1_vector_ind_var.i, 1
  %dim_1_vector_inc_tid.i = add nuw nsw i64 %dim_1_vector_tid.i, 1
  %dim_1_vector_cmp.to.max.i = icmp eq i64 %dim_1_vector_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_vector_cmp.to.max.i, label %scalarIf.i, label %dim_0_vector_pre_head.i

scalarIf.i:                                       ; preds = %dim_0_vector_exit.i, %wrapper_entry
  %367 = icmp eq i64 %LocalSize_0, %num.vector.wi.i
  br i1 %367, label %__read_2_separated_args.exit, label %dim_0_pre_head.i.preheader

dim_0_pre_head.i.preheader:                       ; preds = %scalarIf.i
  %368 = sub i64 %LocalSize_0, %num.vector.wi.i
  %369 = mul i64 %LocalSize_1, %GroupID_1
  %370 = add i64 %GlobalOffset_1, %369
  %371 = trunc i64 %370 to i32
  %372 = mul i32 %explicit_2, %371
  %373 = add i64 %GlobalOffset_0, %num.vector.wi.i
  %374 = mul i64 %LocalSize_0, %GroupID_0
  %375 = add i64 %373, %374
  %376 = mul i64 %375, 2
  %377 = trunc i64 %376 to i32
  %378 = add i32 %372, %377
  br label %dim_0_pre_head.i

dim_0_pre_head.i:                                 ; preds = %dim_0_pre_head.i.preheader, %dim_0_exit.i
  %lsr.iv1 = phi i32 [ %378, %dim_0_pre_head.i.preheader ], [ %lsr.iv.next2, %dim_0_exit.i ]
  %dim_1_ind_var.i = phi i64 [ %dim_1_inc_ind_var.i, %dim_0_exit.i ], [ 0, %dim_0_pre_head.i.preheader ]
  br label %scalar_kernel_entry.i

scalar_kernel_entry.i:                            ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit.i, %dim_0_pre_head.i
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %_Z7vstore2Dv2_fmPU3AS1f.exit.i ], [ %lsr.iv1, %dim_0_pre_head.i ]
  %lsr.iv = phi i64 [ %lsr.iv.next, %_Z7vstore2Dv2_fmPU3AS1f.exit.i ], [ %368, %dim_0_pre_head.i ]
  %379 = sext i32 %lsr.iv3 to i64
  %380 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %379
  %381 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %382 = bitcast float addrspace(1)* %380 to i8*
  %383 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %381, i16 3, i8* %382, i32 0, i32 0) nounwind
  %384 = ptrtoint float addrspace(1)* %380 to i64
  %385 = and i64 %384, 63
  %386 = icmp ugt i64 %385, 56
  br i1 %386, label %387, label %_Z6vload2mPKU3AS1f.exit.i

; <label>:387                                     ; preds = %scalar_kernel_entry.i
  %388 = bitcast float addrspace(1)* %380 to i8*
  %389 = getelementptr i8* %388, i64 64
  %390 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %383, i16 3, i8* %389, i32 0, i32 0) nounwind
  br label %_Z6vload2mPKU3AS1f.exit.i

_Z6vload2mPKU3AS1f.exit.i:                        ; preds = %387, %scalar_kernel_entry.i
  %ret.0.i.i.i = phi <16 x float> [ %390, %387 ], [ %383, %scalar_kernel_entry.i ]
  %391 = shufflevector <16 x float> %ret.0.i.i.i, <16 x float> undef, <2 x i32> <i32 0, i32 1>
  %392 = fadd <2 x float> %391, <float 3.000000e+00, float 3.000000e+00>
  %393 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %379
  %394 = shufflevector <2 x float> %392, <2 x float> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %395 = bitcast float addrspace(1)* %393 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %395, i16 3, <16 x float> %394, i32 0, i32 0) nounwind
  %396 = ptrtoint float addrspace(1)* %393 to i64
  %397 = and i64 %396, 63
  %398 = icmp ugt i64 %397, 56
  br i1 %398, label %399, label %_Z7vstore2Dv2_fmPU3AS1f.exit.i

; <label>:399                                     ; preds = %_Z6vload2mPKU3AS1f.exit.i
  %400 = bitcast float addrspace(1)* %393 to i8*
  %401 = getelementptr i8* %400, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %401, i16 3, <16 x float> %394, i32 0, i32 0) nounwind
  br label %_Z7vstore2Dv2_fmPU3AS1f.exit.i

_Z7vstore2Dv2_fmPU3AS1f.exit.i:                   ; preds = %399, %_Z6vload2mPKU3AS1f.exit.i
  %402 = trunc i64 %379 to i32
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next4 = add i32 %402, 2
  %dim_0_cmp.to.max.i = icmp eq i64 %lsr.iv.next, 0
  br i1 %dim_0_cmp.to.max.i, label %dim_0_exit.i, label %scalar_kernel_entry.i

dim_0_exit.i:                                     ; preds = %_Z7vstore2Dv2_fmPU3AS1f.exit.i
  %dim_1_inc_ind_var.i = add nuw nsw i64 %dim_1_ind_var.i, 1
  %lsr.iv.next2 = add i32 %lsr.iv1, %explicit_2
  %dim_1_cmp.to.max.i = icmp eq i64 %dim_1_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_cmp.to.max.i, label %__read_2_separated_args.exit, label %dim_0_pre_head.i

__read_2_separated_args.exit:                     ; preds = %dim_0_exit.i, %scalarIf.i
  ret void
}

define void @read_4(i8* %pUniformArgs, i64* %pWGId, {}* %RuntimeContext) {
wrapper_entry:
  %0 = bitcast i8* %pUniformArgs to float addrspace(1)**
  %explicit_0 = load float addrspace(1)** %0, align 8
  %1 = getelementptr i8* %pUniformArgs, i64 8
  %2 = bitcast i8* %1 to float addrspace(1)**
  %explicit_1 = load float addrspace(1)** %2, align 8
  %3 = getelementptr i8* %pUniformArgs, i64 16
  %4 = bitcast i8* %3 to i32*
  %explicit_2 = load i32* %4, align 4
  %5 = getelementptr i8* %pUniformArgs, i64 80
  %6 = bitcast i8* %5 to i64*
  %LocalSize_0 = load i64* %6, align 8
  %7 = getelementptr i8* %pUniformArgs, i64 88
  %8 = bitcast i8* %7 to i64*
  %LocalSize_1 = load i64* %8, align 8
  %9 = getelementptr i8* %pUniformArgs, i64 32
  %10 = bitcast i8* %9 to i64*
  %GlobalOffset_0 = load i64* %10, align 8
  %11 = getelementptr i8* %pUniformArgs, i64 40
  %12 = bitcast i8* %11 to i64*
  %GlobalOffset_1 = load i64* %12, align 8
  %GroupID_0 = load i64* %pWGId, align 8
  %13 = getelementptr i64* %pWGId, i64 1
  %GroupID_1 = load i64* %13, align 8
  %14 = mul i64 %LocalSize_0, %GroupID_0
  %15 = add i64 %14, %GlobalOffset_0
  %16 = mul i64 %LocalSize_1, %GroupID_1
  %17 = add i64 %16, %GlobalOffset_1
  %vector.size.i = ashr i64 %LocalSize_0, 4
  %num.vector.wi.i = and i64 %LocalSize_0, -16
  %18 = icmp eq i64 %vector.size.i, 0
  br i1 %18, label %scalarIf.i, label %dim_1_vector_pre_head.i

dim_1_vector_pre_head.i:                          ; preds = %wrapper_entry
  %tempvector_func.i = insertelement <16 x i64> undef, i64 %15, i32 0
  %vectorvector_func.i = shufflevector <16 x i64> %tempvector_func.i, <16 x i64> undef, <16 x i32> zeroinitializer
  %19 = add <16 x i64> %vectorvector_func.i, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %20 = shl <16 x i64> %19, <i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2, i64 2>
  %21 = trunc <16 x i64> %20 to <16 x i32>
  br label %dim_0_vector_pre_head.i

dim_0_vector_pre_head.i:                          ; preds = %dim_0_vector_exit.i, %dim_1_vector_pre_head.i
  %dim_1_vector_ind_var.i = phi i64 [ 0, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_ind_var.i, %dim_0_vector_exit.i ]
  %dim_1_vector_tid.i = phi i64 [ %17, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_tid.i, %dim_0_vector_exit.i ]
  %22 = trunc i64 %dim_1_vector_tid.i to i32
  %23 = mul nsw i32 %22, %explicit_2
  %temp8vector_func.i = insertelement <16 x i32> undef, i32 %23, i32 0
  %vector7vector_func.i = shufflevector <16 x i32> %temp8vector_func.i, <16 x i32> undef, <16 x i32> zeroinitializer
  %24 = add nsw <16 x i32> %vector7vector_func.i, %21
  %25 = sext <16 x i32> %24 to <16 x i64>
  %extract.0.i = extractelement <16 x i64> %25, i32 0
  %extract.01.i = extractelement <16 x i64> %25, i32 1
  %sub.delta.i = sub i64 %extract.01.i, %extract.0.i
  %mul.delta.i = shl i64 %sub.delta.i, 4
  %temp.i = insertelement <16 x i64> undef, i64 %mul.delta.i, i32 0
  %vector.i = shufflevector <16 x i64> %temp.i, <16 x i64> undef, <16 x i32> zeroinitializer
  br label %26

; <label>:26                                      ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit1.i, %dim_0_vector_pre_head.i
  %lsr.iv5 = phi i64 [ %lsr.iv.next6, %_Z7vstore4Dv4_fmPU3AS1f.exit1.i ], [ %vector.size.i, %dim_0_vector_pre_head.i ]
  %27 = phi <16 x i64> [ %25, %dim_0_vector_pre_head.i ], [ %Strided.add.i, %_Z7vstore4Dv4_fmPU3AS1f.exit1.i ]
  %extractvector_func.i = extractelement <16 x i64> %27, i32 0
  %extract9vector_func.i = extractelement <16 x i64> %27, i32 1
  %extract10vector_func.i = extractelement <16 x i64> %27, i32 2
  %extract11vector_func.i = extractelement <16 x i64> %27, i32 3
  %extract12vector_func.i = extractelement <16 x i64> %27, i32 4
  %extract13vector_func.i = extractelement <16 x i64> %27, i32 5
  %extract14vector_func.i = extractelement <16 x i64> %27, i32 6
  %extract15vector_func.i = extractelement <16 x i64> %27, i32 7
  %extract16vector_func.i = extractelement <16 x i64> %27, i32 8
  %extract17vector_func.i = extractelement <16 x i64> %27, i32 9
  %extract18vector_func.i = extractelement <16 x i64> %27, i32 10
  %extract19vector_func.i = extractelement <16 x i64> %27, i32 11
  %extract20vector_func.i = extractelement <16 x i64> %27, i32 12
  %extract21vector_func.i = extractelement <16 x i64> %27, i32 13
  %extract22vector_func.i = extractelement <16 x i64> %27, i32 14
  %extract23vector_func.i = extractelement <16 x i64> %27, i32 15
  %28 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extractvector_func.i
  %29 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract9vector_func.i
  %30 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract10vector_func.i
  %31 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract11vector_func.i
  %32 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract12vector_func.i
  %33 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract13vector_func.i
  %34 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract14vector_func.i
  %35 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract15vector_func.i
  %36 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract16vector_func.i
  %37 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract17vector_func.i
  %38 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract18vector_func.i
  %39 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract19vector_func.i
  %40 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract20vector_func.i
  %41 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract21vector_func.i
  %42 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract22vector_func.i
  %43 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract23vector_func.i
  %44 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %45 = bitcast float addrspace(1)* %28 to i8*
  %46 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %45, i32 0, i32 0) nounwind
  %47 = ptrtoint float addrspace(1)* %28 to i64
  %48 = and i64 %47, 63
  %49 = icmp ugt i64 %48, 48
  br i1 %49, label %50, label %_Z6vload4mPKU3AS1f.exit48.i

; <label>:50                                      ; preds = %26
  %51 = bitcast float addrspace(1)* %28 to i8*
  %52 = getelementptr i8* %51, i64 64
  %53 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %46, i16 15, i8* %52, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit48.i

_Z6vload4mPKU3AS1f.exit48.i:                      ; preds = %50, %26
  %ret.0.i.i47.i = phi <16 x float> [ %53, %50 ], [ %46, %26 ]
  %54 = bitcast float addrspace(1)* %29 to i8*
  %55 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %54, i32 0, i32 0) nounwind
  %56 = ptrtoint float addrspace(1)* %29 to i64
  %57 = and i64 %56, 63
  %58 = icmp ugt i64 %57, 48
  br i1 %58, label %59, label %_Z6vload4mPKU3AS1f.exit46.i

; <label>:59                                      ; preds = %_Z6vload4mPKU3AS1f.exit48.i
  %60 = bitcast float addrspace(1)* %29 to i8*
  %61 = getelementptr i8* %60, i64 64
  %62 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %55, i16 15, i8* %61, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit46.i

_Z6vload4mPKU3AS1f.exit46.i:                      ; preds = %59, %_Z6vload4mPKU3AS1f.exit48.i
  %ret.0.i.i45.i = phi <16 x float> [ %62, %59 ], [ %55, %_Z6vload4mPKU3AS1f.exit48.i ]
  %63 = bitcast float addrspace(1)* %30 to i8*
  %64 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %63, i32 0, i32 0) nounwind
  %65 = ptrtoint float addrspace(1)* %30 to i64
  %66 = and i64 %65, 63
  %67 = icmp ugt i64 %66, 48
  br i1 %67, label %68, label %_Z6vload4mPKU3AS1f.exit44.i

; <label>:68                                      ; preds = %_Z6vload4mPKU3AS1f.exit46.i
  %69 = bitcast float addrspace(1)* %30 to i8*
  %70 = getelementptr i8* %69, i64 64
  %71 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %64, i16 15, i8* %70, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit44.i

_Z6vload4mPKU3AS1f.exit44.i:                      ; preds = %68, %_Z6vload4mPKU3AS1f.exit46.i
  %ret.0.i.i43.i = phi <16 x float> [ %71, %68 ], [ %64, %_Z6vload4mPKU3AS1f.exit46.i ]
  %72 = bitcast float addrspace(1)* %31 to i8*
  %73 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %72, i32 0, i32 0) nounwind
  %74 = ptrtoint float addrspace(1)* %31 to i64
  %75 = and i64 %74, 63
  %76 = icmp ugt i64 %75, 48
  br i1 %76, label %77, label %_Z6vload4mPKU3AS1f.exit42.i

; <label>:77                                      ; preds = %_Z6vload4mPKU3AS1f.exit44.i
  %78 = bitcast float addrspace(1)* %31 to i8*
  %79 = getelementptr i8* %78, i64 64
  %80 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %73, i16 15, i8* %79, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit42.i

_Z6vload4mPKU3AS1f.exit42.i:                      ; preds = %77, %_Z6vload4mPKU3AS1f.exit44.i
  %ret.0.i.i41.i = phi <16 x float> [ %80, %77 ], [ %73, %_Z6vload4mPKU3AS1f.exit44.i ]
  %81 = bitcast float addrspace(1)* %32 to i8*
  %82 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %81, i32 0, i32 0) nounwind
  %83 = ptrtoint float addrspace(1)* %32 to i64
  %84 = and i64 %83, 63
  %85 = icmp ugt i64 %84, 48
  br i1 %85, label %86, label %_Z6vload4mPKU3AS1f.exit40.i

; <label>:86                                      ; preds = %_Z6vload4mPKU3AS1f.exit42.i
  %87 = bitcast float addrspace(1)* %32 to i8*
  %88 = getelementptr i8* %87, i64 64
  %89 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %82, i16 15, i8* %88, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit40.i

_Z6vload4mPKU3AS1f.exit40.i:                      ; preds = %86, %_Z6vload4mPKU3AS1f.exit42.i
  %ret.0.i.i39.i = phi <16 x float> [ %89, %86 ], [ %82, %_Z6vload4mPKU3AS1f.exit42.i ]
  %90 = bitcast float addrspace(1)* %33 to i8*
  %91 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %90, i32 0, i32 0) nounwind
  %92 = ptrtoint float addrspace(1)* %33 to i64
  %93 = and i64 %92, 63
  %94 = icmp ugt i64 %93, 48
  br i1 %94, label %95, label %_Z6vload4mPKU3AS1f.exit38.i

; <label>:95                                      ; preds = %_Z6vload4mPKU3AS1f.exit40.i
  %96 = bitcast float addrspace(1)* %33 to i8*
  %97 = getelementptr i8* %96, i64 64
  %98 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %91, i16 15, i8* %97, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit38.i

_Z6vload4mPKU3AS1f.exit38.i:                      ; preds = %95, %_Z6vload4mPKU3AS1f.exit40.i
  %ret.0.i.i37.i = phi <16 x float> [ %98, %95 ], [ %91, %_Z6vload4mPKU3AS1f.exit40.i ]
  %99 = bitcast float addrspace(1)* %34 to i8*
  %100 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %99, i32 0, i32 0) nounwind
  %101 = ptrtoint float addrspace(1)* %34 to i64
  %102 = and i64 %101, 63
  %103 = icmp ugt i64 %102, 48
  br i1 %103, label %104, label %_Z6vload4mPKU3AS1f.exit36.i

; <label>:104                                     ; preds = %_Z6vload4mPKU3AS1f.exit38.i
  %105 = bitcast float addrspace(1)* %34 to i8*
  %106 = getelementptr i8* %105, i64 64
  %107 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %100, i16 15, i8* %106, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit36.i

_Z6vload4mPKU3AS1f.exit36.i:                      ; preds = %104, %_Z6vload4mPKU3AS1f.exit38.i
  %ret.0.i.i35.i = phi <16 x float> [ %107, %104 ], [ %100, %_Z6vload4mPKU3AS1f.exit38.i ]
  %108 = bitcast float addrspace(1)* %35 to i8*
  %109 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %108, i32 0, i32 0) nounwind
  %110 = ptrtoint float addrspace(1)* %35 to i64
  %111 = and i64 %110, 63
  %112 = icmp ugt i64 %111, 48
  br i1 %112, label %113, label %_Z6vload4mPKU3AS1f.exit34.i

; <label>:113                                     ; preds = %_Z6vload4mPKU3AS1f.exit36.i
  %114 = bitcast float addrspace(1)* %35 to i8*
  %115 = getelementptr i8* %114, i64 64
  %116 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %109, i16 15, i8* %115, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit34.i

_Z6vload4mPKU3AS1f.exit34.i:                      ; preds = %113, %_Z6vload4mPKU3AS1f.exit36.i
  %ret.0.i.i33.i = phi <16 x float> [ %116, %113 ], [ %109, %_Z6vload4mPKU3AS1f.exit36.i ]
  %117 = bitcast float addrspace(1)* %36 to i8*
  %118 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %117, i32 0, i32 0) nounwind
  %119 = ptrtoint float addrspace(1)* %36 to i64
  %120 = and i64 %119, 63
  %121 = icmp ugt i64 %120, 48
  br i1 %121, label %122, label %_Z6vload4mPKU3AS1f.exit32.i

; <label>:122                                     ; preds = %_Z6vload4mPKU3AS1f.exit34.i
  %123 = bitcast float addrspace(1)* %36 to i8*
  %124 = getelementptr i8* %123, i64 64
  %125 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %118, i16 15, i8* %124, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit32.i

_Z6vload4mPKU3AS1f.exit32.i:                      ; preds = %122, %_Z6vload4mPKU3AS1f.exit34.i
  %ret.0.i.i31.i = phi <16 x float> [ %125, %122 ], [ %118, %_Z6vload4mPKU3AS1f.exit34.i ]
  %126 = bitcast float addrspace(1)* %37 to i8*
  %127 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %126, i32 0, i32 0) nounwind
  %128 = ptrtoint float addrspace(1)* %37 to i64
  %129 = and i64 %128, 63
  %130 = icmp ugt i64 %129, 48
  br i1 %130, label %131, label %_Z6vload4mPKU3AS1f.exit30.i

; <label>:131                                     ; preds = %_Z6vload4mPKU3AS1f.exit32.i
  %132 = bitcast float addrspace(1)* %37 to i8*
  %133 = getelementptr i8* %132, i64 64
  %134 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %127, i16 15, i8* %133, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit30.i

_Z6vload4mPKU3AS1f.exit30.i:                      ; preds = %131, %_Z6vload4mPKU3AS1f.exit32.i
  %ret.0.i.i29.i = phi <16 x float> [ %134, %131 ], [ %127, %_Z6vload4mPKU3AS1f.exit32.i ]
  %135 = bitcast float addrspace(1)* %38 to i8*
  %136 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %135, i32 0, i32 0) nounwind
  %137 = ptrtoint float addrspace(1)* %38 to i64
  %138 = and i64 %137, 63
  %139 = icmp ugt i64 %138, 48
  br i1 %139, label %140, label %_Z6vload4mPKU3AS1f.exit28.i

; <label>:140                                     ; preds = %_Z6vload4mPKU3AS1f.exit30.i
  %141 = bitcast float addrspace(1)* %38 to i8*
  %142 = getelementptr i8* %141, i64 64
  %143 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %136, i16 15, i8* %142, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit28.i

_Z6vload4mPKU3AS1f.exit28.i:                      ; preds = %140, %_Z6vload4mPKU3AS1f.exit30.i
  %ret.0.i.i27.i = phi <16 x float> [ %143, %140 ], [ %136, %_Z6vload4mPKU3AS1f.exit30.i ]
  %144 = bitcast float addrspace(1)* %39 to i8*
  %145 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %144, i32 0, i32 0) nounwind
  %146 = ptrtoint float addrspace(1)* %39 to i64
  %147 = and i64 %146, 63
  %148 = icmp ugt i64 %147, 48
  br i1 %148, label %149, label %_Z6vload4mPKU3AS1f.exit26.i

; <label>:149                                     ; preds = %_Z6vload4mPKU3AS1f.exit28.i
  %150 = bitcast float addrspace(1)* %39 to i8*
  %151 = getelementptr i8* %150, i64 64
  %152 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %145, i16 15, i8* %151, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit26.i

_Z6vload4mPKU3AS1f.exit26.i:                      ; preds = %149, %_Z6vload4mPKU3AS1f.exit28.i
  %ret.0.i.i25.i = phi <16 x float> [ %152, %149 ], [ %145, %_Z6vload4mPKU3AS1f.exit28.i ]
  %153 = bitcast float addrspace(1)* %40 to i8*
  %154 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %153, i32 0, i32 0) nounwind
  %155 = ptrtoint float addrspace(1)* %40 to i64
  %156 = and i64 %155, 63
  %157 = icmp ugt i64 %156, 48
  br i1 %157, label %158, label %_Z6vload4mPKU3AS1f.exit24.i

; <label>:158                                     ; preds = %_Z6vload4mPKU3AS1f.exit26.i
  %159 = bitcast float addrspace(1)* %40 to i8*
  %160 = getelementptr i8* %159, i64 64
  %161 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %154, i16 15, i8* %160, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit24.i

_Z6vload4mPKU3AS1f.exit24.i:                      ; preds = %158, %_Z6vload4mPKU3AS1f.exit26.i
  %ret.0.i.i23.i = phi <16 x float> [ %161, %158 ], [ %154, %_Z6vload4mPKU3AS1f.exit26.i ]
  %162 = bitcast float addrspace(1)* %41 to i8*
  %163 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %162, i32 0, i32 0) nounwind
  %164 = ptrtoint float addrspace(1)* %41 to i64
  %165 = and i64 %164, 63
  %166 = icmp ugt i64 %165, 48
  br i1 %166, label %167, label %_Z6vload4mPKU3AS1f.exit22.i

; <label>:167                                     ; preds = %_Z6vload4mPKU3AS1f.exit24.i
  %168 = bitcast float addrspace(1)* %41 to i8*
  %169 = getelementptr i8* %168, i64 64
  %170 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %163, i16 15, i8* %169, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit22.i

_Z6vload4mPKU3AS1f.exit22.i:                      ; preds = %167, %_Z6vload4mPKU3AS1f.exit24.i
  %ret.0.i.i21.i = phi <16 x float> [ %170, %167 ], [ %163, %_Z6vload4mPKU3AS1f.exit24.i ]
  %171 = bitcast float addrspace(1)* %42 to i8*
  %172 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %171, i32 0, i32 0) nounwind
  %173 = ptrtoint float addrspace(1)* %42 to i64
  %174 = and i64 %173, 63
  %175 = icmp ugt i64 %174, 48
  br i1 %175, label %176, label %_Z6vload4mPKU3AS1f.exit20.i

; <label>:176                                     ; preds = %_Z6vload4mPKU3AS1f.exit22.i
  %177 = bitcast float addrspace(1)* %42 to i8*
  %178 = getelementptr i8* %177, i64 64
  %179 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %172, i16 15, i8* %178, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit20.i

_Z6vload4mPKU3AS1f.exit20.i:                      ; preds = %176, %_Z6vload4mPKU3AS1f.exit22.i
  %ret.0.i.i19.i = phi <16 x float> [ %179, %176 ], [ %172, %_Z6vload4mPKU3AS1f.exit22.i ]
  %180 = bitcast float addrspace(1)* %43 to i8*
  %181 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 15, i8* %180, i32 0, i32 0) nounwind
  %182 = ptrtoint float addrspace(1)* %43 to i64
  %183 = and i64 %182, 63
  %184 = icmp ugt i64 %183, 48
  br i1 %184, label %185, label %_Z6vload4mPKU3AS1f.exit18.i

; <label>:185                                     ; preds = %_Z6vload4mPKU3AS1f.exit20.i
  %186 = bitcast float addrspace(1)* %43 to i8*
  %187 = getelementptr i8* %186, i64 64
  %188 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %181, i16 15, i8* %187, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit18.i

_Z6vload4mPKU3AS1f.exit18.i:                      ; preds = %185, %_Z6vload4mPKU3AS1f.exit20.i
  %ret.0.i.i17.i = phi <16 x float> [ %188, %185 ], [ %181, %_Z6vload4mPKU3AS1f.exit20.i ]
  %temp.vect24vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect25vector_func.i = shufflevector <16 x float> %temp.vect24vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect26vector_func.i = shufflevector <16 x float> %temp.vect25vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect27vector_func.i = shufflevector <16 x float> %temp.vect26vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect28vector_func.i = shufflevector <16 x float> %temp.vect27vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect29vector_func.i = shufflevector <16 x float> %temp.vect28vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect30vector_func.i = shufflevector <16 x float> %temp.vect29vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect31vector_func.i = shufflevector <16 x float> %temp.vect30vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect32vector_func.i = shufflevector <16 x float> %temp.vect31vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect33vector_func.i = shufflevector <16 x float> %temp.vect32vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect34vector_func.i = shufflevector <16 x float> %temp.vect33vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect35vector_func.i = shufflevector <16 x float> %temp.vect34vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 undef, i32 undef, i32 undef>
  %temp.vect36vector_func.i = shufflevector <16 x float> %temp.vect35vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 undef, i32 undef>
  %temp.vect37vector_func.i = shufflevector <16 x float> %temp.vect36vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 undef>
  %temp.vect38vector_func.i = shufflevector <16 x float> %temp.vect37vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>
  %temp.vect40vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect41vector_func.i = shufflevector <16 x float> %temp.vect40vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect42vector_func.i = shufflevector <16 x float> %temp.vect41vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect43vector_func.i = shufflevector <16 x float> %temp.vect42vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect44vector_func.i = shufflevector <16 x float> %temp.vect43vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect45vector_func.i = shufflevector <16 x float> %temp.vect44vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect46vector_func.i = shufflevector <16 x float> %temp.vect45vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect47vector_func.i = shufflevector <16 x float> %temp.vect46vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect48vector_func.i = shufflevector <16 x float> %temp.vect47vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect49vector_func.i = shufflevector <16 x float> %temp.vect48vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect50vector_func.i = shufflevector <16 x float> %temp.vect49vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect51vector_func.i = shufflevector <16 x float> %temp.vect50vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 17, i32 undef, i32 undef, i32 undef>
  %temp.vect52vector_func.i = shufflevector <16 x float> %temp.vect51vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 undef, i32 undef>
  %temp.vect53vector_func.i = shufflevector <16 x float> %temp.vect52vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 17, i32 undef>
  %temp.vect54vector_func.i = shufflevector <16 x float> %temp.vect53vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>
  %temp.vect56vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect57vector_func.i = shufflevector <16 x float> %temp.vect56vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect58vector_func.i = shufflevector <16 x float> %temp.vect57vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect59vector_func.i = shufflevector <16 x float> %temp.vect58vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect60vector_func.i = shufflevector <16 x float> %temp.vect59vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect61vector_func.i = shufflevector <16 x float> %temp.vect60vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect62vector_func.i = shufflevector <16 x float> %temp.vect61vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect63vector_func.i = shufflevector <16 x float> %temp.vect62vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect64vector_func.i = shufflevector <16 x float> %temp.vect63vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect65vector_func.i = shufflevector <16 x float> %temp.vect64vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect66vector_func.i = shufflevector <16 x float> %temp.vect65vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 18, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect67vector_func.i = shufflevector <16 x float> %temp.vect66vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 18, i32 undef, i32 undef, i32 undef>
  %temp.vect68vector_func.i = shufflevector <16 x float> %temp.vect67vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 18, i32 undef, i32 undef>
  %temp.vect69vector_func.i = shufflevector <16 x float> %temp.vect68vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 18, i32 undef>
  %temp.vect70vector_func.i = shufflevector <16 x float> %temp.vect69vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 18>
  %temp.vect72vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect73vector_func.i = shufflevector <16 x float> %temp.vect72vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect74vector_func.i = shufflevector <16 x float> %temp.vect73vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect75vector_func.i = shufflevector <16 x float> %temp.vect74vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect76vector_func.i = shufflevector <16 x float> %temp.vect75vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect77vector_func.i = shufflevector <16 x float> %temp.vect76vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect78vector_func.i = shufflevector <16 x float> %temp.vect77vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect79vector_func.i = shufflevector <16 x float> %temp.vect78vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect80vector_func.i = shufflevector <16 x float> %temp.vect79vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect81vector_func.i = shufflevector <16 x float> %temp.vect80vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect82vector_func.i = shufflevector <16 x float> %temp.vect81vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect83vector_func.i = shufflevector <16 x float> %temp.vect82vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 undef, i32 undef, i32 undef>
  %temp.vect84vector_func.i = shufflevector <16 x float> %temp.vect83vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 19, i32 undef, i32 undef>
  %temp.vect85vector_func.i = shufflevector <16 x float> %temp.vect84vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 19, i32 undef>
  %temp.vect86vector_func.i = shufflevector <16 x float> %temp.vect85vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 19>
  %189 = fadd <16 x float> %temp.vect38vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract87vector_func.i = extractelement <16 x float> %189, i32 0
  %extract88vector_func.i = extractelement <16 x float> %189, i32 1
  %extract89vector_func.i = extractelement <16 x float> %189, i32 2
  %extract90vector_func.i = extractelement <16 x float> %189, i32 3
  %extract91vector_func.i = extractelement <16 x float> %189, i32 4
  %extract92vector_func.i = extractelement <16 x float> %189, i32 5
  %extract93vector_func.i = extractelement <16 x float> %189, i32 6
  %extract94vector_func.i = extractelement <16 x float> %189, i32 7
  %extract95vector_func.i = extractelement <16 x float> %189, i32 8
  %extract96vector_func.i = extractelement <16 x float> %189, i32 9
  %extract97vector_func.i = extractelement <16 x float> %189, i32 10
  %extract98vector_func.i = extractelement <16 x float> %189, i32 11
  %extract99vector_func.i = extractelement <16 x float> %189, i32 12
  %extract100vector_func.i = extractelement <16 x float> %189, i32 13
  %extract101vector_func.i = extractelement <16 x float> %189, i32 14
  %extract102vector_func.i = extractelement <16 x float> %189, i32 15
  %190 = fadd <16 x float> %temp.vect54vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract103vector_func.i = extractelement <16 x float> %190, i32 0
  %extract104vector_func.i = extractelement <16 x float> %190, i32 1
  %extract105vector_func.i = extractelement <16 x float> %190, i32 2
  %extract106vector_func.i = extractelement <16 x float> %190, i32 3
  %extract107vector_func.i = extractelement <16 x float> %190, i32 4
  %extract108vector_func.i = extractelement <16 x float> %190, i32 5
  %extract109vector_func.i = extractelement <16 x float> %190, i32 6
  %extract110vector_func.i = extractelement <16 x float> %190, i32 7
  %extract111vector_func.i = extractelement <16 x float> %190, i32 8
  %extract112vector_func.i = extractelement <16 x float> %190, i32 9
  %extract113vector_func.i = extractelement <16 x float> %190, i32 10
  %extract114vector_func.i = extractelement <16 x float> %190, i32 11
  %extract115vector_func.i = extractelement <16 x float> %190, i32 12
  %extract116vector_func.i = extractelement <16 x float> %190, i32 13
  %extract117vector_func.i = extractelement <16 x float> %190, i32 14
  %extract118vector_func.i = extractelement <16 x float> %190, i32 15
  %191 = fadd <16 x float> %temp.vect70vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract119vector_func.i = extractelement <16 x float> %191, i32 0
  %extract120vector_func.i = extractelement <16 x float> %191, i32 1
  %extract121vector_func.i = extractelement <16 x float> %191, i32 2
  %extract122vector_func.i = extractelement <16 x float> %191, i32 3
  %extract123vector_func.i = extractelement <16 x float> %191, i32 4
  %extract124vector_func.i = extractelement <16 x float> %191, i32 5
  %extract125vector_func.i = extractelement <16 x float> %191, i32 6
  %extract126vector_func.i = extractelement <16 x float> %191, i32 7
  %extract127vector_func.i = extractelement <16 x float> %191, i32 8
  %extract128vector_func.i = extractelement <16 x float> %191, i32 9
  %extract129vector_func.i = extractelement <16 x float> %191, i32 10
  %extract130vector_func.i = extractelement <16 x float> %191, i32 11
  %extract131vector_func.i = extractelement <16 x float> %191, i32 12
  %extract132vector_func.i = extractelement <16 x float> %191, i32 13
  %extract133vector_func.i = extractelement <16 x float> %191, i32 14
  %extract134vector_func.i = extractelement <16 x float> %191, i32 15
  %192 = fadd <16 x float> %temp.vect86vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract135vector_func.i = extractelement <16 x float> %192, i32 0
  %extract136vector_func.i = extractelement <16 x float> %192, i32 1
  %extract137vector_func.i = extractelement <16 x float> %192, i32 2
  %extract138vector_func.i = extractelement <16 x float> %192, i32 3
  %extract139vector_func.i = extractelement <16 x float> %192, i32 4
  %extract140vector_func.i = extractelement <16 x float> %192, i32 5
  %extract141vector_func.i = extractelement <16 x float> %192, i32 6
  %extract142vector_func.i = extractelement <16 x float> %192, i32 7
  %extract143vector_func.i = extractelement <16 x float> %192, i32 8
  %extract144vector_func.i = extractelement <16 x float> %192, i32 9
  %extract145vector_func.i = extractelement <16 x float> %192, i32 10
  %extract146vector_func.i = extractelement <16 x float> %192, i32 11
  %extract147vector_func.i = extractelement <16 x float> %192, i32 12
  %extract148vector_func.i = extractelement <16 x float> %192, i32 13
  %extract149vector_func.i = extractelement <16 x float> %192, i32 14
  %extract150vector_func.i = extractelement <16 x float> %192, i32 15
  %193 = insertelement <4 x float> undef, float %extract87vector_func.i, i32 0
  %194 = insertelement <4 x float> undef, float %extract88vector_func.i, i32 0
  %195 = insertelement <4 x float> undef, float %extract89vector_func.i, i32 0
  %196 = insertelement <4 x float> undef, float %extract90vector_func.i, i32 0
  %197 = insertelement <4 x float> undef, float %extract91vector_func.i, i32 0
  %198 = insertelement <4 x float> undef, float %extract92vector_func.i, i32 0
  %199 = insertelement <4 x float> undef, float %extract93vector_func.i, i32 0
  %200 = insertelement <4 x float> undef, float %extract94vector_func.i, i32 0
  %201 = insertelement <4 x float> undef, float %extract95vector_func.i, i32 0
  %202 = insertelement <4 x float> undef, float %extract96vector_func.i, i32 0
  %203 = insertelement <4 x float> undef, float %extract97vector_func.i, i32 0
  %204 = insertelement <4 x float> undef, float %extract98vector_func.i, i32 0
  %205 = insertelement <4 x float> undef, float %extract99vector_func.i, i32 0
  %206 = insertelement <4 x float> undef, float %extract100vector_func.i, i32 0
  %207 = insertelement <4 x float> undef, float %extract101vector_func.i, i32 0
  %208 = insertelement <4 x float> undef, float %extract102vector_func.i, i32 0
  %209 = insertelement <4 x float> %193, float %extract103vector_func.i, i32 1
  %210 = insertelement <4 x float> %194, float %extract104vector_func.i, i32 1
  %211 = insertelement <4 x float> %195, float %extract105vector_func.i, i32 1
  %212 = insertelement <4 x float> %196, float %extract106vector_func.i, i32 1
  %213 = insertelement <4 x float> %197, float %extract107vector_func.i, i32 1
  %214 = insertelement <4 x float> %198, float %extract108vector_func.i, i32 1
  %215 = insertelement <4 x float> %199, float %extract109vector_func.i, i32 1
  %216 = insertelement <4 x float> %200, float %extract110vector_func.i, i32 1
  %217 = insertelement <4 x float> %201, float %extract111vector_func.i, i32 1
  %218 = insertelement <4 x float> %202, float %extract112vector_func.i, i32 1
  %219 = insertelement <4 x float> %203, float %extract113vector_func.i, i32 1
  %220 = insertelement <4 x float> %204, float %extract114vector_func.i, i32 1
  %221 = insertelement <4 x float> %205, float %extract115vector_func.i, i32 1
  %222 = insertelement <4 x float> %206, float %extract116vector_func.i, i32 1
  %223 = insertelement <4 x float> %207, float %extract117vector_func.i, i32 1
  %224 = insertelement <4 x float> %208, float %extract118vector_func.i, i32 1
  %225 = insertelement <4 x float> %209, float %extract119vector_func.i, i32 2
  %226 = insertelement <4 x float> %210, float %extract120vector_func.i, i32 2
  %227 = insertelement <4 x float> %211, float %extract121vector_func.i, i32 2
  %228 = insertelement <4 x float> %212, float %extract122vector_func.i, i32 2
  %229 = insertelement <4 x float> %213, float %extract123vector_func.i, i32 2
  %230 = insertelement <4 x float> %214, float %extract124vector_func.i, i32 2
  %231 = insertelement <4 x float> %215, float %extract125vector_func.i, i32 2
  %232 = insertelement <4 x float> %216, float %extract126vector_func.i, i32 2
  %233 = insertelement <4 x float> %217, float %extract127vector_func.i, i32 2
  %234 = insertelement <4 x float> %218, float %extract128vector_func.i, i32 2
  %235 = insertelement <4 x float> %219, float %extract129vector_func.i, i32 2
  %236 = insertelement <4 x float> %220, float %extract130vector_func.i, i32 2
  %237 = insertelement <4 x float> %221, float %extract131vector_func.i, i32 2
  %238 = insertelement <4 x float> %222, float %extract132vector_func.i, i32 2
  %239 = insertelement <4 x float> %223, float %extract133vector_func.i, i32 2
  %240 = insertelement <4 x float> %224, float %extract134vector_func.i, i32 2
  %241 = insertelement <4 x float> %225, float %extract135vector_func.i, i32 3
  %242 = insertelement <4 x float> %226, float %extract136vector_func.i, i32 3
  %243 = insertelement <4 x float> %227, float %extract137vector_func.i, i32 3
  %244 = insertelement <4 x float> %228, float %extract138vector_func.i, i32 3
  %245 = insertelement <4 x float> %229, float %extract139vector_func.i, i32 3
  %246 = insertelement <4 x float> %230, float %extract140vector_func.i, i32 3
  %247 = insertelement <4 x float> %231, float %extract141vector_func.i, i32 3
  %248 = insertelement <4 x float> %232, float %extract142vector_func.i, i32 3
  %249 = insertelement <4 x float> %233, float %extract143vector_func.i, i32 3
  %250 = insertelement <4 x float> %234, float %extract144vector_func.i, i32 3
  %251 = insertelement <4 x float> %235, float %extract145vector_func.i, i32 3
  %252 = insertelement <4 x float> %236, float %extract146vector_func.i, i32 3
  %253 = insertelement <4 x float> %237, float %extract147vector_func.i, i32 3
  %254 = insertelement <4 x float> %238, float %extract148vector_func.i, i32 3
  %255 = insertelement <4 x float> %239, float %extract149vector_func.i, i32 3
  %256 = insertelement <4 x float> %240, float %extract150vector_func.i, i32 3
  %257 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extractvector_func.i
  %258 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract9vector_func.i
  %259 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract10vector_func.i
  %260 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract11vector_func.i
  %261 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract12vector_func.i
  %262 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract13vector_func.i
  %263 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract14vector_func.i
  %264 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract15vector_func.i
  %265 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract16vector_func.i
  %266 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract17vector_func.i
  %267 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract18vector_func.i
  %268 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract19vector_func.i
  %269 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract20vector_func.i
  %270 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract21vector_func.i
  %271 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract22vector_func.i
  %272 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract23vector_func.i
  %273 = shufflevector <4 x float> %241, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %274 = bitcast float addrspace(1)* %257 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %274, i16 15, <16 x float> %273, i32 0, i32 0) nounwind
  %275 = ptrtoint float addrspace(1)* %257 to i64
  %276 = and i64 %275, 63
  %277 = icmp ugt i64 %276, 48
  br i1 %277, label %278, label %_Z7vstore4Dv4_fmPU3AS1f.exit16.i

; <label>:278                                     ; preds = %_Z6vload4mPKU3AS1f.exit18.i
  %279 = bitcast float addrspace(1)* %257 to i8*
  %280 = getelementptr i8* %279, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %280, i16 15, <16 x float> %273, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit16.i

_Z7vstore4Dv4_fmPU3AS1f.exit16.i:                 ; preds = %278, %_Z6vload4mPKU3AS1f.exit18.i
  %281 = shufflevector <4 x float> %242, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = bitcast float addrspace(1)* %258 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %282, i16 15, <16 x float> %281, i32 0, i32 0) nounwind
  %283 = ptrtoint float addrspace(1)* %258 to i64
  %284 = and i64 %283, 63
  %285 = icmp ugt i64 %284, 48
  br i1 %285, label %286, label %_Z7vstore4Dv4_fmPU3AS1f.exit15.i

; <label>:286                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit16.i
  %287 = bitcast float addrspace(1)* %258 to i8*
  %288 = getelementptr i8* %287, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %288, i16 15, <16 x float> %281, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit15.i

_Z7vstore4Dv4_fmPU3AS1f.exit15.i:                 ; preds = %286, %_Z7vstore4Dv4_fmPU3AS1f.exit16.i
  %289 = shufflevector <4 x float> %243, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %290 = bitcast float addrspace(1)* %259 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %290, i16 15, <16 x float> %289, i32 0, i32 0) nounwind
  %291 = ptrtoint float addrspace(1)* %259 to i64
  %292 = and i64 %291, 63
  %293 = icmp ugt i64 %292, 48
  br i1 %293, label %294, label %_Z7vstore4Dv4_fmPU3AS1f.exit14.i

; <label>:294                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit15.i
  %295 = bitcast float addrspace(1)* %259 to i8*
  %296 = getelementptr i8* %295, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %296, i16 15, <16 x float> %289, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit14.i

_Z7vstore4Dv4_fmPU3AS1f.exit14.i:                 ; preds = %294, %_Z7vstore4Dv4_fmPU3AS1f.exit15.i
  %297 = shufflevector <4 x float> %244, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %298 = bitcast float addrspace(1)* %260 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %298, i16 15, <16 x float> %297, i32 0, i32 0) nounwind
  %299 = ptrtoint float addrspace(1)* %260 to i64
  %300 = and i64 %299, 63
  %301 = icmp ugt i64 %300, 48
  br i1 %301, label %302, label %_Z7vstore4Dv4_fmPU3AS1f.exit13.i

; <label>:302                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit14.i
  %303 = bitcast float addrspace(1)* %260 to i8*
  %304 = getelementptr i8* %303, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %304, i16 15, <16 x float> %297, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit13.i

_Z7vstore4Dv4_fmPU3AS1f.exit13.i:                 ; preds = %302, %_Z7vstore4Dv4_fmPU3AS1f.exit14.i
  %305 = shufflevector <4 x float> %245, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %306 = bitcast float addrspace(1)* %261 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %306, i16 15, <16 x float> %305, i32 0, i32 0) nounwind
  %307 = ptrtoint float addrspace(1)* %261 to i64
  %308 = and i64 %307, 63
  %309 = icmp ugt i64 %308, 48
  br i1 %309, label %310, label %_Z7vstore4Dv4_fmPU3AS1f.exit12.i

; <label>:310                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit13.i
  %311 = bitcast float addrspace(1)* %261 to i8*
  %312 = getelementptr i8* %311, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %312, i16 15, <16 x float> %305, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit12.i

_Z7vstore4Dv4_fmPU3AS1f.exit12.i:                 ; preds = %310, %_Z7vstore4Dv4_fmPU3AS1f.exit13.i
  %313 = shufflevector <4 x float> %246, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %314 = bitcast float addrspace(1)* %262 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %314, i16 15, <16 x float> %313, i32 0, i32 0) nounwind
  %315 = ptrtoint float addrspace(1)* %262 to i64
  %316 = and i64 %315, 63
  %317 = icmp ugt i64 %316, 48
  br i1 %317, label %318, label %_Z7vstore4Dv4_fmPU3AS1f.exit11.i

; <label>:318                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit12.i
  %319 = bitcast float addrspace(1)* %262 to i8*
  %320 = getelementptr i8* %319, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %320, i16 15, <16 x float> %313, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit11.i

_Z7vstore4Dv4_fmPU3AS1f.exit11.i:                 ; preds = %318, %_Z7vstore4Dv4_fmPU3AS1f.exit12.i
  %321 = shufflevector <4 x float> %247, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %322 = bitcast float addrspace(1)* %263 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %322, i16 15, <16 x float> %321, i32 0, i32 0) nounwind
  %323 = ptrtoint float addrspace(1)* %263 to i64
  %324 = and i64 %323, 63
  %325 = icmp ugt i64 %324, 48
  br i1 %325, label %326, label %_Z7vstore4Dv4_fmPU3AS1f.exit10.i

; <label>:326                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit11.i
  %327 = bitcast float addrspace(1)* %263 to i8*
  %328 = getelementptr i8* %327, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %328, i16 15, <16 x float> %321, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit10.i

_Z7vstore4Dv4_fmPU3AS1f.exit10.i:                 ; preds = %326, %_Z7vstore4Dv4_fmPU3AS1f.exit11.i
  %329 = shufflevector <4 x float> %248, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %330 = bitcast float addrspace(1)* %264 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %330, i16 15, <16 x float> %329, i32 0, i32 0) nounwind
  %331 = ptrtoint float addrspace(1)* %264 to i64
  %332 = and i64 %331, 63
  %333 = icmp ugt i64 %332, 48
  br i1 %333, label %334, label %_Z7vstore4Dv4_fmPU3AS1f.exit9.i

; <label>:334                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit10.i
  %335 = bitcast float addrspace(1)* %264 to i8*
  %336 = getelementptr i8* %335, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %336, i16 15, <16 x float> %329, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit9.i

_Z7vstore4Dv4_fmPU3AS1f.exit9.i:                  ; preds = %334, %_Z7vstore4Dv4_fmPU3AS1f.exit10.i
  %337 = shufflevector <4 x float> %249, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %338 = bitcast float addrspace(1)* %265 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %338, i16 15, <16 x float> %337, i32 0, i32 0) nounwind
  %339 = ptrtoint float addrspace(1)* %265 to i64
  %340 = and i64 %339, 63
  %341 = icmp ugt i64 %340, 48
  br i1 %341, label %342, label %_Z7vstore4Dv4_fmPU3AS1f.exit8.i

; <label>:342                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit9.i
  %343 = bitcast float addrspace(1)* %265 to i8*
  %344 = getelementptr i8* %343, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %344, i16 15, <16 x float> %337, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit8.i

_Z7vstore4Dv4_fmPU3AS1f.exit8.i:                  ; preds = %342, %_Z7vstore4Dv4_fmPU3AS1f.exit9.i
  %345 = shufflevector <4 x float> %250, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %346 = bitcast float addrspace(1)* %266 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %346, i16 15, <16 x float> %345, i32 0, i32 0) nounwind
  %347 = ptrtoint float addrspace(1)* %266 to i64
  %348 = and i64 %347, 63
  %349 = icmp ugt i64 %348, 48
  br i1 %349, label %350, label %_Z7vstore4Dv4_fmPU3AS1f.exit7.i

; <label>:350                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit8.i
  %351 = bitcast float addrspace(1)* %266 to i8*
  %352 = getelementptr i8* %351, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %352, i16 15, <16 x float> %345, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit7.i

_Z7vstore4Dv4_fmPU3AS1f.exit7.i:                  ; preds = %350, %_Z7vstore4Dv4_fmPU3AS1f.exit8.i
  %353 = shufflevector <4 x float> %251, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %354 = bitcast float addrspace(1)* %267 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %354, i16 15, <16 x float> %353, i32 0, i32 0) nounwind
  %355 = ptrtoint float addrspace(1)* %267 to i64
  %356 = and i64 %355, 63
  %357 = icmp ugt i64 %356, 48
  br i1 %357, label %358, label %_Z7vstore4Dv4_fmPU3AS1f.exit6.i

; <label>:358                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit7.i
  %359 = bitcast float addrspace(1)* %267 to i8*
  %360 = getelementptr i8* %359, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %360, i16 15, <16 x float> %353, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit6.i

_Z7vstore4Dv4_fmPU3AS1f.exit6.i:                  ; preds = %358, %_Z7vstore4Dv4_fmPU3AS1f.exit7.i
  %361 = shufflevector <4 x float> %252, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %362 = bitcast float addrspace(1)* %268 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %362, i16 15, <16 x float> %361, i32 0, i32 0) nounwind
  %363 = ptrtoint float addrspace(1)* %268 to i64
  %364 = and i64 %363, 63
  %365 = icmp ugt i64 %364, 48
  br i1 %365, label %366, label %_Z7vstore4Dv4_fmPU3AS1f.exit5.i

; <label>:366                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit6.i
  %367 = bitcast float addrspace(1)* %268 to i8*
  %368 = getelementptr i8* %367, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %368, i16 15, <16 x float> %361, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit5.i

_Z7vstore4Dv4_fmPU3AS1f.exit5.i:                  ; preds = %366, %_Z7vstore4Dv4_fmPU3AS1f.exit6.i
  %369 = shufflevector <4 x float> %253, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %370 = bitcast float addrspace(1)* %269 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %370, i16 15, <16 x float> %369, i32 0, i32 0) nounwind
  %371 = ptrtoint float addrspace(1)* %269 to i64
  %372 = and i64 %371, 63
  %373 = icmp ugt i64 %372, 48
  br i1 %373, label %374, label %_Z7vstore4Dv4_fmPU3AS1f.exit4.i

; <label>:374                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit5.i
  %375 = bitcast float addrspace(1)* %269 to i8*
  %376 = getelementptr i8* %375, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %376, i16 15, <16 x float> %369, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit4.i

_Z7vstore4Dv4_fmPU3AS1f.exit4.i:                  ; preds = %374, %_Z7vstore4Dv4_fmPU3AS1f.exit5.i
  %377 = shufflevector <4 x float> %254, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %378 = bitcast float addrspace(1)* %270 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %378, i16 15, <16 x float> %377, i32 0, i32 0) nounwind
  %379 = ptrtoint float addrspace(1)* %270 to i64
  %380 = and i64 %379, 63
  %381 = icmp ugt i64 %380, 48
  br i1 %381, label %382, label %_Z7vstore4Dv4_fmPU3AS1f.exit3.i

; <label>:382                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit4.i
  %383 = bitcast float addrspace(1)* %270 to i8*
  %384 = getelementptr i8* %383, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %384, i16 15, <16 x float> %377, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit3.i

_Z7vstore4Dv4_fmPU3AS1f.exit3.i:                  ; preds = %382, %_Z7vstore4Dv4_fmPU3AS1f.exit4.i
  %385 = shufflevector <4 x float> %255, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %386 = bitcast float addrspace(1)* %271 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %386, i16 15, <16 x float> %385, i32 0, i32 0) nounwind
  %387 = ptrtoint float addrspace(1)* %271 to i64
  %388 = and i64 %387, 63
  %389 = icmp ugt i64 %388, 48
  br i1 %389, label %390, label %_Z7vstore4Dv4_fmPU3AS1f.exit2.i

; <label>:390                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit3.i
  %391 = bitcast float addrspace(1)* %271 to i8*
  %392 = getelementptr i8* %391, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %392, i16 15, <16 x float> %385, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit2.i

_Z7vstore4Dv4_fmPU3AS1f.exit2.i:                  ; preds = %390, %_Z7vstore4Dv4_fmPU3AS1f.exit3.i
  %393 = shufflevector <4 x float> %256, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %394 = bitcast float addrspace(1)* %272 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %394, i16 15, <16 x float> %393, i32 0, i32 0) nounwind
  %395 = ptrtoint float addrspace(1)* %272 to i64
  %396 = and i64 %395, 63
  %397 = icmp ugt i64 %396, 48
  br i1 %397, label %398, label %_Z7vstore4Dv4_fmPU3AS1f.exit1.i

; <label>:398                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit2.i
  %399 = bitcast float addrspace(1)* %272 to i8*
  %400 = getelementptr i8* %399, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %400, i16 15, <16 x float> %393, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit1.i

_Z7vstore4Dv4_fmPU3AS1f.exit1.i:                  ; preds = %398, %_Z7vstore4Dv4_fmPU3AS1f.exit2.i
  %Strided.add.i = add <16 x i64> %27, %vector.i
  %lsr.iv.next6 = add i64 %lsr.iv5, -1
  %dim_0_vector_cmp.to.max.i = icmp eq i64 %lsr.iv.next6, 0
  br i1 %dim_0_vector_cmp.to.max.i, label %dim_0_vector_exit.i, label %26

dim_0_vector_exit.i:                              ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit1.i
  %dim_1_vector_inc_ind_var.i = add nuw nsw i64 %dim_1_vector_ind_var.i, 1
  %dim_1_vector_inc_tid.i = add nuw nsw i64 %dim_1_vector_tid.i, 1
  %dim_1_vector_cmp.to.max.i = icmp eq i64 %dim_1_vector_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_vector_cmp.to.max.i, label %scalarIf.i, label %dim_0_vector_pre_head.i

scalarIf.i:                                       ; preds = %dim_0_vector_exit.i, %wrapper_entry
  %401 = icmp eq i64 %LocalSize_0, %num.vector.wi.i
  br i1 %401, label %__read_4_separated_args.exit, label %dim_0_pre_head.i.preheader

dim_0_pre_head.i.preheader:                       ; preds = %scalarIf.i
  %402 = sub i64 %LocalSize_0, %num.vector.wi.i
  %403 = mul i64 %LocalSize_1, %GroupID_1
  %404 = add i64 %GlobalOffset_1, %403
  %405 = trunc i64 %404 to i32
  %406 = mul i32 %explicit_2, %405
  %407 = add i64 %GlobalOffset_0, %num.vector.wi.i
  %408 = mul i64 %LocalSize_0, %GroupID_0
  %409 = add i64 %407, %408
  %410 = mul i64 %409, 4
  %411 = trunc i64 %410 to i32
  %412 = add i32 %406, %411
  br label %dim_0_pre_head.i

dim_0_pre_head.i:                                 ; preds = %dim_0_pre_head.i.preheader, %dim_0_exit.i
  %lsr.iv1 = phi i32 [ %412, %dim_0_pre_head.i.preheader ], [ %lsr.iv.next2, %dim_0_exit.i ]
  %dim_1_ind_var.i = phi i64 [ %dim_1_inc_ind_var.i, %dim_0_exit.i ], [ 0, %dim_0_pre_head.i.preheader ]
  br label %scalar_kernel_entry.i

scalar_kernel_entry.i:                            ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit.i, %dim_0_pre_head.i
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %_Z7vstore4Dv4_fmPU3AS1f.exit.i ], [ %lsr.iv1, %dim_0_pre_head.i ]
  %lsr.iv = phi i64 [ %lsr.iv.next, %_Z7vstore4Dv4_fmPU3AS1f.exit.i ], [ %402, %dim_0_pre_head.i ]
  %413 = sext i32 %lsr.iv3 to i64
  %414 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %413
  %415 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %416 = bitcast float addrspace(1)* %414 to i8*
  %417 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %415, i16 15, i8* %416, i32 0, i32 0) nounwind
  %418 = ptrtoint float addrspace(1)* %414 to i64
  %419 = and i64 %418, 63
  %420 = icmp ugt i64 %419, 48
  br i1 %420, label %421, label %_Z6vload4mPKU3AS1f.exit.i

; <label>:421                                     ; preds = %scalar_kernel_entry.i
  %422 = bitcast float addrspace(1)* %414 to i8*
  %423 = getelementptr i8* %422, i64 64
  %424 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %417, i16 15, i8* %423, i32 0, i32 0) nounwind
  br label %_Z6vload4mPKU3AS1f.exit.i

_Z6vload4mPKU3AS1f.exit.i:                        ; preds = %421, %scalar_kernel_entry.i
  %ret.0.i.i.i = phi <16 x float> [ %424, %421 ], [ %417, %scalar_kernel_entry.i ]
  %425 = shufflevector <16 x float> %ret.0.i.i.i, <16 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %426 = fadd <4 x float> %425, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %427 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %413
  %428 = shufflevector <4 x float> %426, <4 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %429 = bitcast float addrspace(1)* %427 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %429, i16 15, <16 x float> %428, i32 0, i32 0) nounwind
  %430 = ptrtoint float addrspace(1)* %427 to i64
  %431 = and i64 %430, 63
  %432 = icmp ugt i64 %431, 48
  br i1 %432, label %433, label %_Z7vstore4Dv4_fmPU3AS1f.exit.i

; <label>:433                                     ; preds = %_Z6vload4mPKU3AS1f.exit.i
  %434 = bitcast float addrspace(1)* %427 to i8*
  %435 = getelementptr i8* %434, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %435, i16 15, <16 x float> %428, i32 0, i32 0) nounwind
  br label %_Z7vstore4Dv4_fmPU3AS1f.exit.i

_Z7vstore4Dv4_fmPU3AS1f.exit.i:                   ; preds = %433, %_Z6vload4mPKU3AS1f.exit.i
  %436 = trunc i64 %413 to i32
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next4 = add i32 %436, 4
  %dim_0_cmp.to.max.i = icmp eq i64 %lsr.iv.next, 0
  br i1 %dim_0_cmp.to.max.i, label %dim_0_exit.i, label %scalar_kernel_entry.i

dim_0_exit.i:                                     ; preds = %_Z7vstore4Dv4_fmPU3AS1f.exit.i
  %dim_1_inc_ind_var.i = add nuw nsw i64 %dim_1_ind_var.i, 1
  %lsr.iv.next2 = add i32 %lsr.iv1, %explicit_2
  %dim_1_cmp.to.max.i = icmp eq i64 %dim_1_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_cmp.to.max.i, label %__read_4_separated_args.exit, label %dim_0_pre_head.i

__read_4_separated_args.exit:                     ; preds = %dim_0_exit.i, %scalarIf.i
  ret void
}

define void @read_8(i8* %pUniformArgs, i64* %pWGId, {}* %RuntimeContext) {
wrapper_entry:
  %0 = bitcast i8* %pUniformArgs to float addrspace(1)**
  %explicit_0 = load float addrspace(1)** %0, align 8
  %1 = getelementptr i8* %pUniformArgs, i64 8
  %2 = bitcast i8* %1 to float addrspace(1)**
  %explicit_1 = load float addrspace(1)** %2, align 8
  %3 = getelementptr i8* %pUniformArgs, i64 16
  %4 = bitcast i8* %3 to i32*
  %explicit_2 = load i32* %4, align 4
  %5 = getelementptr i8* %pUniformArgs, i64 80
  %6 = bitcast i8* %5 to i64*
  %LocalSize_0 = load i64* %6, align 8
  %7 = getelementptr i8* %pUniformArgs, i64 88
  %8 = bitcast i8* %7 to i64*
  %LocalSize_1 = load i64* %8, align 8
  %9 = getelementptr i8* %pUniformArgs, i64 32
  %10 = bitcast i8* %9 to i64*
  %GlobalOffset_0 = load i64* %10, align 8
  %11 = getelementptr i8* %pUniformArgs, i64 40
  %12 = bitcast i8* %11 to i64*
  %GlobalOffset_1 = load i64* %12, align 8
  %GroupID_0 = load i64* %pWGId, align 8
  %13 = getelementptr i64* %pWGId, i64 1
  %GroupID_1 = load i64* %13, align 8
  %14 = mul i64 %LocalSize_0, %GroupID_0
  %15 = add i64 %14, %GlobalOffset_0
  %16 = mul i64 %LocalSize_1, %GroupID_1
  %17 = add i64 %16, %GlobalOffset_1
  %vector.size.i = ashr i64 %LocalSize_0, 4
  %num.vector.wi.i = and i64 %LocalSize_0, -16
  %18 = icmp eq i64 %vector.size.i, 0
  br i1 %18, label %scalarIf.i, label %dim_1_vector_pre_head.i

dim_1_vector_pre_head.i:                          ; preds = %wrapper_entry
  %tempvector_func.i = insertelement <16 x i64> undef, i64 %15, i32 0
  %vectorvector_func.i = shufflevector <16 x i64> %tempvector_func.i, <16 x i64> undef, <16 x i32> zeroinitializer
  %19 = add <16 x i64> %vectorvector_func.i, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %20 = shl <16 x i64> %19, <i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3, i64 3>
  %21 = trunc <16 x i64> %20 to <16 x i32>
  br label %dim_0_vector_pre_head.i

dim_0_vector_pre_head.i:                          ; preds = %dim_0_vector_exit.i, %dim_1_vector_pre_head.i
  %dim_1_vector_ind_var.i = phi i64 [ 0, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_ind_var.i, %dim_0_vector_exit.i ]
  %dim_1_vector_tid.i = phi i64 [ %17, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_tid.i, %dim_0_vector_exit.i ]
  %22 = trunc i64 %dim_1_vector_tid.i to i32
  %23 = mul nsw i32 %22, %explicit_2
  %temp16vector_func.i = insertelement <16 x i32> undef, i32 %23, i32 0
  %vector15vector_func.i = shufflevector <16 x i32> %temp16vector_func.i, <16 x i32> undef, <16 x i32> zeroinitializer
  %24 = add nsw <16 x i32> %vector15vector_func.i, %21
  %25 = sext <16 x i32> %24 to <16 x i64>
  %extract.0.i = extractelement <16 x i64> %25, i32 0
  %extract.01.i = extractelement <16 x i64> %25, i32 1
  %sub.delta.i = sub i64 %extract.01.i, %extract.0.i
  %mul.delta.i = shl i64 %sub.delta.i, 4
  %temp.i = insertelement <16 x i64> undef, i64 %mul.delta.i, i32 0
  %vector.i = shufflevector <16 x i64> %temp.i, <16 x i64> undef, <16 x i32> zeroinitializer
  br label %26

; <label>:26                                      ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit1.i, %dim_0_vector_pre_head.i
  %lsr.iv5 = phi i64 [ %lsr.iv.next6, %_Z7vstore8Dv8_fmPU3AS1f.exit1.i ], [ %vector.size.i, %dim_0_vector_pre_head.i ]
  %27 = phi <16 x i64> [ %25, %dim_0_vector_pre_head.i ], [ %Strided.add.i, %_Z7vstore8Dv8_fmPU3AS1f.exit1.i ]
  %extractvector_func.i = extractelement <16 x i64> %27, i32 0
  %extract17vector_func.i = extractelement <16 x i64> %27, i32 1
  %extract18vector_func.i = extractelement <16 x i64> %27, i32 2
  %extract19vector_func.i = extractelement <16 x i64> %27, i32 3
  %extract20vector_func.i = extractelement <16 x i64> %27, i32 4
  %extract21vector_func.i = extractelement <16 x i64> %27, i32 5
  %extract22vector_func.i = extractelement <16 x i64> %27, i32 6
  %extract23vector_func.i = extractelement <16 x i64> %27, i32 7
  %extract24vector_func.i = extractelement <16 x i64> %27, i32 8
  %extract25vector_func.i = extractelement <16 x i64> %27, i32 9
  %extract26vector_func.i = extractelement <16 x i64> %27, i32 10
  %extract27vector_func.i = extractelement <16 x i64> %27, i32 11
  %extract28vector_func.i = extractelement <16 x i64> %27, i32 12
  %extract29vector_func.i = extractelement <16 x i64> %27, i32 13
  %extract30vector_func.i = extractelement <16 x i64> %27, i32 14
  %extract31vector_func.i = extractelement <16 x i64> %27, i32 15
  %28 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extractvector_func.i
  %29 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract17vector_func.i
  %30 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract18vector_func.i
  %31 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract19vector_func.i
  %32 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract20vector_func.i
  %33 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract21vector_func.i
  %34 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract22vector_func.i
  %35 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract23vector_func.i
  %36 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract24vector_func.i
  %37 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract25vector_func.i
  %38 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract26vector_func.i
  %39 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract27vector_func.i
  %40 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract28vector_func.i
  %41 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract29vector_func.i
  %42 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract30vector_func.i
  %43 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract31vector_func.i
  %44 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %45 = bitcast float addrspace(1)* %28 to i8*
  %46 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %45, i32 0, i32 0) nounwind
  %47 = ptrtoint float addrspace(1)* %28 to i64
  %48 = and i64 %47, 63
  %49 = icmp ugt i64 %48, 32
  br i1 %49, label %50, label %_Z6vload8mPKU3AS1f.exit48.i

; <label>:50                                      ; preds = %26
  %51 = bitcast float addrspace(1)* %28 to i8*
  %52 = getelementptr i8* %51, i64 64
  %53 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %46, i16 255, i8* %52, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit48.i

_Z6vload8mPKU3AS1f.exit48.i:                      ; preds = %50, %26
  %ret.0.i.i47.i = phi <16 x float> [ %53, %50 ], [ %46, %26 ]
  %54 = bitcast float addrspace(1)* %29 to i8*
  %55 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %54, i32 0, i32 0) nounwind
  %56 = ptrtoint float addrspace(1)* %29 to i64
  %57 = and i64 %56, 63
  %58 = icmp ugt i64 %57, 32
  br i1 %58, label %59, label %_Z6vload8mPKU3AS1f.exit46.i

; <label>:59                                      ; preds = %_Z6vload8mPKU3AS1f.exit48.i
  %60 = bitcast float addrspace(1)* %29 to i8*
  %61 = getelementptr i8* %60, i64 64
  %62 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %55, i16 255, i8* %61, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit46.i

_Z6vload8mPKU3AS1f.exit46.i:                      ; preds = %59, %_Z6vload8mPKU3AS1f.exit48.i
  %ret.0.i.i45.i = phi <16 x float> [ %62, %59 ], [ %55, %_Z6vload8mPKU3AS1f.exit48.i ]
  %63 = bitcast float addrspace(1)* %30 to i8*
  %64 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %63, i32 0, i32 0) nounwind
  %65 = ptrtoint float addrspace(1)* %30 to i64
  %66 = and i64 %65, 63
  %67 = icmp ugt i64 %66, 32
  br i1 %67, label %68, label %_Z6vload8mPKU3AS1f.exit44.i

; <label>:68                                      ; preds = %_Z6vload8mPKU3AS1f.exit46.i
  %69 = bitcast float addrspace(1)* %30 to i8*
  %70 = getelementptr i8* %69, i64 64
  %71 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %64, i16 255, i8* %70, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit44.i

_Z6vload8mPKU3AS1f.exit44.i:                      ; preds = %68, %_Z6vload8mPKU3AS1f.exit46.i
  %ret.0.i.i43.i = phi <16 x float> [ %71, %68 ], [ %64, %_Z6vload8mPKU3AS1f.exit46.i ]
  %72 = bitcast float addrspace(1)* %31 to i8*
  %73 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %72, i32 0, i32 0) nounwind
  %74 = ptrtoint float addrspace(1)* %31 to i64
  %75 = and i64 %74, 63
  %76 = icmp ugt i64 %75, 32
  br i1 %76, label %77, label %_Z6vload8mPKU3AS1f.exit42.i

; <label>:77                                      ; preds = %_Z6vload8mPKU3AS1f.exit44.i
  %78 = bitcast float addrspace(1)* %31 to i8*
  %79 = getelementptr i8* %78, i64 64
  %80 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %73, i16 255, i8* %79, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit42.i

_Z6vload8mPKU3AS1f.exit42.i:                      ; preds = %77, %_Z6vload8mPKU3AS1f.exit44.i
  %ret.0.i.i41.i = phi <16 x float> [ %80, %77 ], [ %73, %_Z6vload8mPKU3AS1f.exit44.i ]
  %81 = bitcast float addrspace(1)* %32 to i8*
  %82 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %81, i32 0, i32 0) nounwind
  %83 = ptrtoint float addrspace(1)* %32 to i64
  %84 = and i64 %83, 63
  %85 = icmp ugt i64 %84, 32
  br i1 %85, label %86, label %_Z6vload8mPKU3AS1f.exit40.i

; <label>:86                                      ; preds = %_Z6vload8mPKU3AS1f.exit42.i
  %87 = bitcast float addrspace(1)* %32 to i8*
  %88 = getelementptr i8* %87, i64 64
  %89 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %82, i16 255, i8* %88, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit40.i

_Z6vload8mPKU3AS1f.exit40.i:                      ; preds = %86, %_Z6vload8mPKU3AS1f.exit42.i
  %ret.0.i.i39.i = phi <16 x float> [ %89, %86 ], [ %82, %_Z6vload8mPKU3AS1f.exit42.i ]
  %90 = bitcast float addrspace(1)* %33 to i8*
  %91 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %90, i32 0, i32 0) nounwind
  %92 = ptrtoint float addrspace(1)* %33 to i64
  %93 = and i64 %92, 63
  %94 = icmp ugt i64 %93, 32
  br i1 %94, label %95, label %_Z6vload8mPKU3AS1f.exit38.i

; <label>:95                                      ; preds = %_Z6vload8mPKU3AS1f.exit40.i
  %96 = bitcast float addrspace(1)* %33 to i8*
  %97 = getelementptr i8* %96, i64 64
  %98 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %91, i16 255, i8* %97, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit38.i

_Z6vload8mPKU3AS1f.exit38.i:                      ; preds = %95, %_Z6vload8mPKU3AS1f.exit40.i
  %ret.0.i.i37.i = phi <16 x float> [ %98, %95 ], [ %91, %_Z6vload8mPKU3AS1f.exit40.i ]
  %99 = bitcast float addrspace(1)* %34 to i8*
  %100 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %99, i32 0, i32 0) nounwind
  %101 = ptrtoint float addrspace(1)* %34 to i64
  %102 = and i64 %101, 63
  %103 = icmp ugt i64 %102, 32
  br i1 %103, label %104, label %_Z6vload8mPKU3AS1f.exit36.i

; <label>:104                                     ; preds = %_Z6vload8mPKU3AS1f.exit38.i
  %105 = bitcast float addrspace(1)* %34 to i8*
  %106 = getelementptr i8* %105, i64 64
  %107 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %100, i16 255, i8* %106, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit36.i

_Z6vload8mPKU3AS1f.exit36.i:                      ; preds = %104, %_Z6vload8mPKU3AS1f.exit38.i
  %ret.0.i.i35.i = phi <16 x float> [ %107, %104 ], [ %100, %_Z6vload8mPKU3AS1f.exit38.i ]
  %108 = bitcast float addrspace(1)* %35 to i8*
  %109 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %108, i32 0, i32 0) nounwind
  %110 = ptrtoint float addrspace(1)* %35 to i64
  %111 = and i64 %110, 63
  %112 = icmp ugt i64 %111, 32
  br i1 %112, label %113, label %_Z6vload8mPKU3AS1f.exit34.i

; <label>:113                                     ; preds = %_Z6vload8mPKU3AS1f.exit36.i
  %114 = bitcast float addrspace(1)* %35 to i8*
  %115 = getelementptr i8* %114, i64 64
  %116 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %109, i16 255, i8* %115, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit34.i

_Z6vload8mPKU3AS1f.exit34.i:                      ; preds = %113, %_Z6vload8mPKU3AS1f.exit36.i
  %ret.0.i.i33.i = phi <16 x float> [ %116, %113 ], [ %109, %_Z6vload8mPKU3AS1f.exit36.i ]
  %117 = bitcast float addrspace(1)* %36 to i8*
  %118 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %117, i32 0, i32 0) nounwind
  %119 = ptrtoint float addrspace(1)* %36 to i64
  %120 = and i64 %119, 63
  %121 = icmp ugt i64 %120, 32
  br i1 %121, label %122, label %_Z6vload8mPKU3AS1f.exit32.i

; <label>:122                                     ; preds = %_Z6vload8mPKU3AS1f.exit34.i
  %123 = bitcast float addrspace(1)* %36 to i8*
  %124 = getelementptr i8* %123, i64 64
  %125 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %118, i16 255, i8* %124, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit32.i

_Z6vload8mPKU3AS1f.exit32.i:                      ; preds = %122, %_Z6vload8mPKU3AS1f.exit34.i
  %ret.0.i.i31.i = phi <16 x float> [ %125, %122 ], [ %118, %_Z6vload8mPKU3AS1f.exit34.i ]
  %126 = bitcast float addrspace(1)* %37 to i8*
  %127 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %126, i32 0, i32 0) nounwind
  %128 = ptrtoint float addrspace(1)* %37 to i64
  %129 = and i64 %128, 63
  %130 = icmp ugt i64 %129, 32
  br i1 %130, label %131, label %_Z6vload8mPKU3AS1f.exit30.i

; <label>:131                                     ; preds = %_Z6vload8mPKU3AS1f.exit32.i
  %132 = bitcast float addrspace(1)* %37 to i8*
  %133 = getelementptr i8* %132, i64 64
  %134 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %127, i16 255, i8* %133, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit30.i

_Z6vload8mPKU3AS1f.exit30.i:                      ; preds = %131, %_Z6vload8mPKU3AS1f.exit32.i
  %ret.0.i.i29.i = phi <16 x float> [ %134, %131 ], [ %127, %_Z6vload8mPKU3AS1f.exit32.i ]
  %135 = bitcast float addrspace(1)* %38 to i8*
  %136 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %135, i32 0, i32 0) nounwind
  %137 = ptrtoint float addrspace(1)* %38 to i64
  %138 = and i64 %137, 63
  %139 = icmp ugt i64 %138, 32
  br i1 %139, label %140, label %_Z6vload8mPKU3AS1f.exit28.i

; <label>:140                                     ; preds = %_Z6vload8mPKU3AS1f.exit30.i
  %141 = bitcast float addrspace(1)* %38 to i8*
  %142 = getelementptr i8* %141, i64 64
  %143 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %136, i16 255, i8* %142, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit28.i

_Z6vload8mPKU3AS1f.exit28.i:                      ; preds = %140, %_Z6vload8mPKU3AS1f.exit30.i
  %ret.0.i.i27.i = phi <16 x float> [ %143, %140 ], [ %136, %_Z6vload8mPKU3AS1f.exit30.i ]
  %144 = bitcast float addrspace(1)* %39 to i8*
  %145 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %144, i32 0, i32 0) nounwind
  %146 = ptrtoint float addrspace(1)* %39 to i64
  %147 = and i64 %146, 63
  %148 = icmp ugt i64 %147, 32
  br i1 %148, label %149, label %_Z6vload8mPKU3AS1f.exit26.i

; <label>:149                                     ; preds = %_Z6vload8mPKU3AS1f.exit28.i
  %150 = bitcast float addrspace(1)* %39 to i8*
  %151 = getelementptr i8* %150, i64 64
  %152 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %145, i16 255, i8* %151, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit26.i

_Z6vload8mPKU3AS1f.exit26.i:                      ; preds = %149, %_Z6vload8mPKU3AS1f.exit28.i
  %ret.0.i.i25.i = phi <16 x float> [ %152, %149 ], [ %145, %_Z6vload8mPKU3AS1f.exit28.i ]
  %153 = bitcast float addrspace(1)* %40 to i8*
  %154 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %153, i32 0, i32 0) nounwind
  %155 = ptrtoint float addrspace(1)* %40 to i64
  %156 = and i64 %155, 63
  %157 = icmp ugt i64 %156, 32
  br i1 %157, label %158, label %_Z6vload8mPKU3AS1f.exit24.i

; <label>:158                                     ; preds = %_Z6vload8mPKU3AS1f.exit26.i
  %159 = bitcast float addrspace(1)* %40 to i8*
  %160 = getelementptr i8* %159, i64 64
  %161 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %154, i16 255, i8* %160, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit24.i

_Z6vload8mPKU3AS1f.exit24.i:                      ; preds = %158, %_Z6vload8mPKU3AS1f.exit26.i
  %ret.0.i.i23.i = phi <16 x float> [ %161, %158 ], [ %154, %_Z6vload8mPKU3AS1f.exit26.i ]
  %162 = bitcast float addrspace(1)* %41 to i8*
  %163 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %162, i32 0, i32 0) nounwind
  %164 = ptrtoint float addrspace(1)* %41 to i64
  %165 = and i64 %164, 63
  %166 = icmp ugt i64 %165, 32
  br i1 %166, label %167, label %_Z6vload8mPKU3AS1f.exit22.i

; <label>:167                                     ; preds = %_Z6vload8mPKU3AS1f.exit24.i
  %168 = bitcast float addrspace(1)* %41 to i8*
  %169 = getelementptr i8* %168, i64 64
  %170 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %163, i16 255, i8* %169, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit22.i

_Z6vload8mPKU3AS1f.exit22.i:                      ; preds = %167, %_Z6vload8mPKU3AS1f.exit24.i
  %ret.0.i.i21.i = phi <16 x float> [ %170, %167 ], [ %163, %_Z6vload8mPKU3AS1f.exit24.i ]
  %171 = bitcast float addrspace(1)* %42 to i8*
  %172 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %171, i32 0, i32 0) nounwind
  %173 = ptrtoint float addrspace(1)* %42 to i64
  %174 = and i64 %173, 63
  %175 = icmp ugt i64 %174, 32
  br i1 %175, label %176, label %_Z6vload8mPKU3AS1f.exit20.i

; <label>:176                                     ; preds = %_Z6vload8mPKU3AS1f.exit22.i
  %177 = bitcast float addrspace(1)* %42 to i8*
  %178 = getelementptr i8* %177, i64 64
  %179 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %172, i16 255, i8* %178, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit20.i

_Z6vload8mPKU3AS1f.exit20.i:                      ; preds = %176, %_Z6vload8mPKU3AS1f.exit22.i
  %ret.0.i.i19.i = phi <16 x float> [ %179, %176 ], [ %172, %_Z6vload8mPKU3AS1f.exit22.i ]
  %180 = bitcast float addrspace(1)* %43 to i8*
  %181 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %44, i16 255, i8* %180, i32 0, i32 0) nounwind
  %182 = ptrtoint float addrspace(1)* %43 to i64
  %183 = and i64 %182, 63
  %184 = icmp ugt i64 %183, 32
  br i1 %184, label %185, label %_Z6vload8mPKU3AS1f.exit18.i

; <label>:185                                     ; preds = %_Z6vload8mPKU3AS1f.exit20.i
  %186 = bitcast float addrspace(1)* %43 to i8*
  %187 = getelementptr i8* %186, i64 64
  %188 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %181, i16 255, i8* %187, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit18.i

_Z6vload8mPKU3AS1f.exit18.i:                      ; preds = %185, %_Z6vload8mPKU3AS1f.exit20.i
  %ret.0.i.i17.i = phi <16 x float> [ %188, %185 ], [ %181, %_Z6vload8mPKU3AS1f.exit20.i ]
  %temp.vect32vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect33vector_func.i = shufflevector <16 x float> %temp.vect32vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect34vector_func.i = shufflevector <16 x float> %temp.vect33vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect35vector_func.i = shufflevector <16 x float> %temp.vect34vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect36vector_func.i = shufflevector <16 x float> %temp.vect35vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect37vector_func.i = shufflevector <16 x float> %temp.vect36vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect38vector_func.i = shufflevector <16 x float> %temp.vect37vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect39vector_func.i = shufflevector <16 x float> %temp.vect38vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect40vector_func.i = shufflevector <16 x float> %temp.vect39vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect41vector_func.i = shufflevector <16 x float> %temp.vect40vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect42vector_func.i = shufflevector <16 x float> %temp.vect41vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect43vector_func.i = shufflevector <16 x float> %temp.vect42vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 undef, i32 undef, i32 undef>
  %temp.vect44vector_func.i = shufflevector <16 x float> %temp.vect43vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 undef, i32 undef>
  %temp.vect45vector_func.i = shufflevector <16 x float> %temp.vect44vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 undef>
  %temp.vect46vector_func.i = shufflevector <16 x float> %temp.vect45vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>
  %temp.vect48vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect49vector_func.i = shufflevector <16 x float> %temp.vect48vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect50vector_func.i = shufflevector <16 x float> %temp.vect49vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect51vector_func.i = shufflevector <16 x float> %temp.vect50vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect52vector_func.i = shufflevector <16 x float> %temp.vect51vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect53vector_func.i = shufflevector <16 x float> %temp.vect52vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect54vector_func.i = shufflevector <16 x float> %temp.vect53vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect55vector_func.i = shufflevector <16 x float> %temp.vect54vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect56vector_func.i = shufflevector <16 x float> %temp.vect55vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect57vector_func.i = shufflevector <16 x float> %temp.vect56vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect58vector_func.i = shufflevector <16 x float> %temp.vect57vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect59vector_func.i = shufflevector <16 x float> %temp.vect58vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 17, i32 undef, i32 undef, i32 undef>
  %temp.vect60vector_func.i = shufflevector <16 x float> %temp.vect59vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 undef, i32 undef>
  %temp.vect61vector_func.i = shufflevector <16 x float> %temp.vect60vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 17, i32 undef>
  %temp.vect62vector_func.i = shufflevector <16 x float> %temp.vect61vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>
  %temp.vect64vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect65vector_func.i = shufflevector <16 x float> %temp.vect64vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect66vector_func.i = shufflevector <16 x float> %temp.vect65vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect67vector_func.i = shufflevector <16 x float> %temp.vect66vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect68vector_func.i = shufflevector <16 x float> %temp.vect67vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect69vector_func.i = shufflevector <16 x float> %temp.vect68vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect70vector_func.i = shufflevector <16 x float> %temp.vect69vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect71vector_func.i = shufflevector <16 x float> %temp.vect70vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect72vector_func.i = shufflevector <16 x float> %temp.vect71vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect73vector_func.i = shufflevector <16 x float> %temp.vect72vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect74vector_func.i = shufflevector <16 x float> %temp.vect73vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 18, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect75vector_func.i = shufflevector <16 x float> %temp.vect74vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 18, i32 undef, i32 undef, i32 undef>
  %temp.vect76vector_func.i = shufflevector <16 x float> %temp.vect75vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 18, i32 undef, i32 undef>
  %temp.vect77vector_func.i = shufflevector <16 x float> %temp.vect76vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 18, i32 undef>
  %temp.vect78vector_func.i = shufflevector <16 x float> %temp.vect77vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 18>
  %temp.vect80vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect81vector_func.i = shufflevector <16 x float> %temp.vect80vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect82vector_func.i = shufflevector <16 x float> %temp.vect81vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect83vector_func.i = shufflevector <16 x float> %temp.vect82vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect84vector_func.i = shufflevector <16 x float> %temp.vect83vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect85vector_func.i = shufflevector <16 x float> %temp.vect84vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect86vector_func.i = shufflevector <16 x float> %temp.vect85vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect87vector_func.i = shufflevector <16 x float> %temp.vect86vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect88vector_func.i = shufflevector <16 x float> %temp.vect87vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect89vector_func.i = shufflevector <16 x float> %temp.vect88vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect90vector_func.i = shufflevector <16 x float> %temp.vect89vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect91vector_func.i = shufflevector <16 x float> %temp.vect90vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 undef, i32 undef, i32 undef>
  %temp.vect92vector_func.i = shufflevector <16 x float> %temp.vect91vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 19, i32 undef, i32 undef>
  %temp.vect93vector_func.i = shufflevector <16 x float> %temp.vect92vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 19, i32 undef>
  %temp.vect94vector_func.i = shufflevector <16 x float> %temp.vect93vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 19>
  %temp.vect96vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect97vector_func.i = shufflevector <16 x float> %temp.vect96vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect98vector_func.i = shufflevector <16 x float> %temp.vect97vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect99vector_func.i = shufflevector <16 x float> %temp.vect98vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect100vector_func.i = shufflevector <16 x float> %temp.vect99vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect101vector_func.i = shufflevector <16 x float> %temp.vect100vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect102vector_func.i = shufflevector <16 x float> %temp.vect101vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect103vector_func.i = shufflevector <16 x float> %temp.vect102vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect104vector_func.i = shufflevector <16 x float> %temp.vect103vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect105vector_func.i = shufflevector <16 x float> %temp.vect104vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect106vector_func.i = shufflevector <16 x float> %temp.vect105vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 20, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect107vector_func.i = shufflevector <16 x float> %temp.vect106vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 20, i32 undef, i32 undef, i32 undef>
  %temp.vect108vector_func.i = shufflevector <16 x float> %temp.vect107vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 20, i32 undef, i32 undef>
  %temp.vect109vector_func.i = shufflevector <16 x float> %temp.vect108vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 20, i32 undef>
  %temp.vect110vector_func.i = shufflevector <16 x float> %temp.vect109vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 20>
  %temp.vect112vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect113vector_func.i = shufflevector <16 x float> %temp.vect112vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect114vector_func.i = shufflevector <16 x float> %temp.vect113vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect115vector_func.i = shufflevector <16 x float> %temp.vect114vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect116vector_func.i = shufflevector <16 x float> %temp.vect115vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect117vector_func.i = shufflevector <16 x float> %temp.vect116vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect118vector_func.i = shufflevector <16 x float> %temp.vect117vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect119vector_func.i = shufflevector <16 x float> %temp.vect118vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect120vector_func.i = shufflevector <16 x float> %temp.vect119vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect121vector_func.i = shufflevector <16 x float> %temp.vect120vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect122vector_func.i = shufflevector <16 x float> %temp.vect121vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 21, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect123vector_func.i = shufflevector <16 x float> %temp.vect122vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 21, i32 undef, i32 undef, i32 undef>
  %temp.vect124vector_func.i = shufflevector <16 x float> %temp.vect123vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 21, i32 undef, i32 undef>
  %temp.vect125vector_func.i = shufflevector <16 x float> %temp.vect124vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 21, i32 undef>
  %temp.vect126vector_func.i = shufflevector <16 x float> %temp.vect125vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 21>
  %temp.vect128vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect129vector_func.i = shufflevector <16 x float> %temp.vect128vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect130vector_func.i = shufflevector <16 x float> %temp.vect129vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect131vector_func.i = shufflevector <16 x float> %temp.vect130vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect132vector_func.i = shufflevector <16 x float> %temp.vect131vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect133vector_func.i = shufflevector <16 x float> %temp.vect132vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect134vector_func.i = shufflevector <16 x float> %temp.vect133vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect135vector_func.i = shufflevector <16 x float> %temp.vect134vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect136vector_func.i = shufflevector <16 x float> %temp.vect135vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect137vector_func.i = shufflevector <16 x float> %temp.vect136vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect138vector_func.i = shufflevector <16 x float> %temp.vect137vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 22, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect139vector_func.i = shufflevector <16 x float> %temp.vect138vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 22, i32 undef, i32 undef, i32 undef>
  %temp.vect140vector_func.i = shufflevector <16 x float> %temp.vect139vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 22, i32 undef, i32 undef>
  %temp.vect141vector_func.i = shufflevector <16 x float> %temp.vect140vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 22, i32 undef>
  %temp.vect142vector_func.i = shufflevector <16 x float> %temp.vect141vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 22>
  %temp.vect144vector_func.i = shufflevector <16 x float> %ret.0.i.i47.i, <16 x float> %ret.0.i.i45.i, <16 x i32> <i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect145vector_func.i = shufflevector <16 x float> %temp.vect144vector_func.i, <16 x float> %ret.0.i.i43.i, <16 x i32> <i32 0, i32 1, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect146vector_func.i = shufflevector <16 x float> %temp.vect145vector_func.i, <16 x float> %ret.0.i.i41.i, <16 x i32> <i32 0, i32 1, i32 2, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect147vector_func.i = shufflevector <16 x float> %temp.vect146vector_func.i, <16 x float> %ret.0.i.i39.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect148vector_func.i = shufflevector <16 x float> %temp.vect147vector_func.i, <16 x float> %ret.0.i.i37.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect149vector_func.i = shufflevector <16 x float> %temp.vect148vector_func.i, <16 x float> %ret.0.i.i35.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect150vector_func.i = shufflevector <16 x float> %temp.vect149vector_func.i, <16 x float> %ret.0.i.i33.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect151vector_func.i = shufflevector <16 x float> %temp.vect150vector_func.i, <16 x float> %ret.0.i.i31.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect152vector_func.i = shufflevector <16 x float> %temp.vect151vector_func.i, <16 x float> %ret.0.i.i29.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect153vector_func.i = shufflevector <16 x float> %temp.vect152vector_func.i, <16 x float> %ret.0.i.i27.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect154vector_func.i = shufflevector <16 x float> %temp.vect153vector_func.i, <16 x float> %ret.0.i.i25.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 23, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect155vector_func.i = shufflevector <16 x float> %temp.vect154vector_func.i, <16 x float> %ret.0.i.i23.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 23, i32 undef, i32 undef, i32 undef>
  %temp.vect156vector_func.i = shufflevector <16 x float> %temp.vect155vector_func.i, <16 x float> %ret.0.i.i21.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 23, i32 undef, i32 undef>
  %temp.vect157vector_func.i = shufflevector <16 x float> %temp.vect156vector_func.i, <16 x float> %ret.0.i.i19.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 23, i32 undef>
  %temp.vect158vector_func.i = shufflevector <16 x float> %temp.vect157vector_func.i, <16 x float> %ret.0.i.i17.i, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 23>
  %189 = fadd <16 x float> %temp.vect46vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract159vector_func.i = extractelement <16 x float> %189, i32 0
  %extract160vector_func.i = extractelement <16 x float> %189, i32 1
  %extract161vector_func.i = extractelement <16 x float> %189, i32 2
  %extract162vector_func.i = extractelement <16 x float> %189, i32 3
  %extract163vector_func.i = extractelement <16 x float> %189, i32 4
  %extract164vector_func.i = extractelement <16 x float> %189, i32 5
  %extract165vector_func.i = extractelement <16 x float> %189, i32 6
  %extract166vector_func.i = extractelement <16 x float> %189, i32 7
  %extract167vector_func.i = extractelement <16 x float> %189, i32 8
  %extract168vector_func.i = extractelement <16 x float> %189, i32 9
  %extract169vector_func.i = extractelement <16 x float> %189, i32 10
  %extract170vector_func.i = extractelement <16 x float> %189, i32 11
  %extract171vector_func.i = extractelement <16 x float> %189, i32 12
  %extract172vector_func.i = extractelement <16 x float> %189, i32 13
  %extract173vector_func.i = extractelement <16 x float> %189, i32 14
  %extract174vector_func.i = extractelement <16 x float> %189, i32 15
  %190 = fadd <16 x float> %temp.vect62vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract175vector_func.i = extractelement <16 x float> %190, i32 0
  %extract176vector_func.i = extractelement <16 x float> %190, i32 1
  %extract177vector_func.i = extractelement <16 x float> %190, i32 2
  %extract178vector_func.i = extractelement <16 x float> %190, i32 3
  %extract179vector_func.i = extractelement <16 x float> %190, i32 4
  %extract180vector_func.i = extractelement <16 x float> %190, i32 5
  %extract181vector_func.i = extractelement <16 x float> %190, i32 6
  %extract182vector_func.i = extractelement <16 x float> %190, i32 7
  %extract183vector_func.i = extractelement <16 x float> %190, i32 8
  %extract184vector_func.i = extractelement <16 x float> %190, i32 9
  %extract185vector_func.i = extractelement <16 x float> %190, i32 10
  %extract186vector_func.i = extractelement <16 x float> %190, i32 11
  %extract187vector_func.i = extractelement <16 x float> %190, i32 12
  %extract188vector_func.i = extractelement <16 x float> %190, i32 13
  %extract189vector_func.i = extractelement <16 x float> %190, i32 14
  %extract190vector_func.i = extractelement <16 x float> %190, i32 15
  %191 = fadd <16 x float> %temp.vect78vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract191vector_func.i = extractelement <16 x float> %191, i32 0
  %extract192vector_func.i = extractelement <16 x float> %191, i32 1
  %extract193vector_func.i = extractelement <16 x float> %191, i32 2
  %extract194vector_func.i = extractelement <16 x float> %191, i32 3
  %extract195vector_func.i = extractelement <16 x float> %191, i32 4
  %extract196vector_func.i = extractelement <16 x float> %191, i32 5
  %extract197vector_func.i = extractelement <16 x float> %191, i32 6
  %extract198vector_func.i = extractelement <16 x float> %191, i32 7
  %extract199vector_func.i = extractelement <16 x float> %191, i32 8
  %extract200vector_func.i = extractelement <16 x float> %191, i32 9
  %extract201vector_func.i = extractelement <16 x float> %191, i32 10
  %extract202vector_func.i = extractelement <16 x float> %191, i32 11
  %extract203vector_func.i = extractelement <16 x float> %191, i32 12
  %extract204vector_func.i = extractelement <16 x float> %191, i32 13
  %extract205vector_func.i = extractelement <16 x float> %191, i32 14
  %extract206vector_func.i = extractelement <16 x float> %191, i32 15
  %192 = fadd <16 x float> %temp.vect94vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract207vector_func.i = extractelement <16 x float> %192, i32 0
  %extract208vector_func.i = extractelement <16 x float> %192, i32 1
  %extract209vector_func.i = extractelement <16 x float> %192, i32 2
  %extract210vector_func.i = extractelement <16 x float> %192, i32 3
  %extract211vector_func.i = extractelement <16 x float> %192, i32 4
  %extract212vector_func.i = extractelement <16 x float> %192, i32 5
  %extract213vector_func.i = extractelement <16 x float> %192, i32 6
  %extract214vector_func.i = extractelement <16 x float> %192, i32 7
  %extract215vector_func.i = extractelement <16 x float> %192, i32 8
  %extract216vector_func.i = extractelement <16 x float> %192, i32 9
  %extract217vector_func.i = extractelement <16 x float> %192, i32 10
  %extract218vector_func.i = extractelement <16 x float> %192, i32 11
  %extract219vector_func.i = extractelement <16 x float> %192, i32 12
  %extract220vector_func.i = extractelement <16 x float> %192, i32 13
  %extract221vector_func.i = extractelement <16 x float> %192, i32 14
  %extract222vector_func.i = extractelement <16 x float> %192, i32 15
  %193 = fadd <16 x float> %temp.vect110vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract223vector_func.i = extractelement <16 x float> %193, i32 0
  %extract224vector_func.i = extractelement <16 x float> %193, i32 1
  %extract225vector_func.i = extractelement <16 x float> %193, i32 2
  %extract226vector_func.i = extractelement <16 x float> %193, i32 3
  %extract227vector_func.i = extractelement <16 x float> %193, i32 4
  %extract228vector_func.i = extractelement <16 x float> %193, i32 5
  %extract229vector_func.i = extractelement <16 x float> %193, i32 6
  %extract230vector_func.i = extractelement <16 x float> %193, i32 7
  %extract231vector_func.i = extractelement <16 x float> %193, i32 8
  %extract232vector_func.i = extractelement <16 x float> %193, i32 9
  %extract233vector_func.i = extractelement <16 x float> %193, i32 10
  %extract234vector_func.i = extractelement <16 x float> %193, i32 11
  %extract235vector_func.i = extractelement <16 x float> %193, i32 12
  %extract236vector_func.i = extractelement <16 x float> %193, i32 13
  %extract237vector_func.i = extractelement <16 x float> %193, i32 14
  %extract238vector_func.i = extractelement <16 x float> %193, i32 15
  %194 = fadd <16 x float> %temp.vect126vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract239vector_func.i = extractelement <16 x float> %194, i32 0
  %extract240vector_func.i = extractelement <16 x float> %194, i32 1
  %extract241vector_func.i = extractelement <16 x float> %194, i32 2
  %extract242vector_func.i = extractelement <16 x float> %194, i32 3
  %extract243vector_func.i = extractelement <16 x float> %194, i32 4
  %extract244vector_func.i = extractelement <16 x float> %194, i32 5
  %extract245vector_func.i = extractelement <16 x float> %194, i32 6
  %extract246vector_func.i = extractelement <16 x float> %194, i32 7
  %extract247vector_func.i = extractelement <16 x float> %194, i32 8
  %extract248vector_func.i = extractelement <16 x float> %194, i32 9
  %extract249vector_func.i = extractelement <16 x float> %194, i32 10
  %extract250vector_func.i = extractelement <16 x float> %194, i32 11
  %extract251vector_func.i = extractelement <16 x float> %194, i32 12
  %extract252vector_func.i = extractelement <16 x float> %194, i32 13
  %extract253vector_func.i = extractelement <16 x float> %194, i32 14
  %extract254vector_func.i = extractelement <16 x float> %194, i32 15
  %195 = fadd <16 x float> %temp.vect142vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract255vector_func.i = extractelement <16 x float> %195, i32 0
  %extract256vector_func.i = extractelement <16 x float> %195, i32 1
  %extract257vector_func.i = extractelement <16 x float> %195, i32 2
  %extract258vector_func.i = extractelement <16 x float> %195, i32 3
  %extract259vector_func.i = extractelement <16 x float> %195, i32 4
  %extract260vector_func.i = extractelement <16 x float> %195, i32 5
  %extract261vector_func.i = extractelement <16 x float> %195, i32 6
  %extract262vector_func.i = extractelement <16 x float> %195, i32 7
  %extract263vector_func.i = extractelement <16 x float> %195, i32 8
  %extract264vector_func.i = extractelement <16 x float> %195, i32 9
  %extract265vector_func.i = extractelement <16 x float> %195, i32 10
  %extract266vector_func.i = extractelement <16 x float> %195, i32 11
  %extract267vector_func.i = extractelement <16 x float> %195, i32 12
  %extract268vector_func.i = extractelement <16 x float> %195, i32 13
  %extract269vector_func.i = extractelement <16 x float> %195, i32 14
  %extract270vector_func.i = extractelement <16 x float> %195, i32 15
  %196 = fadd <16 x float> %temp.vect158vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %extract271vector_func.i = extractelement <16 x float> %196, i32 0
  %extract272vector_func.i = extractelement <16 x float> %196, i32 1
  %extract273vector_func.i = extractelement <16 x float> %196, i32 2
  %extract274vector_func.i = extractelement <16 x float> %196, i32 3
  %extract275vector_func.i = extractelement <16 x float> %196, i32 4
  %extract276vector_func.i = extractelement <16 x float> %196, i32 5
  %extract277vector_func.i = extractelement <16 x float> %196, i32 6
  %extract278vector_func.i = extractelement <16 x float> %196, i32 7
  %extract279vector_func.i = extractelement <16 x float> %196, i32 8
  %extract280vector_func.i = extractelement <16 x float> %196, i32 9
  %extract281vector_func.i = extractelement <16 x float> %196, i32 10
  %extract282vector_func.i = extractelement <16 x float> %196, i32 11
  %extract283vector_func.i = extractelement <16 x float> %196, i32 12
  %extract284vector_func.i = extractelement <16 x float> %196, i32 13
  %extract285vector_func.i = extractelement <16 x float> %196, i32 14
  %extract286vector_func.i = extractelement <16 x float> %196, i32 15
  %197 = insertelement <8 x float> undef, float %extract159vector_func.i, i32 0
  %198 = insertelement <8 x float> undef, float %extract160vector_func.i, i32 0
  %199 = insertelement <8 x float> undef, float %extract161vector_func.i, i32 0
  %200 = insertelement <8 x float> undef, float %extract162vector_func.i, i32 0
  %201 = insertelement <8 x float> undef, float %extract163vector_func.i, i32 0
  %202 = insertelement <8 x float> undef, float %extract164vector_func.i, i32 0
  %203 = insertelement <8 x float> undef, float %extract165vector_func.i, i32 0
  %204 = insertelement <8 x float> undef, float %extract166vector_func.i, i32 0
  %205 = insertelement <8 x float> undef, float %extract167vector_func.i, i32 0
  %206 = insertelement <8 x float> undef, float %extract168vector_func.i, i32 0
  %207 = insertelement <8 x float> undef, float %extract169vector_func.i, i32 0
  %208 = insertelement <8 x float> undef, float %extract170vector_func.i, i32 0
  %209 = insertelement <8 x float> undef, float %extract171vector_func.i, i32 0
  %210 = insertelement <8 x float> undef, float %extract172vector_func.i, i32 0
  %211 = insertelement <8 x float> undef, float %extract173vector_func.i, i32 0
  %212 = insertelement <8 x float> undef, float %extract174vector_func.i, i32 0
  %213 = insertelement <8 x float> %197, float %extract175vector_func.i, i32 1
  %214 = insertelement <8 x float> %198, float %extract176vector_func.i, i32 1
  %215 = insertelement <8 x float> %199, float %extract177vector_func.i, i32 1
  %216 = insertelement <8 x float> %200, float %extract178vector_func.i, i32 1
  %217 = insertelement <8 x float> %201, float %extract179vector_func.i, i32 1
  %218 = insertelement <8 x float> %202, float %extract180vector_func.i, i32 1
  %219 = insertelement <8 x float> %203, float %extract181vector_func.i, i32 1
  %220 = insertelement <8 x float> %204, float %extract182vector_func.i, i32 1
  %221 = insertelement <8 x float> %205, float %extract183vector_func.i, i32 1
  %222 = insertelement <8 x float> %206, float %extract184vector_func.i, i32 1
  %223 = insertelement <8 x float> %207, float %extract185vector_func.i, i32 1
  %224 = insertelement <8 x float> %208, float %extract186vector_func.i, i32 1
  %225 = insertelement <8 x float> %209, float %extract187vector_func.i, i32 1
  %226 = insertelement <8 x float> %210, float %extract188vector_func.i, i32 1
  %227 = insertelement <8 x float> %211, float %extract189vector_func.i, i32 1
  %228 = insertelement <8 x float> %212, float %extract190vector_func.i, i32 1
  %229 = insertelement <8 x float> %213, float %extract191vector_func.i, i32 2
  %230 = insertelement <8 x float> %214, float %extract192vector_func.i, i32 2
  %231 = insertelement <8 x float> %215, float %extract193vector_func.i, i32 2
  %232 = insertelement <8 x float> %216, float %extract194vector_func.i, i32 2
  %233 = insertelement <8 x float> %217, float %extract195vector_func.i, i32 2
  %234 = insertelement <8 x float> %218, float %extract196vector_func.i, i32 2
  %235 = insertelement <8 x float> %219, float %extract197vector_func.i, i32 2
  %236 = insertelement <8 x float> %220, float %extract198vector_func.i, i32 2
  %237 = insertelement <8 x float> %221, float %extract199vector_func.i, i32 2
  %238 = insertelement <8 x float> %222, float %extract200vector_func.i, i32 2
  %239 = insertelement <8 x float> %223, float %extract201vector_func.i, i32 2
  %240 = insertelement <8 x float> %224, float %extract202vector_func.i, i32 2
  %241 = insertelement <8 x float> %225, float %extract203vector_func.i, i32 2
  %242 = insertelement <8 x float> %226, float %extract204vector_func.i, i32 2
  %243 = insertelement <8 x float> %227, float %extract205vector_func.i, i32 2
  %244 = insertelement <8 x float> %228, float %extract206vector_func.i, i32 2
  %245 = insertelement <8 x float> %229, float %extract207vector_func.i, i32 3
  %246 = insertelement <8 x float> %230, float %extract208vector_func.i, i32 3
  %247 = insertelement <8 x float> %231, float %extract209vector_func.i, i32 3
  %248 = insertelement <8 x float> %232, float %extract210vector_func.i, i32 3
  %249 = insertelement <8 x float> %233, float %extract211vector_func.i, i32 3
  %250 = insertelement <8 x float> %234, float %extract212vector_func.i, i32 3
  %251 = insertelement <8 x float> %235, float %extract213vector_func.i, i32 3
  %252 = insertelement <8 x float> %236, float %extract214vector_func.i, i32 3
  %253 = insertelement <8 x float> %237, float %extract215vector_func.i, i32 3
  %254 = insertelement <8 x float> %238, float %extract216vector_func.i, i32 3
  %255 = insertelement <8 x float> %239, float %extract217vector_func.i, i32 3
  %256 = insertelement <8 x float> %240, float %extract218vector_func.i, i32 3
  %257 = insertelement <8 x float> %241, float %extract219vector_func.i, i32 3
  %258 = insertelement <8 x float> %242, float %extract220vector_func.i, i32 3
  %259 = insertelement <8 x float> %243, float %extract221vector_func.i, i32 3
  %260 = insertelement <8 x float> %244, float %extract222vector_func.i, i32 3
  %261 = insertelement <8 x float> %245, float %extract223vector_func.i, i32 4
  %262 = insertelement <8 x float> %246, float %extract224vector_func.i, i32 4
  %263 = insertelement <8 x float> %247, float %extract225vector_func.i, i32 4
  %264 = insertelement <8 x float> %248, float %extract226vector_func.i, i32 4
  %265 = insertelement <8 x float> %249, float %extract227vector_func.i, i32 4
  %266 = insertelement <8 x float> %250, float %extract228vector_func.i, i32 4
  %267 = insertelement <8 x float> %251, float %extract229vector_func.i, i32 4
  %268 = insertelement <8 x float> %252, float %extract230vector_func.i, i32 4
  %269 = insertelement <8 x float> %253, float %extract231vector_func.i, i32 4
  %270 = insertelement <8 x float> %254, float %extract232vector_func.i, i32 4
  %271 = insertelement <8 x float> %255, float %extract233vector_func.i, i32 4
  %272 = insertelement <8 x float> %256, float %extract234vector_func.i, i32 4
  %273 = insertelement <8 x float> %257, float %extract235vector_func.i, i32 4
  %274 = insertelement <8 x float> %258, float %extract236vector_func.i, i32 4
  %275 = insertelement <8 x float> %259, float %extract237vector_func.i, i32 4
  %276 = insertelement <8 x float> %260, float %extract238vector_func.i, i32 4
  %277 = insertelement <8 x float> %261, float %extract239vector_func.i, i32 5
  %278 = insertelement <8 x float> %262, float %extract240vector_func.i, i32 5
  %279 = insertelement <8 x float> %263, float %extract241vector_func.i, i32 5
  %280 = insertelement <8 x float> %264, float %extract242vector_func.i, i32 5
  %281 = insertelement <8 x float> %265, float %extract243vector_func.i, i32 5
  %282 = insertelement <8 x float> %266, float %extract244vector_func.i, i32 5
  %283 = insertelement <8 x float> %267, float %extract245vector_func.i, i32 5
  %284 = insertelement <8 x float> %268, float %extract246vector_func.i, i32 5
  %285 = insertelement <8 x float> %269, float %extract247vector_func.i, i32 5
  %286 = insertelement <8 x float> %270, float %extract248vector_func.i, i32 5
  %287 = insertelement <8 x float> %271, float %extract249vector_func.i, i32 5
  %288 = insertelement <8 x float> %272, float %extract250vector_func.i, i32 5
  %289 = insertelement <8 x float> %273, float %extract251vector_func.i, i32 5
  %290 = insertelement <8 x float> %274, float %extract252vector_func.i, i32 5
  %291 = insertelement <8 x float> %275, float %extract253vector_func.i, i32 5
  %292 = insertelement <8 x float> %276, float %extract254vector_func.i, i32 5
  %293 = insertelement <8 x float> %277, float %extract255vector_func.i, i32 6
  %294 = insertelement <8 x float> %278, float %extract256vector_func.i, i32 6
  %295 = insertelement <8 x float> %279, float %extract257vector_func.i, i32 6
  %296 = insertelement <8 x float> %280, float %extract258vector_func.i, i32 6
  %297 = insertelement <8 x float> %281, float %extract259vector_func.i, i32 6
  %298 = insertelement <8 x float> %282, float %extract260vector_func.i, i32 6
  %299 = insertelement <8 x float> %283, float %extract261vector_func.i, i32 6
  %300 = insertelement <8 x float> %284, float %extract262vector_func.i, i32 6
  %301 = insertelement <8 x float> %285, float %extract263vector_func.i, i32 6
  %302 = insertelement <8 x float> %286, float %extract264vector_func.i, i32 6
  %303 = insertelement <8 x float> %287, float %extract265vector_func.i, i32 6
  %304 = insertelement <8 x float> %288, float %extract266vector_func.i, i32 6
  %305 = insertelement <8 x float> %289, float %extract267vector_func.i, i32 6
  %306 = insertelement <8 x float> %290, float %extract268vector_func.i, i32 6
  %307 = insertelement <8 x float> %291, float %extract269vector_func.i, i32 6
  %308 = insertelement <8 x float> %292, float %extract270vector_func.i, i32 6
  %309 = insertelement <8 x float> %293, float %extract271vector_func.i, i32 7
  %310 = insertelement <8 x float> %294, float %extract272vector_func.i, i32 7
  %311 = insertelement <8 x float> %295, float %extract273vector_func.i, i32 7
  %312 = insertelement <8 x float> %296, float %extract274vector_func.i, i32 7
  %313 = insertelement <8 x float> %297, float %extract275vector_func.i, i32 7
  %314 = insertelement <8 x float> %298, float %extract276vector_func.i, i32 7
  %315 = insertelement <8 x float> %299, float %extract277vector_func.i, i32 7
  %316 = insertelement <8 x float> %300, float %extract278vector_func.i, i32 7
  %317 = insertelement <8 x float> %301, float %extract279vector_func.i, i32 7
  %318 = insertelement <8 x float> %302, float %extract280vector_func.i, i32 7
  %319 = insertelement <8 x float> %303, float %extract281vector_func.i, i32 7
  %320 = insertelement <8 x float> %304, float %extract282vector_func.i, i32 7
  %321 = insertelement <8 x float> %305, float %extract283vector_func.i, i32 7
  %322 = insertelement <8 x float> %306, float %extract284vector_func.i, i32 7
  %323 = insertelement <8 x float> %307, float %extract285vector_func.i, i32 7
  %324 = insertelement <8 x float> %308, float %extract286vector_func.i, i32 7
  %325 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extractvector_func.i
  %326 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract17vector_func.i
  %327 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract18vector_func.i
  %328 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract19vector_func.i
  %329 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract20vector_func.i
  %330 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract21vector_func.i
  %331 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract22vector_func.i
  %332 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract23vector_func.i
  %333 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract24vector_func.i
  %334 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract25vector_func.i
  %335 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract26vector_func.i
  %336 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract27vector_func.i
  %337 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract28vector_func.i
  %338 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract29vector_func.i
  %339 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract30vector_func.i
  %340 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract31vector_func.i
  %341 = shufflevector <8 x float> %309, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %342 = bitcast float addrspace(1)* %325 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %342, i16 255, <16 x float> %341, i32 0, i32 0) nounwind
  %343 = ptrtoint float addrspace(1)* %325 to i64
  %344 = and i64 %343, 63
  %345 = icmp ugt i64 %344, 32
  br i1 %345, label %346, label %_Z7vstore8Dv8_fmPU3AS1f.exit16.i

; <label>:346                                     ; preds = %_Z6vload8mPKU3AS1f.exit18.i
  %347 = bitcast float addrspace(1)* %325 to i8*
  %348 = getelementptr i8* %347, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %348, i16 255, <16 x float> %341, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit16.i

_Z7vstore8Dv8_fmPU3AS1f.exit16.i:                 ; preds = %346, %_Z6vload8mPKU3AS1f.exit18.i
  %349 = shufflevector <8 x float> %310, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %350 = bitcast float addrspace(1)* %326 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %350, i16 255, <16 x float> %349, i32 0, i32 0) nounwind
  %351 = ptrtoint float addrspace(1)* %326 to i64
  %352 = and i64 %351, 63
  %353 = icmp ugt i64 %352, 32
  br i1 %353, label %354, label %_Z7vstore8Dv8_fmPU3AS1f.exit15.i

; <label>:354                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit16.i
  %355 = bitcast float addrspace(1)* %326 to i8*
  %356 = getelementptr i8* %355, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %356, i16 255, <16 x float> %349, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit15.i

_Z7vstore8Dv8_fmPU3AS1f.exit15.i:                 ; preds = %354, %_Z7vstore8Dv8_fmPU3AS1f.exit16.i
  %357 = shufflevector <8 x float> %311, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %358 = bitcast float addrspace(1)* %327 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %358, i16 255, <16 x float> %357, i32 0, i32 0) nounwind
  %359 = ptrtoint float addrspace(1)* %327 to i64
  %360 = and i64 %359, 63
  %361 = icmp ugt i64 %360, 32
  br i1 %361, label %362, label %_Z7vstore8Dv8_fmPU3AS1f.exit14.i

; <label>:362                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit15.i
  %363 = bitcast float addrspace(1)* %327 to i8*
  %364 = getelementptr i8* %363, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %364, i16 255, <16 x float> %357, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit14.i

_Z7vstore8Dv8_fmPU3AS1f.exit14.i:                 ; preds = %362, %_Z7vstore8Dv8_fmPU3AS1f.exit15.i
  %365 = shufflevector <8 x float> %312, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %366 = bitcast float addrspace(1)* %328 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %366, i16 255, <16 x float> %365, i32 0, i32 0) nounwind
  %367 = ptrtoint float addrspace(1)* %328 to i64
  %368 = and i64 %367, 63
  %369 = icmp ugt i64 %368, 32
  br i1 %369, label %370, label %_Z7vstore8Dv8_fmPU3AS1f.exit13.i

; <label>:370                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit14.i
  %371 = bitcast float addrspace(1)* %328 to i8*
  %372 = getelementptr i8* %371, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %372, i16 255, <16 x float> %365, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit13.i

_Z7vstore8Dv8_fmPU3AS1f.exit13.i:                 ; preds = %370, %_Z7vstore8Dv8_fmPU3AS1f.exit14.i
  %373 = shufflevector <8 x float> %313, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %374 = bitcast float addrspace(1)* %329 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %374, i16 255, <16 x float> %373, i32 0, i32 0) nounwind
  %375 = ptrtoint float addrspace(1)* %329 to i64
  %376 = and i64 %375, 63
  %377 = icmp ugt i64 %376, 32
  br i1 %377, label %378, label %_Z7vstore8Dv8_fmPU3AS1f.exit12.i

; <label>:378                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit13.i
  %379 = bitcast float addrspace(1)* %329 to i8*
  %380 = getelementptr i8* %379, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %380, i16 255, <16 x float> %373, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit12.i

_Z7vstore8Dv8_fmPU3AS1f.exit12.i:                 ; preds = %378, %_Z7vstore8Dv8_fmPU3AS1f.exit13.i
  %381 = shufflevector <8 x float> %314, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %382 = bitcast float addrspace(1)* %330 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %382, i16 255, <16 x float> %381, i32 0, i32 0) nounwind
  %383 = ptrtoint float addrspace(1)* %330 to i64
  %384 = and i64 %383, 63
  %385 = icmp ugt i64 %384, 32
  br i1 %385, label %386, label %_Z7vstore8Dv8_fmPU3AS1f.exit11.i

; <label>:386                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit12.i
  %387 = bitcast float addrspace(1)* %330 to i8*
  %388 = getelementptr i8* %387, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %388, i16 255, <16 x float> %381, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit11.i

_Z7vstore8Dv8_fmPU3AS1f.exit11.i:                 ; preds = %386, %_Z7vstore8Dv8_fmPU3AS1f.exit12.i
  %389 = shufflevector <8 x float> %315, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %390 = bitcast float addrspace(1)* %331 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %390, i16 255, <16 x float> %389, i32 0, i32 0) nounwind
  %391 = ptrtoint float addrspace(1)* %331 to i64
  %392 = and i64 %391, 63
  %393 = icmp ugt i64 %392, 32
  br i1 %393, label %394, label %_Z7vstore8Dv8_fmPU3AS1f.exit10.i

; <label>:394                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit11.i
  %395 = bitcast float addrspace(1)* %331 to i8*
  %396 = getelementptr i8* %395, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %396, i16 255, <16 x float> %389, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit10.i

_Z7vstore8Dv8_fmPU3AS1f.exit10.i:                 ; preds = %394, %_Z7vstore8Dv8_fmPU3AS1f.exit11.i
  %397 = shufflevector <8 x float> %316, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %398 = bitcast float addrspace(1)* %332 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %398, i16 255, <16 x float> %397, i32 0, i32 0) nounwind
  %399 = ptrtoint float addrspace(1)* %332 to i64
  %400 = and i64 %399, 63
  %401 = icmp ugt i64 %400, 32
  br i1 %401, label %402, label %_Z7vstore8Dv8_fmPU3AS1f.exit9.i

; <label>:402                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit10.i
  %403 = bitcast float addrspace(1)* %332 to i8*
  %404 = getelementptr i8* %403, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %404, i16 255, <16 x float> %397, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit9.i

_Z7vstore8Dv8_fmPU3AS1f.exit9.i:                  ; preds = %402, %_Z7vstore8Dv8_fmPU3AS1f.exit10.i
  %405 = shufflevector <8 x float> %317, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %406 = bitcast float addrspace(1)* %333 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %406, i16 255, <16 x float> %405, i32 0, i32 0) nounwind
  %407 = ptrtoint float addrspace(1)* %333 to i64
  %408 = and i64 %407, 63
  %409 = icmp ugt i64 %408, 32
  br i1 %409, label %410, label %_Z7vstore8Dv8_fmPU3AS1f.exit8.i

; <label>:410                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit9.i
  %411 = bitcast float addrspace(1)* %333 to i8*
  %412 = getelementptr i8* %411, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %412, i16 255, <16 x float> %405, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit8.i

_Z7vstore8Dv8_fmPU3AS1f.exit8.i:                  ; preds = %410, %_Z7vstore8Dv8_fmPU3AS1f.exit9.i
  %413 = shufflevector <8 x float> %318, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %414 = bitcast float addrspace(1)* %334 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %414, i16 255, <16 x float> %413, i32 0, i32 0) nounwind
  %415 = ptrtoint float addrspace(1)* %334 to i64
  %416 = and i64 %415, 63
  %417 = icmp ugt i64 %416, 32
  br i1 %417, label %418, label %_Z7vstore8Dv8_fmPU3AS1f.exit7.i

; <label>:418                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit8.i
  %419 = bitcast float addrspace(1)* %334 to i8*
  %420 = getelementptr i8* %419, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %420, i16 255, <16 x float> %413, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit7.i

_Z7vstore8Dv8_fmPU3AS1f.exit7.i:                  ; preds = %418, %_Z7vstore8Dv8_fmPU3AS1f.exit8.i
  %421 = shufflevector <8 x float> %319, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %422 = bitcast float addrspace(1)* %335 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %422, i16 255, <16 x float> %421, i32 0, i32 0) nounwind
  %423 = ptrtoint float addrspace(1)* %335 to i64
  %424 = and i64 %423, 63
  %425 = icmp ugt i64 %424, 32
  br i1 %425, label %426, label %_Z7vstore8Dv8_fmPU3AS1f.exit6.i

; <label>:426                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit7.i
  %427 = bitcast float addrspace(1)* %335 to i8*
  %428 = getelementptr i8* %427, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %428, i16 255, <16 x float> %421, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit6.i

_Z7vstore8Dv8_fmPU3AS1f.exit6.i:                  ; preds = %426, %_Z7vstore8Dv8_fmPU3AS1f.exit7.i
  %429 = shufflevector <8 x float> %320, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %430 = bitcast float addrspace(1)* %336 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %430, i16 255, <16 x float> %429, i32 0, i32 0) nounwind
  %431 = ptrtoint float addrspace(1)* %336 to i64
  %432 = and i64 %431, 63
  %433 = icmp ugt i64 %432, 32
  br i1 %433, label %434, label %_Z7vstore8Dv8_fmPU3AS1f.exit5.i

; <label>:434                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit6.i
  %435 = bitcast float addrspace(1)* %336 to i8*
  %436 = getelementptr i8* %435, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %436, i16 255, <16 x float> %429, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit5.i

_Z7vstore8Dv8_fmPU3AS1f.exit5.i:                  ; preds = %434, %_Z7vstore8Dv8_fmPU3AS1f.exit6.i
  %437 = shufflevector <8 x float> %321, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %438 = bitcast float addrspace(1)* %337 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %438, i16 255, <16 x float> %437, i32 0, i32 0) nounwind
  %439 = ptrtoint float addrspace(1)* %337 to i64
  %440 = and i64 %439, 63
  %441 = icmp ugt i64 %440, 32
  br i1 %441, label %442, label %_Z7vstore8Dv8_fmPU3AS1f.exit4.i

; <label>:442                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit5.i
  %443 = bitcast float addrspace(1)* %337 to i8*
  %444 = getelementptr i8* %443, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %444, i16 255, <16 x float> %437, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit4.i

_Z7vstore8Dv8_fmPU3AS1f.exit4.i:                  ; preds = %442, %_Z7vstore8Dv8_fmPU3AS1f.exit5.i
  %445 = shufflevector <8 x float> %322, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %446 = bitcast float addrspace(1)* %338 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %446, i16 255, <16 x float> %445, i32 0, i32 0) nounwind
  %447 = ptrtoint float addrspace(1)* %338 to i64
  %448 = and i64 %447, 63
  %449 = icmp ugt i64 %448, 32
  br i1 %449, label %450, label %_Z7vstore8Dv8_fmPU3AS1f.exit3.i

; <label>:450                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit4.i
  %451 = bitcast float addrspace(1)* %338 to i8*
  %452 = getelementptr i8* %451, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %452, i16 255, <16 x float> %445, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit3.i

_Z7vstore8Dv8_fmPU3AS1f.exit3.i:                  ; preds = %450, %_Z7vstore8Dv8_fmPU3AS1f.exit4.i
  %453 = shufflevector <8 x float> %323, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %454 = bitcast float addrspace(1)* %339 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %454, i16 255, <16 x float> %453, i32 0, i32 0) nounwind
  %455 = ptrtoint float addrspace(1)* %339 to i64
  %456 = and i64 %455, 63
  %457 = icmp ugt i64 %456, 32
  br i1 %457, label %458, label %_Z7vstore8Dv8_fmPU3AS1f.exit2.i

; <label>:458                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit3.i
  %459 = bitcast float addrspace(1)* %339 to i8*
  %460 = getelementptr i8* %459, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %460, i16 255, <16 x float> %453, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit2.i

_Z7vstore8Dv8_fmPU3AS1f.exit2.i:                  ; preds = %458, %_Z7vstore8Dv8_fmPU3AS1f.exit3.i
  %461 = shufflevector <8 x float> %324, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %462 = bitcast float addrspace(1)* %340 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %462, i16 255, <16 x float> %461, i32 0, i32 0) nounwind
  %463 = ptrtoint float addrspace(1)* %340 to i64
  %464 = and i64 %463, 63
  %465 = icmp ugt i64 %464, 32
  br i1 %465, label %466, label %_Z7vstore8Dv8_fmPU3AS1f.exit1.i

; <label>:466                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit2.i
  %467 = bitcast float addrspace(1)* %340 to i8*
  %468 = getelementptr i8* %467, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %468, i16 255, <16 x float> %461, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit1.i

_Z7vstore8Dv8_fmPU3AS1f.exit1.i:                  ; preds = %466, %_Z7vstore8Dv8_fmPU3AS1f.exit2.i
  %Strided.add.i = add <16 x i64> %27, %vector.i
  %lsr.iv.next6 = add i64 %lsr.iv5, -1
  %dim_0_vector_cmp.to.max.i = icmp eq i64 %lsr.iv.next6, 0
  br i1 %dim_0_vector_cmp.to.max.i, label %dim_0_vector_exit.i, label %26

dim_0_vector_exit.i:                              ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit1.i
  %dim_1_vector_inc_ind_var.i = add nuw nsw i64 %dim_1_vector_ind_var.i, 1
  %dim_1_vector_inc_tid.i = add nuw nsw i64 %dim_1_vector_tid.i, 1
  %dim_1_vector_cmp.to.max.i = icmp eq i64 %dim_1_vector_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_vector_cmp.to.max.i, label %scalarIf.i, label %dim_0_vector_pre_head.i

scalarIf.i:                                       ; preds = %dim_0_vector_exit.i, %wrapper_entry
  %469 = icmp eq i64 %LocalSize_0, %num.vector.wi.i
  br i1 %469, label %__read_8_separated_args.exit, label %dim_0_pre_head.i.preheader

dim_0_pre_head.i.preheader:                       ; preds = %scalarIf.i
  %470 = sub i64 %LocalSize_0, %num.vector.wi.i
  %471 = mul i64 %LocalSize_1, %GroupID_1
  %472 = add i64 %GlobalOffset_1, %471
  %473 = trunc i64 %472 to i32
  %474 = mul i32 %explicit_2, %473
  %475 = add i64 %GlobalOffset_0, %num.vector.wi.i
  %476 = mul i64 %LocalSize_0, %GroupID_0
  %477 = add i64 %475, %476
  %478 = mul i64 %477, 8
  %479 = trunc i64 %478 to i32
  %480 = add i32 %474, %479
  br label %dim_0_pre_head.i

dim_0_pre_head.i:                                 ; preds = %dim_0_pre_head.i.preheader, %dim_0_exit.i
  %lsr.iv1 = phi i32 [ %480, %dim_0_pre_head.i.preheader ], [ %lsr.iv.next2, %dim_0_exit.i ]
  %dim_1_ind_var.i = phi i64 [ %dim_1_inc_ind_var.i, %dim_0_exit.i ], [ 0, %dim_0_pre_head.i.preheader ]
  br label %scalar_kernel_entry.i

scalar_kernel_entry.i:                            ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit.i, %dim_0_pre_head.i
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %_Z7vstore8Dv8_fmPU3AS1f.exit.i ], [ %lsr.iv1, %dim_0_pre_head.i ]
  %lsr.iv = phi i64 [ %lsr.iv.next, %_Z7vstore8Dv8_fmPU3AS1f.exit.i ], [ %470, %dim_0_pre_head.i ]
  %481 = sext i32 %lsr.iv3 to i64
  %482 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %481
  %483 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %484 = bitcast float addrspace(1)* %482 to i8*
  %485 = call <16 x float> @llvm.x86.mic.mask.loadunpackl.ps(<16 x float> %483, i16 255, i8* %484, i32 0, i32 0) nounwind
  %486 = ptrtoint float addrspace(1)* %482 to i64
  %487 = and i64 %486, 63
  %488 = icmp ugt i64 %487, 32
  br i1 %488, label %489, label %_Z6vload8mPKU3AS1f.exit.i

; <label>:489                                     ; preds = %scalar_kernel_entry.i
  %490 = bitcast float addrspace(1)* %482 to i8*
  %491 = getelementptr i8* %490, i64 64
  %492 = call <16 x float> @llvm.x86.mic.mask.loadunpackh.ps(<16 x float> %485, i16 255, i8* %491, i32 0, i32 0) nounwind
  br label %_Z6vload8mPKU3AS1f.exit.i

_Z6vload8mPKU3AS1f.exit.i:                        ; preds = %489, %scalar_kernel_entry.i
  %ret.0.i.i.i = phi <16 x float> [ %492, %489 ], [ %485, %scalar_kernel_entry.i ]
  %493 = shufflevector <16 x float> %ret.0.i.i.i, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %494 = fadd <8 x float> %493, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %495 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %481
  %496 = shufflevector <8 x float> %494, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %497 = bitcast float addrspace(1)* %495 to i8*
  call void @llvm.x86.mic.mask.packstorel.ps(i8* %497, i16 255, <16 x float> %496, i32 0, i32 0) nounwind
  %498 = ptrtoint float addrspace(1)* %495 to i64
  %499 = and i64 %498, 63
  %500 = icmp ugt i64 %499, 32
  br i1 %500, label %501, label %_Z7vstore8Dv8_fmPU3AS1f.exit.i

; <label>:501                                     ; preds = %_Z6vload8mPKU3AS1f.exit.i
  %502 = bitcast float addrspace(1)* %495 to i8*
  %503 = getelementptr i8* %502, i64 64
  call void @llvm.x86.mic.mask.packstoreh.ps(i8* %503, i16 255, <16 x float> %496, i32 0, i32 0) nounwind
  br label %_Z7vstore8Dv8_fmPU3AS1f.exit.i

_Z7vstore8Dv8_fmPU3AS1f.exit.i:                   ; preds = %501, %_Z6vload8mPKU3AS1f.exit.i
  %504 = trunc i64 %481 to i32
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next4 = add i32 %504, 8
  %dim_0_cmp.to.max.i = icmp eq i64 %lsr.iv.next, 0
  br i1 %dim_0_cmp.to.max.i, label %dim_0_exit.i, label %scalar_kernel_entry.i

dim_0_exit.i:                                     ; preds = %_Z7vstore8Dv8_fmPU3AS1f.exit.i
  %dim_1_inc_ind_var.i = add nuw nsw i64 %dim_1_ind_var.i, 1
  %lsr.iv.next2 = add i32 %lsr.iv1, %explicit_2
  %dim_1_cmp.to.max.i = icmp eq i64 %dim_1_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_cmp.to.max.i, label %__read_8_separated_args.exit, label %dim_0_pre_head.i

__read_8_separated_args.exit:                     ; preds = %dim_0_exit.i, %scalarIf.i
  ret void
}

define void @read_16(i8* %pUniformArgs, i64* %pWGId, {}* %RuntimeContext) {
wrapper_entry:
  %0 = bitcast i8* %pUniformArgs to float addrspace(1)**
  %explicit_0 = load float addrspace(1)** %0, align 8
  %1 = getelementptr i8* %pUniformArgs, i64 8
  %2 = bitcast i8* %1 to float addrspace(1)**
  %explicit_1 = load float addrspace(1)** %2, align 8
  %3 = getelementptr i8* %pUniformArgs, i64 16
  %4 = bitcast i8* %3 to i32*
  %explicit_2 = load i32* %4, align 4
  %5 = getelementptr i8* %pUniformArgs, i64 80
  %6 = bitcast i8* %5 to i64*
  %LocalSize_0 = load i64* %6, align 8
  %7 = getelementptr i8* %pUniformArgs, i64 88
  %8 = bitcast i8* %7 to i64*
  %LocalSize_1 = load i64* %8, align 8
  %9 = getelementptr i8* %pUniformArgs, i64 32
  %10 = bitcast i8* %9 to i64*
  %GlobalOffset_0 = load i64* %10, align 8
  %11 = getelementptr i8* %pUniformArgs, i64 40
  %12 = bitcast i8* %11 to i64*
  %GlobalOffset_1 = load i64* %12, align 8
  %GroupID_0 = load i64* %pWGId, align 8
  %13 = getelementptr i64* %pWGId, i64 1
  %GroupID_1 = load i64* %13, align 8
  %14 = mul i64 %LocalSize_0, %GroupID_0
  %15 = add i64 %14, %GlobalOffset_0
  %16 = mul i64 %LocalSize_1, %GroupID_1
  %17 = add i64 %16, %GlobalOffset_1
  %vector.size.i = ashr i64 %LocalSize_0, 4
  %num.vector.wi.i = and i64 %LocalSize_0, -16
  %18 = icmp eq i64 %vector.size.i, 0
  br i1 %18, label %scalarIf.i, label %dim_1_vector_pre_head.i

dim_1_vector_pre_head.i:                          ; preds = %wrapper_entry
  %tempvector_func.i = insertelement <16 x i64> undef, i64 %15, i32 0
  %vectorvector_func.i = shufflevector <16 x i64> %tempvector_func.i, <16 x i64> undef, <16 x i32> zeroinitializer
  %19 = add <16 x i64> %vectorvector_func.i, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %20 = shl <16 x i64> %19, <i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4>
  %21 = trunc <16 x i64> %20 to <16 x i32>
  br label %dim_0_vector_pre_head.i

dim_0_vector_pre_head.i:                          ; preds = %dim_0_vector_exit.i, %dim_1_vector_pre_head.i
  %dim_1_vector_ind_var.i = phi i64 [ 0, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_ind_var.i, %dim_0_vector_exit.i ]
  %dim_1_vector_tid.i = phi i64 [ %17, %dim_1_vector_pre_head.i ], [ %dim_1_vector_inc_tid.i, %dim_0_vector_exit.i ]
  %22 = trunc i64 %dim_1_vector_tid.i to i32
  %23 = mul nsw i32 %22, %explicit_2
  %temp32vector_func.i = insertelement <16 x i32> undef, i32 %23, i32 0
  %vector31vector_func.i = shufflevector <16 x i32> %temp32vector_func.i, <16 x i32> undef, <16 x i32> zeroinitializer
  %24 = add nsw <16 x i32> %vector31vector_func.i, %21
  %25 = sext <16 x i32> %24 to <16 x i64>
  %extract.0.i = extractelement <16 x i64> %25, i32 0
  %extract.01.i = extractelement <16 x i64> %25, i32 1
  %sub.delta.i = sub i64 %extract.01.i, %extract.0.i
  %mul.delta.i = shl i64 %sub.delta.i, 4
  %temp.i = insertelement <16 x i64> undef, i64 %mul.delta.i, i32 0
  %vector.i = shufflevector <16 x i64> %temp.i, <16 x i64> undef, <16 x i32> zeroinitializer
  br label %26

; <label>:26                                      ; preds = %26, %dim_0_vector_pre_head.i
  %lsr.iv5 = phi i64 [ %lsr.iv.next6, %26 ], [ %vector.size.i, %dim_0_vector_pre_head.i ]
  %27 = phi <16 x i64> [ %25, %dim_0_vector_pre_head.i ], [ %Strided.add.i, %26 ]
  %extractvector_func.i = extractelement <16 x i64> %27, i32 0
  %extract33vector_func.i = extractelement <16 x i64> %27, i32 1
  %extract34vector_func.i = extractelement <16 x i64> %27, i32 2
  %extract35vector_func.i = extractelement <16 x i64> %27, i32 3
  %extract36vector_func.i = extractelement <16 x i64> %27, i32 4
  %extract37vector_func.i = extractelement <16 x i64> %27, i32 5
  %extract38vector_func.i = extractelement <16 x i64> %27, i32 6
  %extract39vector_func.i = extractelement <16 x i64> %27, i32 7
  %extract40vector_func.i = extractelement <16 x i64> %27, i32 8
  %extract41vector_func.i = extractelement <16 x i64> %27, i32 9
  %extract42vector_func.i = extractelement <16 x i64> %27, i32 10
  %extract43vector_func.i = extractelement <16 x i64> %27, i32 11
  %extract44vector_func.i = extractelement <16 x i64> %27, i32 12
  %extract45vector_func.i = extractelement <16 x i64> %27, i32 13
  %extract46vector_func.i = extractelement <16 x i64> %27, i32 14
  %extract47vector_func.i = extractelement <16 x i64> %27, i32 15
  %28 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extractvector_func.i
  %29 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract33vector_func.i
  %30 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract34vector_func.i
  %31 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract35vector_func.i
  %32 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract36vector_func.i
  %33 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract37vector_func.i
  %34 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract38vector_func.i
  %35 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract39vector_func.i
  %36 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract40vector_func.i
  %37 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract41vector_func.i
  %38 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract42vector_func.i
  %39 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract43vector_func.i
  %40 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract44vector_func.i
  %41 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract45vector_func.i
  %42 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract46vector_func.i
  %43 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %extract47vector_func.i
  %44 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %45 = bitcast float addrspace(1)* %28 to i8*
  %46 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %45, i32 0, i32 0) nounwind
  %47 = getelementptr i8* %45, i64 64
  %48 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %46, i8* %47, i32 0, i32 0) nounwind
  %49 = bitcast float addrspace(1)* %29 to i8*
  %50 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %49, i32 0, i32 0) nounwind
  %51 = getelementptr i8* %49, i64 64
  %52 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %50, i8* %51, i32 0, i32 0) nounwind
  %53 = bitcast float addrspace(1)* %30 to i8*
  %54 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %53, i32 0, i32 0) nounwind
  %55 = getelementptr i8* %53, i64 64
  %56 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %54, i8* %55, i32 0, i32 0) nounwind
  %57 = bitcast float addrspace(1)* %31 to i8*
  %58 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %57, i32 0, i32 0) nounwind
  %59 = getelementptr i8* %57, i64 64
  %60 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %58, i8* %59, i32 0, i32 0) nounwind
  %61 = bitcast float addrspace(1)* %32 to i8*
  %62 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %61, i32 0, i32 0) nounwind
  %63 = getelementptr i8* %61, i64 64
  %64 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %62, i8* %63, i32 0, i32 0) nounwind
  %65 = bitcast float addrspace(1)* %33 to i8*
  %66 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %65, i32 0, i32 0) nounwind
  %67 = getelementptr i8* %65, i64 64
  %68 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %66, i8* %67, i32 0, i32 0) nounwind
  %69 = bitcast float addrspace(1)* %34 to i8*
  %70 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %69, i32 0, i32 0) nounwind
  %71 = getelementptr i8* %69, i64 64
  %72 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %70, i8* %71, i32 0, i32 0) nounwind
  %73 = bitcast float addrspace(1)* %35 to i8*
  %74 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %73, i32 0, i32 0) nounwind
  %75 = getelementptr i8* %73, i64 64
  %76 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %74, i8* %75, i32 0, i32 0) nounwind
  %77 = bitcast float addrspace(1)* %36 to i8*
  %78 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %77, i32 0, i32 0) nounwind
  %79 = getelementptr i8* %77, i64 64
  %80 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %78, i8* %79, i32 0, i32 0) nounwind
  %81 = bitcast float addrspace(1)* %37 to i8*
  %82 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %81, i32 0, i32 0) nounwind
  %83 = getelementptr i8* %81, i64 64
  %84 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %82, i8* %83, i32 0, i32 0) nounwind
  %85 = bitcast float addrspace(1)* %38 to i8*
  %86 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %85, i32 0, i32 0) nounwind
  %87 = getelementptr i8* %85, i64 64
  %88 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %86, i8* %87, i32 0, i32 0) nounwind
  %89 = bitcast float addrspace(1)* %39 to i8*
  %90 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %89, i32 0, i32 0) nounwind
  %91 = getelementptr i8* %89, i64 64
  %92 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %90, i8* %91, i32 0, i32 0) nounwind
  %93 = bitcast float addrspace(1)* %40 to i8*
  %94 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %93, i32 0, i32 0) nounwind
  %95 = getelementptr i8* %93, i64 64
  %96 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %94, i8* %95, i32 0, i32 0) nounwind
  %97 = bitcast float addrspace(1)* %41 to i8*
  %98 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %97, i32 0, i32 0) nounwind
  %99 = getelementptr i8* %97, i64 64
  %100 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %98, i8* %99, i32 0, i32 0) nounwind
  %101 = bitcast float addrspace(1)* %42 to i8*
  %102 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %101, i32 0, i32 0) nounwind
  %103 = getelementptr i8* %101, i64 64
  %104 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %102, i8* %103, i32 0, i32 0) nounwind
  %105 = bitcast float addrspace(1)* %43 to i8*
  %106 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %44, i8* %105, i32 0, i32 0) nounwind
  %107 = getelementptr i8* %105, i64 64
  %108 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %106, i8* %107, i32 0, i32 0) nounwind
  %temp.vect48vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect49vector_func.i = shufflevector <16 x float> %temp.vect48vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect50vector_func.i = shufflevector <16 x float> %temp.vect49vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect51vector_func.i = shufflevector <16 x float> %temp.vect50vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect52vector_func.i = shufflevector <16 x float> %temp.vect51vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect53vector_func.i = shufflevector <16 x float> %temp.vect52vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect54vector_func.i = shufflevector <16 x float> %temp.vect53vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect55vector_func.i = shufflevector <16 x float> %temp.vect54vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect56vector_func.i = shufflevector <16 x float> %temp.vect55vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect57vector_func.i = shufflevector <16 x float> %temp.vect56vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect58vector_func.i = shufflevector <16 x float> %temp.vect57vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect59vector_func.i = shufflevector <16 x float> %temp.vect58vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 undef, i32 undef, i32 undef>
  %temp.vect60vector_func.i = shufflevector <16 x float> %temp.vect59vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 undef, i32 undef>
  %temp.vect61vector_func.i = shufflevector <16 x float> %temp.vect60vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 undef>
  %temp.vect62vector_func.i = shufflevector <16 x float> %temp.vect61vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>
  %temp.vect64vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect65vector_func.i = shufflevector <16 x float> %temp.vect64vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect66vector_func.i = shufflevector <16 x float> %temp.vect65vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect67vector_func.i = shufflevector <16 x float> %temp.vect66vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect68vector_func.i = shufflevector <16 x float> %temp.vect67vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect69vector_func.i = shufflevector <16 x float> %temp.vect68vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect70vector_func.i = shufflevector <16 x float> %temp.vect69vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect71vector_func.i = shufflevector <16 x float> %temp.vect70vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect72vector_func.i = shufflevector <16 x float> %temp.vect71vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect73vector_func.i = shufflevector <16 x float> %temp.vect72vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect74vector_func.i = shufflevector <16 x float> %temp.vect73vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect75vector_func.i = shufflevector <16 x float> %temp.vect74vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 17, i32 undef, i32 undef, i32 undef>
  %temp.vect76vector_func.i = shufflevector <16 x float> %temp.vect75vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 undef, i32 undef>
  %temp.vect77vector_func.i = shufflevector <16 x float> %temp.vect76vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 17, i32 undef>
  %temp.vect78vector_func.i = shufflevector <16 x float> %temp.vect77vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>
  %temp.vect80vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect81vector_func.i = shufflevector <16 x float> %temp.vect80vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect82vector_func.i = shufflevector <16 x float> %temp.vect81vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect83vector_func.i = shufflevector <16 x float> %temp.vect82vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect84vector_func.i = shufflevector <16 x float> %temp.vect83vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect85vector_func.i = shufflevector <16 x float> %temp.vect84vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect86vector_func.i = shufflevector <16 x float> %temp.vect85vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect87vector_func.i = shufflevector <16 x float> %temp.vect86vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect88vector_func.i = shufflevector <16 x float> %temp.vect87vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect89vector_func.i = shufflevector <16 x float> %temp.vect88vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect90vector_func.i = shufflevector <16 x float> %temp.vect89vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 18, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect91vector_func.i = shufflevector <16 x float> %temp.vect90vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 18, i32 undef, i32 undef, i32 undef>
  %temp.vect92vector_func.i = shufflevector <16 x float> %temp.vect91vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 18, i32 undef, i32 undef>
  %temp.vect93vector_func.i = shufflevector <16 x float> %temp.vect92vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 18, i32 undef>
  %temp.vect94vector_func.i = shufflevector <16 x float> %temp.vect93vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 18>
  %temp.vect96vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect97vector_func.i = shufflevector <16 x float> %temp.vect96vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect98vector_func.i = shufflevector <16 x float> %temp.vect97vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect99vector_func.i = shufflevector <16 x float> %temp.vect98vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect100vector_func.i = shufflevector <16 x float> %temp.vect99vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect101vector_func.i = shufflevector <16 x float> %temp.vect100vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect102vector_func.i = shufflevector <16 x float> %temp.vect101vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect103vector_func.i = shufflevector <16 x float> %temp.vect102vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect104vector_func.i = shufflevector <16 x float> %temp.vect103vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect105vector_func.i = shufflevector <16 x float> %temp.vect104vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect106vector_func.i = shufflevector <16 x float> %temp.vect105vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect107vector_func.i = shufflevector <16 x float> %temp.vect106vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 undef, i32 undef, i32 undef>
  %temp.vect108vector_func.i = shufflevector <16 x float> %temp.vect107vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 19, i32 undef, i32 undef>
  %temp.vect109vector_func.i = shufflevector <16 x float> %temp.vect108vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 19, i32 undef>
  %temp.vect110vector_func.i = shufflevector <16 x float> %temp.vect109vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 19>
  %temp.vect112vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect113vector_func.i = shufflevector <16 x float> %temp.vect112vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect114vector_func.i = shufflevector <16 x float> %temp.vect113vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect115vector_func.i = shufflevector <16 x float> %temp.vect114vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect116vector_func.i = shufflevector <16 x float> %temp.vect115vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect117vector_func.i = shufflevector <16 x float> %temp.vect116vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect118vector_func.i = shufflevector <16 x float> %temp.vect117vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect119vector_func.i = shufflevector <16 x float> %temp.vect118vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect120vector_func.i = shufflevector <16 x float> %temp.vect119vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect121vector_func.i = shufflevector <16 x float> %temp.vect120vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect122vector_func.i = shufflevector <16 x float> %temp.vect121vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 20, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect123vector_func.i = shufflevector <16 x float> %temp.vect122vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 20, i32 undef, i32 undef, i32 undef>
  %temp.vect124vector_func.i = shufflevector <16 x float> %temp.vect123vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 20, i32 undef, i32 undef>
  %temp.vect125vector_func.i = shufflevector <16 x float> %temp.vect124vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 20, i32 undef>
  %temp.vect126vector_func.i = shufflevector <16 x float> %temp.vect125vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 20>
  %temp.vect128vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect129vector_func.i = shufflevector <16 x float> %temp.vect128vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect130vector_func.i = shufflevector <16 x float> %temp.vect129vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect131vector_func.i = shufflevector <16 x float> %temp.vect130vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect132vector_func.i = shufflevector <16 x float> %temp.vect131vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect133vector_func.i = shufflevector <16 x float> %temp.vect132vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect134vector_func.i = shufflevector <16 x float> %temp.vect133vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect135vector_func.i = shufflevector <16 x float> %temp.vect134vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect136vector_func.i = shufflevector <16 x float> %temp.vect135vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect137vector_func.i = shufflevector <16 x float> %temp.vect136vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect138vector_func.i = shufflevector <16 x float> %temp.vect137vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 21, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect139vector_func.i = shufflevector <16 x float> %temp.vect138vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 21, i32 undef, i32 undef, i32 undef>
  %temp.vect140vector_func.i = shufflevector <16 x float> %temp.vect139vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 21, i32 undef, i32 undef>
  %temp.vect141vector_func.i = shufflevector <16 x float> %temp.vect140vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 21, i32 undef>
  %temp.vect142vector_func.i = shufflevector <16 x float> %temp.vect141vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 21>
  %temp.vect144vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect145vector_func.i = shufflevector <16 x float> %temp.vect144vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect146vector_func.i = shufflevector <16 x float> %temp.vect145vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect147vector_func.i = shufflevector <16 x float> %temp.vect146vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect148vector_func.i = shufflevector <16 x float> %temp.vect147vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect149vector_func.i = shufflevector <16 x float> %temp.vect148vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect150vector_func.i = shufflevector <16 x float> %temp.vect149vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect151vector_func.i = shufflevector <16 x float> %temp.vect150vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect152vector_func.i = shufflevector <16 x float> %temp.vect151vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect153vector_func.i = shufflevector <16 x float> %temp.vect152vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect154vector_func.i = shufflevector <16 x float> %temp.vect153vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 22, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect155vector_func.i = shufflevector <16 x float> %temp.vect154vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 22, i32 undef, i32 undef, i32 undef>
  %temp.vect156vector_func.i = shufflevector <16 x float> %temp.vect155vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 22, i32 undef, i32 undef>
  %temp.vect157vector_func.i = shufflevector <16 x float> %temp.vect156vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 22, i32 undef>
  %temp.vect158vector_func.i = shufflevector <16 x float> %temp.vect157vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 22>
  %temp.vect160vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect161vector_func.i = shufflevector <16 x float> %temp.vect160vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect162vector_func.i = shufflevector <16 x float> %temp.vect161vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect163vector_func.i = shufflevector <16 x float> %temp.vect162vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect164vector_func.i = shufflevector <16 x float> %temp.vect163vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect165vector_func.i = shufflevector <16 x float> %temp.vect164vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect166vector_func.i = shufflevector <16 x float> %temp.vect165vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect167vector_func.i = shufflevector <16 x float> %temp.vect166vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect168vector_func.i = shufflevector <16 x float> %temp.vect167vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect169vector_func.i = shufflevector <16 x float> %temp.vect168vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect170vector_func.i = shufflevector <16 x float> %temp.vect169vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 23, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect171vector_func.i = shufflevector <16 x float> %temp.vect170vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 23, i32 undef, i32 undef, i32 undef>
  %temp.vect172vector_func.i = shufflevector <16 x float> %temp.vect171vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 23, i32 undef, i32 undef>
  %temp.vect173vector_func.i = shufflevector <16 x float> %temp.vect172vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 23, i32 undef>
  %temp.vect174vector_func.i = shufflevector <16 x float> %temp.vect173vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 23>
  %temp.vect176vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 8, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect177vector_func.i = shufflevector <16 x float> %temp.vect176vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect178vector_func.i = shufflevector <16 x float> %temp.vect177vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect179vector_func.i = shufflevector <16 x float> %temp.vect178vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect180vector_func.i = shufflevector <16 x float> %temp.vect179vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect181vector_func.i = shufflevector <16 x float> %temp.vect180vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect182vector_func.i = shufflevector <16 x float> %temp.vect181vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect183vector_func.i = shufflevector <16 x float> %temp.vect182vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect184vector_func.i = shufflevector <16 x float> %temp.vect183vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect185vector_func.i = shufflevector <16 x float> %temp.vect184vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect186vector_func.i = shufflevector <16 x float> %temp.vect185vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 24, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect187vector_func.i = shufflevector <16 x float> %temp.vect186vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 24, i32 undef, i32 undef, i32 undef>
  %temp.vect188vector_func.i = shufflevector <16 x float> %temp.vect187vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 24, i32 undef, i32 undef>
  %temp.vect189vector_func.i = shufflevector <16 x float> %temp.vect188vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 24, i32 undef>
  %temp.vect190vector_func.i = shufflevector <16 x float> %temp.vect189vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 24>
  %temp.vect192vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 9, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect193vector_func.i = shufflevector <16 x float> %temp.vect192vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect194vector_func.i = shufflevector <16 x float> %temp.vect193vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect195vector_func.i = shufflevector <16 x float> %temp.vect194vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect196vector_func.i = shufflevector <16 x float> %temp.vect195vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect197vector_func.i = shufflevector <16 x float> %temp.vect196vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect198vector_func.i = shufflevector <16 x float> %temp.vect197vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect199vector_func.i = shufflevector <16 x float> %temp.vect198vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect200vector_func.i = shufflevector <16 x float> %temp.vect199vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect201vector_func.i = shufflevector <16 x float> %temp.vect200vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect202vector_func.i = shufflevector <16 x float> %temp.vect201vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 25, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect203vector_func.i = shufflevector <16 x float> %temp.vect202vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 undef, i32 undef, i32 undef>
  %temp.vect204vector_func.i = shufflevector <16 x float> %temp.vect203vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 25, i32 undef, i32 undef>
  %temp.vect205vector_func.i = shufflevector <16 x float> %temp.vect204vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 undef>
  %temp.vect206vector_func.i = shufflevector <16 x float> %temp.vect205vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 25>
  %temp.vect208vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 10, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect209vector_func.i = shufflevector <16 x float> %temp.vect208vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect210vector_func.i = shufflevector <16 x float> %temp.vect209vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect211vector_func.i = shufflevector <16 x float> %temp.vect210vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect212vector_func.i = shufflevector <16 x float> %temp.vect211vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect213vector_func.i = shufflevector <16 x float> %temp.vect212vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect214vector_func.i = shufflevector <16 x float> %temp.vect213vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect215vector_func.i = shufflevector <16 x float> %temp.vect214vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect216vector_func.i = shufflevector <16 x float> %temp.vect215vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect217vector_func.i = shufflevector <16 x float> %temp.vect216vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect218vector_func.i = shufflevector <16 x float> %temp.vect217vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 26, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect219vector_func.i = shufflevector <16 x float> %temp.vect218vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 26, i32 undef, i32 undef, i32 undef>
  %temp.vect220vector_func.i = shufflevector <16 x float> %temp.vect219vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 26, i32 undef, i32 undef>
  %temp.vect221vector_func.i = shufflevector <16 x float> %temp.vect220vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 26, i32 undef>
  %temp.vect222vector_func.i = shufflevector <16 x float> %temp.vect221vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 26>
  %temp.vect224vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect225vector_func.i = shufflevector <16 x float> %temp.vect224vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect226vector_func.i = shufflevector <16 x float> %temp.vect225vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect227vector_func.i = shufflevector <16 x float> %temp.vect226vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect228vector_func.i = shufflevector <16 x float> %temp.vect227vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect229vector_func.i = shufflevector <16 x float> %temp.vect228vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect230vector_func.i = shufflevector <16 x float> %temp.vect229vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect231vector_func.i = shufflevector <16 x float> %temp.vect230vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect232vector_func.i = shufflevector <16 x float> %temp.vect231vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect233vector_func.i = shufflevector <16 x float> %temp.vect232vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect234vector_func.i = shufflevector <16 x float> %temp.vect233vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 27, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect235vector_func.i = shufflevector <16 x float> %temp.vect234vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 27, i32 undef, i32 undef, i32 undef>
  %temp.vect236vector_func.i = shufflevector <16 x float> %temp.vect235vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 27, i32 undef, i32 undef>
  %temp.vect237vector_func.i = shufflevector <16 x float> %temp.vect236vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 27, i32 undef>
  %temp.vect238vector_func.i = shufflevector <16 x float> %temp.vect237vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 27>
  %temp.vect240vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 12, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect241vector_func.i = shufflevector <16 x float> %temp.vect240vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect242vector_func.i = shufflevector <16 x float> %temp.vect241vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect243vector_func.i = shufflevector <16 x float> %temp.vect242vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect244vector_func.i = shufflevector <16 x float> %temp.vect243vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect245vector_func.i = shufflevector <16 x float> %temp.vect244vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect246vector_func.i = shufflevector <16 x float> %temp.vect245vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect247vector_func.i = shufflevector <16 x float> %temp.vect246vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect248vector_func.i = shufflevector <16 x float> %temp.vect247vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect249vector_func.i = shufflevector <16 x float> %temp.vect248vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect250vector_func.i = shufflevector <16 x float> %temp.vect249vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 28, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect251vector_func.i = shufflevector <16 x float> %temp.vect250vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 undef, i32 undef, i32 undef>
  %temp.vect252vector_func.i = shufflevector <16 x float> %temp.vect251vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 28, i32 undef, i32 undef>
  %temp.vect253vector_func.i = shufflevector <16 x float> %temp.vect252vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 28, i32 undef>
  %temp.vect254vector_func.i = shufflevector <16 x float> %temp.vect253vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 28>
  %temp.vect256vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 13, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect257vector_func.i = shufflevector <16 x float> %temp.vect256vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect258vector_func.i = shufflevector <16 x float> %temp.vect257vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect259vector_func.i = shufflevector <16 x float> %temp.vect258vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect260vector_func.i = shufflevector <16 x float> %temp.vect259vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect261vector_func.i = shufflevector <16 x float> %temp.vect260vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect262vector_func.i = shufflevector <16 x float> %temp.vect261vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect263vector_func.i = shufflevector <16 x float> %temp.vect262vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect264vector_func.i = shufflevector <16 x float> %temp.vect263vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect265vector_func.i = shufflevector <16 x float> %temp.vect264vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect266vector_func.i = shufflevector <16 x float> %temp.vect265vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 29, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect267vector_func.i = shufflevector <16 x float> %temp.vect266vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 29, i32 undef, i32 undef, i32 undef>
  %temp.vect268vector_func.i = shufflevector <16 x float> %temp.vect267vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 29, i32 undef, i32 undef>
  %temp.vect269vector_func.i = shufflevector <16 x float> %temp.vect268vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 29, i32 undef>
  %temp.vect270vector_func.i = shufflevector <16 x float> %temp.vect269vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 29>
  %temp.vect272vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 14, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect273vector_func.i = shufflevector <16 x float> %temp.vect272vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect274vector_func.i = shufflevector <16 x float> %temp.vect273vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect275vector_func.i = shufflevector <16 x float> %temp.vect274vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect276vector_func.i = shufflevector <16 x float> %temp.vect275vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect277vector_func.i = shufflevector <16 x float> %temp.vect276vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect278vector_func.i = shufflevector <16 x float> %temp.vect277vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect279vector_func.i = shufflevector <16 x float> %temp.vect278vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect280vector_func.i = shufflevector <16 x float> %temp.vect279vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect281vector_func.i = shufflevector <16 x float> %temp.vect280vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect282vector_func.i = shufflevector <16 x float> %temp.vect281vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 30, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect283vector_func.i = shufflevector <16 x float> %temp.vect282vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 30, i32 undef, i32 undef, i32 undef>
  %temp.vect284vector_func.i = shufflevector <16 x float> %temp.vect283vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 30, i32 undef, i32 undef>
  %temp.vect285vector_func.i = shufflevector <16 x float> %temp.vect284vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 undef>
  %temp.vect286vector_func.i = shufflevector <16 x float> %temp.vect285vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 30>
  %temp.vect288vector_func.i = shufflevector <16 x float> %48, <16 x float> %52, <16 x i32> <i32 15, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect289vector_func.i = shufflevector <16 x float> %temp.vect288vector_func.i, <16 x float> %56, <16 x i32> <i32 0, i32 1, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect290vector_func.i = shufflevector <16 x float> %temp.vect289vector_func.i, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect291vector_func.i = shufflevector <16 x float> %temp.vect290vector_func.i, <16 x float> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect292vector_func.i = shufflevector <16 x float> %temp.vect291vector_func.i, <16 x float> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect293vector_func.i = shufflevector <16 x float> %temp.vect292vector_func.i, <16 x float> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect294vector_func.i = shufflevector <16 x float> %temp.vect293vector_func.i, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect295vector_func.i = shufflevector <16 x float> %temp.vect294vector_func.i, <16 x float> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect296vector_func.i = shufflevector <16 x float> %temp.vect295vector_func.i, <16 x float> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect297vector_func.i = shufflevector <16 x float> %temp.vect296vector_func.i, <16 x float> %88, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect298vector_func.i = shufflevector <16 x float> %temp.vect297vector_func.i, <16 x float> %92, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %temp.vect299vector_func.i = shufflevector <16 x float> %temp.vect298vector_func.i, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 31, i32 undef, i32 undef, i32 undef>
  %temp.vect300vector_func.i = shufflevector <16 x float> %temp.vect299vector_func.i, <16 x float> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 31, i32 undef, i32 undef>
  %temp.vect301vector_func.i = shufflevector <16 x float> %temp.vect300vector_func.i, <16 x float> %104, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 31, i32 undef>
  %temp.vect302vector_func.i = shufflevector <16 x float> %temp.vect301vector_func.i, <16 x float> %108, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 31>
  %109 = fadd <16 x float> %temp.vect62vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %110 = fadd <16 x float> %temp.vect78vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %111 = fadd <16 x float> %temp.vect94vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %112 = fadd <16 x float> %temp.vect110vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %113 = fadd <16 x float> %temp.vect126vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %114 = fadd <16 x float> %temp.vect142vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %115 = fadd <16 x float> %temp.vect158vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %116 = fadd <16 x float> %temp.vect174vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %117 = fadd <16 x float> %temp.vect190vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %118 = fadd <16 x float> %temp.vect206vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %119 = fadd <16 x float> %temp.vect222vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %120 = fadd <16 x float> %temp.vect238vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %121 = fadd <16 x float> %temp.vect254vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %122 = fadd <16 x float> %temp.vect270vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %123 = fadd <16 x float> %temp.vect286vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %124 = fadd <16 x float> %temp.vect302vector_func.i, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %125 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 0, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %127 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %129 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 8, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 9, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 10, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 12, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %138 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 13, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 14, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = shufflevector <16 x float> %109, <16 x float> %110, <16 x i32> <i32 15, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = shufflevector <16 x float> %125, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = shufflevector <16 x float> %126, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %143 = shufflevector <16 x float> %127, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %144 = shufflevector <16 x float> %128, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = shufflevector <16 x float> %129, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = shufflevector <16 x float> %130, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = shufflevector <16 x float> %131, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = shufflevector <16 x float> %132, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = shufflevector <16 x float> %133, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = shufflevector <16 x float> %134, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = shufflevector <16 x float> %135, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = shufflevector <16 x float> %136, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = shufflevector <16 x float> %137, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = shufflevector <16 x float> %138, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <16 x float> %139, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = shufflevector <16 x float> %140, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = shufflevector <16 x float> %141, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = shufflevector <16 x float> %142, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = shufflevector <16 x float> %143, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = shufflevector <16 x float> %144, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = shufflevector <16 x float> %145, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = shufflevector <16 x float> %146, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %163 = shufflevector <16 x float> %147, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = shufflevector <16 x float> %148, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %165 = shufflevector <16 x float> %149, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = shufflevector <16 x float> %150, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = shufflevector <16 x float> %151, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = shufflevector <16 x float> %152, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %169 = shufflevector <16 x float> %153, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = shufflevector <16 x float> %154, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = shufflevector <16 x float> %155, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = shufflevector <16 x float> %156, <16 x float> %112, <16 x i32> <i32 0, i32 1, i32 2, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %173 = shufflevector <16 x float> %157, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = shufflevector <16 x float> %158, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %175 = shufflevector <16 x float> %159, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = shufflevector <16 x float> %160, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %177 = shufflevector <16 x float> %161, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %178 = shufflevector <16 x float> %162, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = shufflevector <16 x float> %163, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = shufflevector <16 x float> %164, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = shufflevector <16 x float> %165, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = shufflevector <16 x float> %166, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = shufflevector <16 x float> %167, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = shufflevector <16 x float> %168, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = shufflevector <16 x float> %169, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = shufflevector <16 x float> %170, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = shufflevector <16 x float> %171, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %188 = shufflevector <16 x float> %172, <16 x float> %113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %189 = shufflevector <16 x float> %173, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %190 = shufflevector <16 x float> %174, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <16 x float> %175, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = shufflevector <16 x float> %176, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = shufflevector <16 x float> %177, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = shufflevector <16 x float> %178, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %195 = shufflevector <16 x float> %179, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = shufflevector <16 x float> %180, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = shufflevector <16 x float> %181, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %198 = shufflevector <16 x float> %182, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = shufflevector <16 x float> %183, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = shufflevector <16 x float> %184, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = shufflevector <16 x float> %185, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = shufflevector <16 x float> %186, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = shufflevector <16 x float> %187, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %204 = shufflevector <16 x float> %188, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = shufflevector <16 x float> %189, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = shufflevector <16 x float> %190, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = shufflevector <16 x float> %191, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %208 = shufflevector <16 x float> %192, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = shufflevector <16 x float> %193, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %210 = shufflevector <16 x float> %194, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = shufflevector <16 x float> %195, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %212 = shufflevector <16 x float> %196, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %213 = shufflevector <16 x float> %197, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %214 = shufflevector <16 x float> %198, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = shufflevector <16 x float> %199, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %216 = shufflevector <16 x float> %200, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %217 = shufflevector <16 x float> %201, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %218 = shufflevector <16 x float> %202, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = shufflevector <16 x float> %203, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %220 = shufflevector <16 x float> %204, <16 x float> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = shufflevector <16 x float> %205, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %222 = shufflevector <16 x float> %206, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = shufflevector <16 x float> %207, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %224 = shufflevector <16 x float> %208, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = shufflevector <16 x float> %209, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %226 = shufflevector <16 x float> %210, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %227 = shufflevector <16 x float> %211, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %228 = shufflevector <16 x float> %212, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %229 = shufflevector <16 x float> %213, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = shufflevector <16 x float> %214, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %231 = shufflevector <16 x float> %215, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = shufflevector <16 x float> %216, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %233 = shufflevector <16 x float> %217, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = shufflevector <16 x float> %218, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %235 = shufflevector <16 x float> %219, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = shufflevector <16 x float> %220, <16 x float> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = shufflevector <16 x float> %221, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %238 = shufflevector <16 x float> %222, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %239 = shufflevector <16 x float> %223, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %240 = shufflevector <16 x float> %224, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %241 = shufflevector <16 x float> %225, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %242 = shufflevector <16 x float> %226, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %243 = shufflevector <16 x float> %227, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = shufflevector <16 x float> %228, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %245 = shufflevector <16 x float> %229, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = shufflevector <16 x float> %230, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = shufflevector <16 x float> %231, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = shufflevector <16 x float> %232, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %249 = shufflevector <16 x float> %233, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %250 = shufflevector <16 x float> %234, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %251 = shufflevector <16 x float> %235, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = shufflevector <16 x float> %236, <16 x float> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %253 = shufflevector <16 x float> %237, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %254 = shufflevector <16 x float> %238, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %255 = shufflevector <16 x float> %239, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %256 = shufflevector <16 x float> %240, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %257 = shufflevector <16 x float> %241, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %258 = shufflevector <16 x float> %242, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %259 = shufflevector <16 x float> %243, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = shufflevector <16 x float> %244, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %261 = shufflevector <16 x float> %245, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %262 = shufflevector <16 x float> %246, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = shufflevector <16 x float> %247, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %264 = shufflevector <16 x float> %248, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %265 = shufflevector <16 x float> %249, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %266 = shufflevector <16 x float> %250, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = shufflevector <16 x float> %251, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %268 = shufflevector <16 x float> %252, <16 x float> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = shufflevector <16 x float> %253, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %270 = shufflevector <16 x float> %254, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %271 = shufflevector <16 x float> %255, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %272 = shufflevector <16 x float> %256, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %273 = shufflevector <16 x float> %257, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 20, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %274 = shufflevector <16 x float> %258, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 21, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %275 = shufflevector <16 x float> %259, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %276 = shufflevector <16 x float> %260, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 23, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %277 = shufflevector <16 x float> %261, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 24, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %278 = shufflevector <16 x float> %262, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 25, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = shufflevector <16 x float> %263, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 26, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %280 = shufflevector <16 x float> %264, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %281 = shufflevector <16 x float> %265, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 28, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %282 = shufflevector <16 x float> %266, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 29, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %283 = shufflevector <16 x float> %267, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 30, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = shufflevector <16 x float> %268, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %285 = shufflevector <16 x float> %269, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 undef, i32 undef, i32 undef, i32 undef>
  %286 = shufflevector <16 x float> %270, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 undef, i32 undef, i32 undef, i32 undef>
  %287 = shufflevector <16 x float> %271, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 18, i32 undef, i32 undef, i32 undef, i32 undef>
  %288 = shufflevector <16 x float> %272, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 19, i32 undef, i32 undef, i32 undef, i32 undef>
  %289 = shufflevector <16 x float> %273, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 20, i32 undef, i32 undef, i32 undef, i32 undef>
  %290 = shufflevector <16 x float> %274, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 21, i32 undef, i32 undef, i32 undef, i32 undef>
  %291 = shufflevector <16 x float> %275, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 22, i32 undef, i32 undef, i32 undef, i32 undef>
  %292 = shufflevector <16 x float> %276, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 23, i32 undef, i32 undef, i32 undef, i32 undef>
  %293 = shufflevector <16 x float> %277, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 24, i32 undef, i32 undef, i32 undef, i32 undef>
  %294 = shufflevector <16 x float> %278, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 25, i32 undef, i32 undef, i32 undef, i32 undef>
  %295 = shufflevector <16 x float> %279, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 26, i32 undef, i32 undef, i32 undef, i32 undef>
  %296 = shufflevector <16 x float> %280, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 27, i32 undef, i32 undef, i32 undef, i32 undef>
  %297 = shufflevector <16 x float> %281, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 28, i32 undef, i32 undef, i32 undef, i32 undef>
  %298 = shufflevector <16 x float> %282, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 29, i32 undef, i32 undef, i32 undef, i32 undef>
  %299 = shufflevector <16 x float> %283, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 30, i32 undef, i32 undef, i32 undef, i32 undef>
  %300 = shufflevector <16 x float> %284, <16 x float> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %301 = shufflevector <16 x float> %285, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 undef, i32 undef, i32 undef>
  %302 = shufflevector <16 x float> %286, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 17, i32 undef, i32 undef, i32 undef>
  %303 = shufflevector <16 x float> %287, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 18, i32 undef, i32 undef, i32 undef>
  %304 = shufflevector <16 x float> %288, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 undef, i32 undef, i32 undef>
  %305 = shufflevector <16 x float> %289, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 20, i32 undef, i32 undef, i32 undef>
  %306 = shufflevector <16 x float> %290, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 21, i32 undef, i32 undef, i32 undef>
  %307 = shufflevector <16 x float> %291, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 22, i32 undef, i32 undef, i32 undef>
  %308 = shufflevector <16 x float> %292, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 23, i32 undef, i32 undef, i32 undef>
  %309 = shufflevector <16 x float> %293, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 24, i32 undef, i32 undef, i32 undef>
  %310 = shufflevector <16 x float> %294, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 25, i32 undef, i32 undef, i32 undef>
  %311 = shufflevector <16 x float> %295, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 26, i32 undef, i32 undef, i32 undef>
  %312 = shufflevector <16 x float> %296, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 27, i32 undef, i32 undef, i32 undef>
  %313 = shufflevector <16 x float> %297, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 undef, i32 undef, i32 undef>
  %314 = shufflevector <16 x float> %298, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 29, i32 undef, i32 undef, i32 undef>
  %315 = shufflevector <16 x float> %299, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 30, i32 undef, i32 undef, i32 undef>
  %316 = shufflevector <16 x float> %300, <16 x float> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 31, i32 undef, i32 undef, i32 undef>
  %317 = shufflevector <16 x float> %301, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 undef, i32 undef>
  %318 = shufflevector <16 x float> %302, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 undef, i32 undef>
  %319 = shufflevector <16 x float> %303, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 18, i32 undef, i32 undef>
  %320 = shufflevector <16 x float> %304, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 19, i32 undef, i32 undef>
  %321 = shufflevector <16 x float> %305, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 20, i32 undef, i32 undef>
  %322 = shufflevector <16 x float> %306, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 21, i32 undef, i32 undef>
  %323 = shufflevector <16 x float> %307, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 22, i32 undef, i32 undef>
  %324 = shufflevector <16 x float> %308, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 23, i32 undef, i32 undef>
  %325 = shufflevector <16 x float> %309, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 24, i32 undef, i32 undef>
  %326 = shufflevector <16 x float> %310, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 25, i32 undef, i32 undef>
  %327 = shufflevector <16 x float> %311, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 26, i32 undef, i32 undef>
  %328 = shufflevector <16 x float> %312, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 27, i32 undef, i32 undef>
  %329 = shufflevector <16 x float> %313, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 28, i32 undef, i32 undef>
  %330 = shufflevector <16 x float> %314, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 29, i32 undef, i32 undef>
  %331 = shufflevector <16 x float> %315, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 30, i32 undef, i32 undef>
  %332 = shufflevector <16 x float> %316, <16 x float> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 31, i32 undef, i32 undef>
  %333 = shufflevector <16 x float> %317, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 undef>
  %334 = shufflevector <16 x float> %318, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 17, i32 undef>
  %335 = shufflevector <16 x float> %319, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 18, i32 undef>
  %336 = shufflevector <16 x float> %320, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 19, i32 undef>
  %337 = shufflevector <16 x float> %321, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 20, i32 undef>
  %338 = shufflevector <16 x float> %322, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 21, i32 undef>
  %339 = shufflevector <16 x float> %323, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 22, i32 undef>
  %340 = shufflevector <16 x float> %324, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 23, i32 undef>
  %341 = shufflevector <16 x float> %325, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 24, i32 undef>
  %342 = shufflevector <16 x float> %326, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 25, i32 undef>
  %343 = shufflevector <16 x float> %327, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 26, i32 undef>
  %344 = shufflevector <16 x float> %328, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 27, i32 undef>
  %345 = shufflevector <16 x float> %329, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 28, i32 undef>
  %346 = shufflevector <16 x float> %330, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 29, i32 undef>
  %347 = shufflevector <16 x float> %331, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 undef>
  %348 = shufflevector <16 x float> %332, <16 x float> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 31, i32 undef>
  %349 = shufflevector <16 x float> %333, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>
  %350 = shufflevector <16 x float> %334, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>
  %351 = shufflevector <16 x float> %335, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 18>
  %352 = shufflevector <16 x float> %336, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 19>
  %353 = shufflevector <16 x float> %337, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 20>
  %354 = shufflevector <16 x float> %338, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 21>
  %355 = shufflevector <16 x float> %339, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 22>
  %356 = shufflevector <16 x float> %340, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 23>
  %357 = shufflevector <16 x float> %341, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 24>
  %358 = shufflevector <16 x float> %342, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 25>
  %359 = shufflevector <16 x float> %343, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 26>
  %360 = shufflevector <16 x float> %344, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 27>
  %361 = shufflevector <16 x float> %345, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 28>
  %362 = shufflevector <16 x float> %346, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 29>
  %363 = shufflevector <16 x float> %347, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 30>
  %364 = shufflevector <16 x float> %348, <16 x float> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 31>
  %365 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extractvector_func.i
  %366 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract33vector_func.i
  %367 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract34vector_func.i
  %368 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract35vector_func.i
  %369 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract36vector_func.i
  %370 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract37vector_func.i
  %371 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract38vector_func.i
  %372 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract39vector_func.i
  %373 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract40vector_func.i
  %374 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract41vector_func.i
  %375 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract42vector_func.i
  %376 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract43vector_func.i
  %377 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract44vector_func.i
  %378 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract45vector_func.i
  %379 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract46vector_func.i
  %380 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %extract47vector_func.i
  %381 = bitcast float addrspace(1)* %365 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %381, <16 x float> %349, i32 0, i32 0) nounwind
  %382 = getelementptr i8* %381, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %382, <16 x float> %349, i32 0, i32 0) nounwind
  %383 = bitcast float addrspace(1)* %366 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %383, <16 x float> %350, i32 0, i32 0) nounwind
  %384 = getelementptr i8* %383, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %384, <16 x float> %350, i32 0, i32 0) nounwind
  %385 = bitcast float addrspace(1)* %367 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %385, <16 x float> %351, i32 0, i32 0) nounwind
  %386 = getelementptr i8* %385, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %386, <16 x float> %351, i32 0, i32 0) nounwind
  %387 = bitcast float addrspace(1)* %368 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %387, <16 x float> %352, i32 0, i32 0) nounwind
  %388 = getelementptr i8* %387, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %388, <16 x float> %352, i32 0, i32 0) nounwind
  %389 = bitcast float addrspace(1)* %369 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %389, <16 x float> %353, i32 0, i32 0) nounwind
  %390 = getelementptr i8* %389, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %390, <16 x float> %353, i32 0, i32 0) nounwind
  %391 = bitcast float addrspace(1)* %370 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %391, <16 x float> %354, i32 0, i32 0) nounwind
  %392 = getelementptr i8* %391, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %392, <16 x float> %354, i32 0, i32 0) nounwind
  %393 = bitcast float addrspace(1)* %371 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %393, <16 x float> %355, i32 0, i32 0) nounwind
  %394 = getelementptr i8* %393, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %394, <16 x float> %355, i32 0, i32 0) nounwind
  %395 = bitcast float addrspace(1)* %372 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %395, <16 x float> %356, i32 0, i32 0) nounwind
  %396 = getelementptr i8* %395, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %396, <16 x float> %356, i32 0, i32 0) nounwind
  %397 = bitcast float addrspace(1)* %373 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %397, <16 x float> %357, i32 0, i32 0) nounwind
  %398 = getelementptr i8* %397, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %398, <16 x float> %357, i32 0, i32 0) nounwind
  %399 = bitcast float addrspace(1)* %374 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %399, <16 x float> %358, i32 0, i32 0) nounwind
  %400 = getelementptr i8* %399, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %400, <16 x float> %358, i32 0, i32 0) nounwind
  %401 = bitcast float addrspace(1)* %375 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %401, <16 x float> %359, i32 0, i32 0) nounwind
  %402 = getelementptr i8* %401, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %402, <16 x float> %359, i32 0, i32 0) nounwind
  %403 = bitcast float addrspace(1)* %376 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %403, <16 x float> %360, i32 0, i32 0) nounwind
  %404 = getelementptr i8* %403, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %404, <16 x float> %360, i32 0, i32 0) nounwind
  %405 = bitcast float addrspace(1)* %377 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %405, <16 x float> %361, i32 0, i32 0) nounwind
  %406 = getelementptr i8* %405, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %406, <16 x float> %361, i32 0, i32 0) nounwind
  %407 = bitcast float addrspace(1)* %378 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %407, <16 x float> %362, i32 0, i32 0) nounwind
  %408 = getelementptr i8* %407, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %408, <16 x float> %362, i32 0, i32 0) nounwind
  %409 = bitcast float addrspace(1)* %379 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %409, <16 x float> %363, i32 0, i32 0) nounwind
  %410 = getelementptr i8* %409, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %410, <16 x float> %363, i32 0, i32 0) nounwind
  %411 = bitcast float addrspace(1)* %380 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %411, <16 x float> %364, i32 0, i32 0) nounwind
  %412 = getelementptr i8* %411, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %412, <16 x float> %364, i32 0, i32 0) nounwind
  %Strided.add.i = add <16 x i64> %27, %vector.i
  %lsr.iv.next6 = add i64 %lsr.iv5, -1
  %dim_0_vector_cmp.to.max.i = icmp eq i64 %lsr.iv.next6, 0
  br i1 %dim_0_vector_cmp.to.max.i, label %dim_0_vector_exit.i, label %26

dim_0_vector_exit.i:                              ; preds = %26
  %dim_1_vector_inc_ind_var.i = add nuw nsw i64 %dim_1_vector_ind_var.i, 1
  %dim_1_vector_inc_tid.i = add nuw nsw i64 %dim_1_vector_tid.i, 1
  %dim_1_vector_cmp.to.max.i = icmp eq i64 %dim_1_vector_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_vector_cmp.to.max.i, label %scalarIf.i, label %dim_0_vector_pre_head.i

scalarIf.i:                                       ; preds = %dim_0_vector_exit.i, %wrapper_entry
  %413 = icmp eq i64 %LocalSize_0, %num.vector.wi.i
  br i1 %413, label %__read_16_separated_args.exit, label %dim_0_pre_head.i.preheader

dim_0_pre_head.i.preheader:                       ; preds = %scalarIf.i
  %414 = sub i64 %LocalSize_0, %num.vector.wi.i
  %415 = mul i64 %LocalSize_1, %GroupID_1
  %416 = add i64 %GlobalOffset_1, %415
  %417 = trunc i64 %416 to i32
  %418 = mul i32 %explicit_2, %417
  %419 = add i64 %GlobalOffset_0, %num.vector.wi.i
  %420 = mul i64 %LocalSize_0, %GroupID_0
  %421 = add i64 %419, %420
  %422 = mul i64 %421, 16
  %423 = trunc i64 %422 to i32
  %424 = add i32 %418, %423
  br label %dim_0_pre_head.i

dim_0_pre_head.i:                                 ; preds = %dim_0_pre_head.i.preheader, %dim_0_exit.i
  %lsr.iv1 = phi i32 [ %424, %dim_0_pre_head.i.preheader ], [ %lsr.iv.next2, %dim_0_exit.i ]
  %dim_1_ind_var.i = phi i64 [ %dim_1_inc_ind_var.i, %dim_0_exit.i ], [ 0, %dim_0_pre_head.i.preheader ]
  br label %scalar_kernel_entry.i

scalar_kernel_entry.i:                            ; preds = %scalar_kernel_entry.i, %dim_0_pre_head.i
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %scalar_kernel_entry.i ], [ %lsr.iv1, %dim_0_pre_head.i ]
  %lsr.iv = phi i64 [ %lsr.iv.next, %scalar_kernel_entry.i ], [ %414, %dim_0_pre_head.i ]
  %425 = sext i32 %lsr.iv3 to i64
  %426 = getelementptr inbounds float addrspace(1)* %explicit_0, i64 %425
  %427 = call <16 x float> @llvm.x86.mic.undef.ps() nounwind
  %428 = bitcast float addrspace(1)* %426 to i8*
  %429 = call <16 x float> @llvm.x86.mic.loadunpackl.ps(<16 x float> %427, i8* %428, i32 0, i32 0) nounwind
  %430 = getelementptr i8* %428, i64 64
  %431 = call <16 x float> @llvm.x86.mic.loadunpackh.ps(<16 x float> %429, i8* %430, i32 0, i32 0) nounwind
  %432 = fadd <16 x float> %431, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %433 = getelementptr inbounds float addrspace(1)* %explicit_1, i64 %425
  %434 = bitcast float addrspace(1)* %433 to i8*
  call void @llvm.x86.mic.packstorel.ps(i8* %434, <16 x float> %432, i32 0, i32 0) nounwind
  %435 = getelementptr i8* %434, i64 64
  call void @llvm.x86.mic.packstoreh.ps(i8* %435, <16 x float> %432, i32 0, i32 0) nounwind
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next4 = add i32 %lsr.iv3, 16
  %dim_0_cmp.to.max.i = icmp eq i64 %lsr.iv.next, 0
  br i1 %dim_0_cmp.to.max.i, label %dim_0_exit.i, label %scalar_kernel_entry.i

dim_0_exit.i:                                     ; preds = %scalar_kernel_entry.i
  %dim_1_inc_ind_var.i = add nuw nsw i64 %dim_1_ind_var.i, 1
  %lsr.iv.next2 = add i32 %lsr.iv1, %explicit_2
  %dim_1_cmp.to.max.i = icmp eq i64 %dim_1_inc_ind_var.i, %LocalSize_1
  br i1 %dim_1_cmp.to.max.i, label %__read_16_separated_args.exit, label %dim_0_pre_head.i

__read_16_separated_args.exit:                    ; preds = %dim_0_exit.i, %scalarIf.i
  ret void
}

declare void @llvm.x86.mic.prefetch(i8* nocapture, i32) nounwind

!opencl.kernels = !{!0, !6, !7, !8, !9}
!opencl.enable.FP_CONTRACT = !{}
!opencl.spir.version = !{!10}
!opencl.ocl.version = !{!11}
!opencl.used.extensions = !{!12}
!opencl.used.optional.core.features = !{!12}
!opencl.compiler.options = !{!12}
!opencl.kernel_info = !{!13, !24, !28, !31, !34}
!llvm.functions_info = !{}

!0 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_1_separated_args, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"float*", metadata !"float*", metadata !"int"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"const", metadata !"", metadata !"const"}
!5 = metadata !{metadata !"kernel_arg_name", metadata !"input", metadata !"output", metadata !"w"}
!6 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_2_separated_args, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!7 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_4_separated_args, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!8 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_8_separated_args, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!9 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_16_separated_args, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!10 = metadata !{i32 1, i32 0}
!11 = metadata !{i32 0, i32 0}
!12 = metadata !{}
!13 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_1_separated_args, metadata !14}
!14 = metadata !{metadata !15, metadata !16, metadata !17, metadata !18, metadata !19, metadata !20, metadata !21, metadata !22, metadata !23}
!15 = metadata !{metadata !"local_buffer_size", i32 0}
!16 = metadata !{metadata !"barrier_buffer_size", i32 0}
!17 = metadata !{metadata !"kernel_execution_length", i32 13}
!18 = metadata !{metadata !"kernel_has_barrier", i1 false}
!19 = metadata !{metadata !"no_barrier_path", i1 true}
!20 = metadata !{metadata !"vectorized_kernel", null}
!21 = metadata !{metadata !"vectorized_width", i32 16}
!22 = metadata !{metadata !"kernel_wrapper", void (i8*, i64*, {}*)* @read_1}
!23 = metadata !{metadata !"scalarized_kernel", null}
!24 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_8_separated_args, metadata !25}
!25 = metadata !{metadata !15, metadata !16, metadata !26, metadata !18, metadata !19, metadata !20, metadata !21, metadata !27, metadata !23}
!26 = metadata !{metadata !"kernel_execution_length", i32 14}
!27 = metadata !{metadata !"kernel_wrapper", void (i8*, i64*, {}*)* @read_8}
!28 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_2_separated_args, metadata !29}
!29 = metadata !{metadata !15, metadata !16, metadata !26, metadata !18, metadata !19, metadata !20, metadata !21, metadata !30, metadata !23}
!30 = metadata !{metadata !"kernel_wrapper", void (i8*, i64*, {}*)* @read_2}
!31 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_4_separated_args, metadata !32}
!32 = metadata !{metadata !15, metadata !16, metadata !26, metadata !18, metadata !19, metadata !20, metadata !21, metadata !33, metadata !23}
!33 = metadata !{metadata !"kernel_wrapper", void (i8*, i64*, {}*)* @read_4}
!34 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i8 addrspace(3)*, { i64, [3 x i64], [3 x i64], [3 x i64], [3 x i64], i64, {}*, [4 x i64]* }*, i64*, [4 x i64], i8*, i64*, {}*)* @__read_16_separated_args, metadata !35}
!35 = metadata !{metadata !15, metadata !16, metadata !26, metadata !18, metadata !19, metadata !20, metadata !21, metadata !36, metadata !23}
!36 = metadata !{metadata !"kernel_wrapper", void (i8*, i64*, {}*)* @read_16}
